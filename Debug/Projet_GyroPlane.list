
Projet_GyroPlane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014344  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  08014488  08014488  00015488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b28  08014b28  00016370  2**0
                  CONTENTS
  4 .ARM          00000008  08014b28  08014b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b30  08014b30  00016370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b30  08014b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014b34  08014b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  08014b38  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000370  08014ea8  00016370  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  08014ea8  000168c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00016370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036aac  00000000  00000000  00016399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d6b  00000000  00000000  0004ce45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003048  00000000  00000000  00051bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002553  00000000  00000000  00054bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c25b  00000000  00000000  0005714b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028e4c  00000000  00000000  000733a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aacf5  00000000  00000000  0009c1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ea64  00000000  00000000  00146f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00155990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0801446c 	.word	0x0801446c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0801446c 	.word	0x0801446c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b99e 	b.w	80014e0 <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f83c 	bl	8001228 <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__aeabi_d2lz>:
 80011bc:	b538      	push	{r3, r4, r5, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	2300      	movs	r3, #0
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	f7ff fc11 	bl	80009ec <__aeabi_dcmplt>
 80011ca:	b928      	cbnz	r0, 80011d8 <__aeabi_d2lz+0x1c>
 80011cc:	4620      	mov	r0, r4
 80011ce:	4629      	mov	r1, r5
 80011d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011d4:	f000 b80a 	b.w	80011ec <__aeabi_d2ulz>
 80011d8:	4620      	mov	r0, r4
 80011da:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011de:	f000 f805 	bl	80011ec <__aeabi_d2ulz>
 80011e2:	4240      	negs	r0, r0
 80011e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e8:	bd38      	pop	{r3, r4, r5, pc}
 80011ea:	bf00      	nop

080011ec <__aeabi_d2ulz>:
 80011ec:	b5d0      	push	{r4, r6, r7, lr}
 80011ee:	2200      	movs	r2, #0
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <__aeabi_d2ulz+0x34>)
 80011f2:	4606      	mov	r6, r0
 80011f4:	460f      	mov	r7, r1
 80011f6:	f7ff f987 	bl	8000508 <__aeabi_dmul>
 80011fa:	f7ff fc5d 	bl	8000ab8 <__aeabi_d2uiz>
 80011fe:	4604      	mov	r4, r0
 8001200:	f7ff f908 	bl	8000414 <__aeabi_ui2d>
 8001204:	2200      	movs	r2, #0
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <__aeabi_d2ulz+0x38>)
 8001208:	f7ff f97e 	bl	8000508 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4630      	mov	r0, r6
 8001212:	4639      	mov	r1, r7
 8001214:	f7fe ffc0 	bl	8000198 <__aeabi_dsub>
 8001218:	f7ff fc4e 	bl	8000ab8 <__aeabi_d2uiz>
 800121c:	4621      	mov	r1, r4
 800121e:	bdd0      	pop	{r4, r6, r7, pc}
 8001220:	3df00000 	.word	0x3df00000
 8001224:	41f00000 	.word	0x41f00000

08001228 <__udivmoddi4>:
 8001228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800122c:	9d08      	ldr	r5, [sp, #32]
 800122e:	460c      	mov	r4, r1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d14e      	bne.n	80012d2 <__udivmoddi4+0xaa>
 8001234:	4694      	mov	ip, r2
 8001236:	458c      	cmp	ip, r1
 8001238:	4686      	mov	lr, r0
 800123a:	fab2 f282 	clz	r2, r2
 800123e:	d962      	bls.n	8001306 <__udivmoddi4+0xde>
 8001240:	b14a      	cbz	r2, 8001256 <__udivmoddi4+0x2e>
 8001242:	f1c2 0320 	rsb	r3, r2, #32
 8001246:	4091      	lsls	r1, r2
 8001248:	fa20 f303 	lsr.w	r3, r0, r3
 800124c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001250:	4319      	orrs	r1, r3
 8001252:	fa00 fe02 	lsl.w	lr, r0, r2
 8001256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800125a:	fbb1 f4f7 	udiv	r4, r1, r7
 800125e:	fb07 1114 	mls	r1, r7, r4, r1
 8001262:	fa1f f68c 	uxth.w	r6, ip
 8001266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800126a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800126e:	fb04 f106 	mul.w	r1, r4, r6
 8001272:	4299      	cmp	r1, r3
 8001274:	d90a      	bls.n	800128c <__udivmoddi4+0x64>
 8001276:	eb1c 0303 	adds.w	r3, ip, r3
 800127a:	f104 30ff 	add.w	r0, r4, #4294967295
 800127e:	f080 8110 	bcs.w	80014a2 <__udivmoddi4+0x27a>
 8001282:	4299      	cmp	r1, r3
 8001284:	f240 810d 	bls.w	80014a2 <__udivmoddi4+0x27a>
 8001288:	3c02      	subs	r4, #2
 800128a:	4463      	add	r3, ip
 800128c:	1a59      	subs	r1, r3, r1
 800128e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001292:	fb07 1110 	mls	r1, r7, r0, r1
 8001296:	fb00 f606 	mul.w	r6, r0, r6
 800129a:	fa1f f38e 	uxth.w	r3, lr
 800129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012a2:	429e      	cmp	r6, r3
 80012a4:	d90a      	bls.n	80012bc <__udivmoddi4+0x94>
 80012a6:	eb1c 0303 	adds.w	r3, ip, r3
 80012aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80012ae:	f080 80fa 	bcs.w	80014a6 <__udivmoddi4+0x27e>
 80012b2:	429e      	cmp	r6, r3
 80012b4:	f240 80f7 	bls.w	80014a6 <__udivmoddi4+0x27e>
 80012b8:	4463      	add	r3, ip
 80012ba:	3802      	subs	r0, #2
 80012bc:	2100      	movs	r1, #0
 80012be:	1b9b      	subs	r3, r3, r6
 80012c0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80012c4:	b11d      	cbz	r5, 80012ce <__udivmoddi4+0xa6>
 80012c6:	40d3      	lsrs	r3, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	e9c5 3200 	strd	r3, r2, [r5]
 80012ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d2:	428b      	cmp	r3, r1
 80012d4:	d905      	bls.n	80012e2 <__udivmoddi4+0xba>
 80012d6:	b10d      	cbz	r5, 80012dc <__udivmoddi4+0xb4>
 80012d8:	e9c5 0100 	strd	r0, r1, [r5]
 80012dc:	2100      	movs	r1, #0
 80012de:	4608      	mov	r0, r1
 80012e0:	e7f5      	b.n	80012ce <__udivmoddi4+0xa6>
 80012e2:	fab3 f183 	clz	r1, r3
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d146      	bne.n	8001378 <__udivmoddi4+0x150>
 80012ea:	42a3      	cmp	r3, r4
 80012ec:	d302      	bcc.n	80012f4 <__udivmoddi4+0xcc>
 80012ee:	4290      	cmp	r0, r2
 80012f0:	f0c0 80ee 	bcc.w	80014d0 <__udivmoddi4+0x2a8>
 80012f4:	1a86      	subs	r6, r0, r2
 80012f6:	eb64 0303 	sbc.w	r3, r4, r3
 80012fa:	2001      	movs	r0, #1
 80012fc:	2d00      	cmp	r5, #0
 80012fe:	d0e6      	beq.n	80012ce <__udivmoddi4+0xa6>
 8001300:	e9c5 6300 	strd	r6, r3, [r5]
 8001304:	e7e3      	b.n	80012ce <__udivmoddi4+0xa6>
 8001306:	2a00      	cmp	r2, #0
 8001308:	f040 808f 	bne.w	800142a <__udivmoddi4+0x202>
 800130c:	eba1 040c 	sub.w	r4, r1, ip
 8001310:	2101      	movs	r1, #1
 8001312:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001316:	fa1f f78c 	uxth.w	r7, ip
 800131a:	fbb4 f6f8 	udiv	r6, r4, r8
 800131e:	fb08 4416 	mls	r4, r8, r6, r4
 8001322:	fb07 f006 	mul.w	r0, r7, r6
 8001326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800132a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800132e:	4298      	cmp	r0, r3
 8001330:	d908      	bls.n	8001344 <__udivmoddi4+0x11c>
 8001332:	eb1c 0303 	adds.w	r3, ip, r3
 8001336:	f106 34ff 	add.w	r4, r6, #4294967295
 800133a:	d202      	bcs.n	8001342 <__udivmoddi4+0x11a>
 800133c:	4298      	cmp	r0, r3
 800133e:	f200 80cb 	bhi.w	80014d8 <__udivmoddi4+0x2b0>
 8001342:	4626      	mov	r6, r4
 8001344:	1a1c      	subs	r4, r3, r0
 8001346:	fbb4 f0f8 	udiv	r0, r4, r8
 800134a:	fb08 4410 	mls	r4, r8, r0, r4
 800134e:	fb00 f707 	mul.w	r7, r0, r7
 8001352:	fa1f f38e 	uxth.w	r3, lr
 8001356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800135a:	429f      	cmp	r7, r3
 800135c:	d908      	bls.n	8001370 <__udivmoddi4+0x148>
 800135e:	eb1c 0303 	adds.w	r3, ip, r3
 8001362:	f100 34ff 	add.w	r4, r0, #4294967295
 8001366:	d202      	bcs.n	800136e <__udivmoddi4+0x146>
 8001368:	429f      	cmp	r7, r3
 800136a:	f200 80ae 	bhi.w	80014ca <__udivmoddi4+0x2a2>
 800136e:	4620      	mov	r0, r4
 8001370:	1bdb      	subs	r3, r3, r7
 8001372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001376:	e7a5      	b.n	80012c4 <__udivmoddi4+0x9c>
 8001378:	f1c1 0720 	rsb	r7, r1, #32
 800137c:	408b      	lsls	r3, r1
 800137e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001382:	ea4c 0c03 	orr.w	ip, ip, r3
 8001386:	fa24 f607 	lsr.w	r6, r4, r7
 800138a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800138e:	fbb6 f8f9 	udiv	r8, r6, r9
 8001392:	fa1f fe8c 	uxth.w	lr, ip
 8001396:	fb09 6618 	mls	r6, r9, r8, r6
 800139a:	fa20 f307 	lsr.w	r3, r0, r7
 800139e:	408c      	lsls	r4, r1
 80013a0:	fa00 fa01 	lsl.w	sl, r0, r1
 80013a4:	fb08 f00e 	mul.w	r0, r8, lr
 80013a8:	431c      	orrs	r4, r3
 80013aa:	0c23      	lsrs	r3, r4, #16
 80013ac:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80013b0:	4298      	cmp	r0, r3
 80013b2:	fa02 f201 	lsl.w	r2, r2, r1
 80013b6:	d90a      	bls.n	80013ce <__udivmoddi4+0x1a6>
 80013b8:	eb1c 0303 	adds.w	r3, ip, r3
 80013bc:	f108 36ff 	add.w	r6, r8, #4294967295
 80013c0:	f080 8081 	bcs.w	80014c6 <__udivmoddi4+0x29e>
 80013c4:	4298      	cmp	r0, r3
 80013c6:	d97e      	bls.n	80014c6 <__udivmoddi4+0x29e>
 80013c8:	f1a8 0802 	sub.w	r8, r8, #2
 80013cc:	4463      	add	r3, ip
 80013ce:	1a1e      	subs	r6, r3, r0
 80013d0:	fbb6 f3f9 	udiv	r3, r6, r9
 80013d4:	fb09 6613 	mls	r6, r9, r3, r6
 80013d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80013dc:	b2a4      	uxth	r4, r4
 80013de:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80013e2:	45a6      	cmp	lr, r4
 80013e4:	d908      	bls.n	80013f8 <__udivmoddi4+0x1d0>
 80013e6:	eb1c 0404 	adds.w	r4, ip, r4
 80013ea:	f103 30ff 	add.w	r0, r3, #4294967295
 80013ee:	d266      	bcs.n	80014be <__udivmoddi4+0x296>
 80013f0:	45a6      	cmp	lr, r4
 80013f2:	d964      	bls.n	80014be <__udivmoddi4+0x296>
 80013f4:	3b02      	subs	r3, #2
 80013f6:	4464      	add	r4, ip
 80013f8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013fc:	fba0 8302 	umull	r8, r3, r0, r2
 8001400:	eba4 040e 	sub.w	r4, r4, lr
 8001404:	429c      	cmp	r4, r3
 8001406:	46c6      	mov	lr, r8
 8001408:	461e      	mov	r6, r3
 800140a:	d350      	bcc.n	80014ae <__udivmoddi4+0x286>
 800140c:	d04d      	beq.n	80014aa <__udivmoddi4+0x282>
 800140e:	b155      	cbz	r5, 8001426 <__udivmoddi4+0x1fe>
 8001410:	ebba 030e 	subs.w	r3, sl, lr
 8001414:	eb64 0406 	sbc.w	r4, r4, r6
 8001418:	fa04 f707 	lsl.w	r7, r4, r7
 800141c:	40cb      	lsrs	r3, r1
 800141e:	431f      	orrs	r7, r3
 8001420:	40cc      	lsrs	r4, r1
 8001422:	e9c5 7400 	strd	r7, r4, [r5]
 8001426:	2100      	movs	r1, #0
 8001428:	e751      	b.n	80012ce <__udivmoddi4+0xa6>
 800142a:	fa0c fc02 	lsl.w	ip, ip, r2
 800142e:	f1c2 0320 	rsb	r3, r2, #32
 8001432:	40d9      	lsrs	r1, r3
 8001434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001438:	fa20 f303 	lsr.w	r3, r0, r3
 800143c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001440:	fbb1 f0f8 	udiv	r0, r1, r8
 8001444:	fb08 1110 	mls	r1, r8, r0, r1
 8001448:	4094      	lsls	r4, r2
 800144a:	431c      	orrs	r4, r3
 800144c:	fa1f f78c 	uxth.w	r7, ip
 8001450:	0c23      	lsrs	r3, r4, #16
 8001452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001456:	fb00 f107 	mul.w	r1, r0, r7
 800145a:	4299      	cmp	r1, r3
 800145c:	d908      	bls.n	8001470 <__udivmoddi4+0x248>
 800145e:	eb1c 0303 	adds.w	r3, ip, r3
 8001462:	f100 36ff 	add.w	r6, r0, #4294967295
 8001466:	d22c      	bcs.n	80014c2 <__udivmoddi4+0x29a>
 8001468:	4299      	cmp	r1, r3
 800146a:	d92a      	bls.n	80014c2 <__udivmoddi4+0x29a>
 800146c:	3802      	subs	r0, #2
 800146e:	4463      	add	r3, ip
 8001470:	1a5b      	subs	r3, r3, r1
 8001472:	fbb3 f1f8 	udiv	r1, r3, r8
 8001476:	fb08 3311 	mls	r3, r8, r1, r3
 800147a:	b2a4      	uxth	r4, r4
 800147c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001480:	fb01 f307 	mul.w	r3, r1, r7
 8001484:	42a3      	cmp	r3, r4
 8001486:	d908      	bls.n	800149a <__udivmoddi4+0x272>
 8001488:	eb1c 0404 	adds.w	r4, ip, r4
 800148c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001490:	d213      	bcs.n	80014ba <__udivmoddi4+0x292>
 8001492:	42a3      	cmp	r3, r4
 8001494:	d911      	bls.n	80014ba <__udivmoddi4+0x292>
 8001496:	3902      	subs	r1, #2
 8001498:	4464      	add	r4, ip
 800149a:	1ae4      	subs	r4, r4, r3
 800149c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80014a0:	e73b      	b.n	800131a <__udivmoddi4+0xf2>
 80014a2:	4604      	mov	r4, r0
 80014a4:	e6f2      	b.n	800128c <__udivmoddi4+0x64>
 80014a6:	4608      	mov	r0, r1
 80014a8:	e708      	b.n	80012bc <__udivmoddi4+0x94>
 80014aa:	45c2      	cmp	sl, r8
 80014ac:	d2af      	bcs.n	800140e <__udivmoddi4+0x1e6>
 80014ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80014b2:	eb63 060c 	sbc.w	r6, r3, ip
 80014b6:	3801      	subs	r0, #1
 80014b8:	e7a9      	b.n	800140e <__udivmoddi4+0x1e6>
 80014ba:	4631      	mov	r1, r6
 80014bc:	e7ed      	b.n	800149a <__udivmoddi4+0x272>
 80014be:	4603      	mov	r3, r0
 80014c0:	e79a      	b.n	80013f8 <__udivmoddi4+0x1d0>
 80014c2:	4630      	mov	r0, r6
 80014c4:	e7d4      	b.n	8001470 <__udivmoddi4+0x248>
 80014c6:	46b0      	mov	r8, r6
 80014c8:	e781      	b.n	80013ce <__udivmoddi4+0x1a6>
 80014ca:	4463      	add	r3, ip
 80014cc:	3802      	subs	r0, #2
 80014ce:	e74f      	b.n	8001370 <__udivmoddi4+0x148>
 80014d0:	4606      	mov	r6, r0
 80014d2:	4623      	mov	r3, r4
 80014d4:	4608      	mov	r0, r1
 80014d6:	e711      	b.n	80012fc <__udivmoddi4+0xd4>
 80014d8:	3e02      	subs	r6, #2
 80014da:	4463      	add	r3, ip
 80014dc:	e732      	b.n	8001344 <__udivmoddi4+0x11c>
 80014de:	bf00      	nop

080014e0 <__aeabi_idiv0>:
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d013      	beq.n	8001524 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001500:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001504:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800150c:	e000      	b.n	8001510 <ITM_SendChar+0x2c>
    {
      __NOP();
 800150e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001510:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f9      	beq.n	800150e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800151a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f008 ff4d 	bl	800a3d4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 fa01 	bl	8001940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153e:	f000 fbf5 	bl	8001d2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001542:	f000 fbc9 	bl	8001cd8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001546:	f000 fac3 	bl	8001ad0 <MX_SPI1_Init>
  MX_TIM3_Init();
 800154a:	f000 fb43 	bl	8001bd4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800154e:	f000 faf5 	bl	8001b3c <MX_TIM2_Init>
  MX_ADC_Init();
 8001552:	f000 fa43 	bl	80019dc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

 while(HAL_TIM_PWM_Init(&htim3)!= HAL_OK){
 8001556:	e005      	b.n	8001564 <main+0x34>
	 HAL_TIM_PWM_Init(&htim3);
 8001558:	489a      	ldr	r0, [pc, #616]	@ (80017c4 <main+0x294>)
 800155a:	f00c fad8 	bl	800db0e <HAL_TIM_PWM_Init>
	 printf("Timer enabled \r\n");
 800155e:	489a      	ldr	r0, [pc, #616]	@ (80017c8 <main+0x298>)
 8001560:	f00e fa8c 	bl	800fa7c <puts>
 while(HAL_TIM_PWM_Init(&htim3)!= HAL_OK){
 8001564:	4897      	ldr	r0, [pc, #604]	@ (80017c4 <main+0x294>)
 8001566:	f00c fad2 	bl	800db0e <HAL_TIM_PWM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f3      	bne.n	8001558 <main+0x28>
  }

  MAX7219_Init();
 8001570:	f00d fa30 	bl	800e9d4 <MAX7219_Init>
  MAX7219_DisplayTestStart();
 8001574:	f00d fa4b 	bl	800ea0e <MAX7219_DisplayTestStart>
  HAL_Delay(2000);
 8001578:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800157c:	f008 ff98 	bl	800a4b0 <HAL_Delay>
  MAX7219_DisplayTestStop();
 8001580:	f00d fa4d 	bl	800ea1e <MAX7219_DisplayTestStop>
  printf("Display test finished \r  \n");
 8001584:	4891      	ldr	r0, [pc, #580]	@ (80017cc <main+0x29c>)
 8001586:	f00e fa79 	bl	800fa7c <puts>

  while(IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE) != 0){
 800158a:	e00c      	b.n	80015a6 <main+0x76>
	  int32_t test = IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE);//initialisation du capteur de pression
 800158c:	2101      	movs	r1, #1
 800158e:	2001      	movs	r0, #1
 8001590:	f007 ffb0 	bl	80094f4 <IKS01A3_ENV_SENSOR_Init>
 8001594:	6078      	str	r0, [r7, #4]
	  printf("test : %ld \r  \n",test);
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	488d      	ldr	r0, [pc, #564]	@ (80017d0 <main+0x2a0>)
 800159a:	f00e fa07 	bl	800f9ac <iprintf>
	  HAL_Delay(1000);
 800159e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015a2:	f008 ff85 	bl	800a4b0 <HAL_Delay>
  while(IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE) != 0){
 80015a6:	2101      	movs	r1, #1
 80015a8:	2001      	movs	r0, #1
 80015aa:	f007 ffa3 	bl	80094f4 <IKS01A3_ENV_SENSOR_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1eb      	bne.n	800158c <main+0x5c>
   }


  while(IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE) != 0){
 80015b4:	e00c      	b.n	80015d0 <main+0xa0>
	  int32_t test = IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE);//initialisation du capteur de pression
 80015b6:	2102      	movs	r1, #2
 80015b8:	2001      	movs	r0, #1
 80015ba:	f007 ff9b 	bl	80094f4 <IKS01A3_ENV_SENSOR_Init>
 80015be:	60b8      	str	r0, [r7, #8]
	  printf("test : %ld \r  \n",test);
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	4883      	ldr	r0, [pc, #524]	@ (80017d0 <main+0x2a0>)
 80015c4:	f00e f9f2 	bl	800f9ac <iprintf>
	  HAL_Delay(1000);
 80015c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015cc:	f008 ff70 	bl	800a4b0 <HAL_Delay>
  while(IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE) != 0){
 80015d0:	2102      	movs	r1, #2
 80015d2:	2001      	movs	r0, #1
 80015d4:	f007 ff8e 	bl	80094f4 <IKS01A3_ENV_SENSOR_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1eb      	bne.n	80015b6 <main+0x86>
  }

  while(IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO) != 0){
 80015de:	e00c      	b.n	80015fa <main+0xca>
	  int32_t test2 = IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 80015e0:	2101      	movs	r1, #1
 80015e2:	2000      	movs	r0, #0
 80015e4:	f008 fb1e 	bl	8009c24 <IKS01A3_MOTION_SENSOR_Init>
 80015e8:	60f8      	str	r0, [r7, #12]
	  printf("test2 : %ld \r  \n",test2);
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	4879      	ldr	r0, [pc, #484]	@ (80017d4 <main+0x2a4>)
 80015ee:	f00e f9dd 	bl	800f9ac <iprintf>
	  HAL_Delay(1000);
 80015f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015f6:	f008 ff5b 	bl	800a4b0 <HAL_Delay>
  while(IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO) != 0){
 80015fa:	2101      	movs	r1, #1
 80015fc:	2000      	movs	r0, #0
 80015fe:	f008 fb11 	bl	8009c24 <IKS01A3_MOTION_SENSOR_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1eb      	bne.n	80015e0 <main+0xb0>
  }

  while(IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO) != 0){
 8001608:	e00c      	b.n	8001624 <main+0xf4>
	  int32_t test3 = IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800160a:	2102      	movs	r1, #2
 800160c:	2000      	movs	r0, #0
 800160e:	f008 fb09 	bl	8009c24 <IKS01A3_MOTION_SENSOR_Init>
 8001612:	6138      	str	r0, [r7, #16]
	  printf("test3 : %ld \r  \n",test3);
 8001614:	6939      	ldr	r1, [r7, #16]
 8001616:	4870      	ldr	r0, [pc, #448]	@ (80017d8 <main+0x2a8>)
 8001618:	f00e f9c8 	bl	800f9ac <iprintf>
	  HAL_Delay(1000);
 800161c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001620:	f008 ff46 	bl	800a4b0 <HAL_Delay>
  while(IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO) != 0){
 8001624:	2102      	movs	r1, #2
 8001626:	2000      	movs	r0, #0
 8001628:	f008 fafc 	bl	8009c24 <IKS01A3_MOTION_SENSOR_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1eb      	bne.n	800160a <main+0xda>
   }

  IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8001632:	2202      	movs	r2, #2
 8001634:	2102      	movs	r1, #2
 8001636:	2000      	movs	r0, #0
 8001638:	f008 fc78 	bl	8009f2c <IKS01A3_MOTION_SENSOR_SetFullScale>
  IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 200.0);//vitesse de rafraichissement des données par seconde
 800163c:	4a67      	ldr	r2, [pc, #412]	@ (80017dc <main+0x2ac>)
 800163e:	2102      	movs	r1, #2
 8001640:	2000      	movs	r0, #0
 8001642:	f008 fc2f 	bl	8009ea4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>

  IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_GYRO, 1000); //d'après la doc qui dit qu'on va de -250 à 250
 8001646:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800164a:	2101      	movs	r1, #1
 800164c:	2000      	movs	r0, #0
 800164e:	f008 fc6d 	bl	8009f2c <IKS01A3_MOTION_SENSOR_SetFullScale>
  IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_GYRO, 200.0);
 8001652:	4a62      	ldr	r2, [pc, #392]	@ (80017dc <main+0x2ac>)
 8001654:	2101      	movs	r1, #1
 8001656:	2000      	movs	r0, #0
 8001658:	f008 fc24 	bl	8009ea4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>

  adcFunction();
 800165c:	f000 ff60 	bl	8002520 <adcFunction>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  while(ON_OFF_Projet(sortie) == 1 && adcFunction() >= 1000){
 8001660:	e136      	b.n	80018d0 <main+0x3a0>

		  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TempValue);
 8001662:	4a5f      	ldr	r2, [pc, #380]	@ (80017e0 <main+0x2b0>)
 8001664:	2101      	movs	r1, #1
 8001666:	2001      	movs	r0, #1
 8001668:	f008 f852 	bl	8009710 <IKS01A3_ENV_SENSOR_GetValue>
		  printf("	Temperature : %.2f \r\n",TempValue);
 800166c:	4b5c      	ldr	r3, [pc, #368]	@ (80017e0 <main+0x2b0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fef1 	bl	8000458 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	485a      	ldr	r0, [pc, #360]	@ (80017e4 <main+0x2b4>)
 800167c:	f00e f996 	bl	800f9ac <iprintf>

		  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PressValue);
 8001680:	4a59      	ldr	r2, [pc, #356]	@ (80017e8 <main+0x2b8>)
 8001682:	2102      	movs	r1, #2
 8001684:	2001      	movs	r0, #1
 8001686:	f008 f843 	bl	8009710 <IKS01A3_ENV_SENSOR_GetValue>
		  printf("	Pression : %d \r\n",(int)PressValue);
 800168a:	4b57      	ldr	r3, [pc, #348]	@ (80017e8 <main+0x2b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd56 	bl	8001140 <__aeabi_f2iz>
 8001694:	4603      	mov	r3, r0
 8001696:	4619      	mov	r1, r3
 8001698:	4854      	ldr	r0, [pc, #336]	@ (80017ec <main+0x2bc>)
 800169a:	f00e f987 	bl	800f9ac <iprintf>
		  sprintf(buffer, "%d\n",(int)PressValue);//on transforme notre entier en une chaîne de caractère (tableau) qu'on va venir découper
 800169e:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <main+0x2b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd4c 	bl	8001140 <__aeabi_f2iz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	4950      	ldr	r1, [pc, #320]	@ (80017f0 <main+0x2c0>)
 80016ae:	4851      	ldr	r0, [pc, #324]	@ (80017f4 <main+0x2c4>)
 80016b0:	f00e f9ec 	bl	800fa8c <siprintf>
		  affichage_pression();//affichage sur 7 segments
 80016b4:	f000 feb4 	bl	8002420 <affichage_pression>

		  alt = conversion_press_alt( PressValue,  TempValue);
 80016b8:	4b4b      	ldr	r3, [pc, #300]	@ (80017e8 <main+0x2b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a48      	ldr	r2, [pc, #288]	@ (80017e0 <main+0x2b0>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fe4c 	bl	8002360 <conversion_press_alt>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a4b      	ldr	r2, [pc, #300]	@ (80017f8 <main+0x2c8>)
 80016cc:	6013      	str	r3, [r2, #0]
		  printf("	Altitude par rapport au niveau de la mer: %.2f \r  \n",alt);//affichage de l'altitude
 80016ce:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <main+0x2c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fec0 	bl	8000458 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4847      	ldr	r0, [pc, #284]	@ (80017fc <main+0x2cc>)
 80016de:	f00e f965 	bl	800f9ac <iprintf>


		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, &Axes);
 80016e2:	4a47      	ldr	r2, [pc, #284]	@ (8001800 <main+0x2d0>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	2000      	movs	r0, #0
 80016e8:	f008 fb98 	bl	8009e1c <IKS01A3_MOTION_SENSOR_GetAxes>
		  int32_t X = Axes.x/1000;//conversion des valeurs de mdps en dps
 80016ec:	4b44      	ldr	r3, [pc, #272]	@ (8001800 <main+0x2d0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a44      	ldr	r2, [pc, #272]	@ (8001804 <main+0x2d4>)
 80016f2:	fb82 1203 	smull	r1, r2, r2, r3
 80016f6:	1192      	asrs	r2, r2, #6
 80016f8:	17db      	asrs	r3, r3, #31
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]
		  int32_t Y = Axes.y/1000;
 80016fe:	4b40      	ldr	r3, [pc, #256]	@ (8001800 <main+0x2d0>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a40      	ldr	r2, [pc, #256]	@ (8001804 <main+0x2d4>)
 8001704:	fb82 1203 	smull	r1, r2, r2, r3
 8001708:	1192      	asrs	r2, r2, #6
 800170a:	17db      	asrs	r3, r3, #31
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	61bb      	str	r3, [r7, #24]
		  int32_t Z = Axes.z/1000;
 8001710:	4b3b      	ldr	r3, [pc, #236]	@ (8001800 <main+0x2d0>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a3b      	ldr	r2, [pc, #236]	@ (8001804 <main+0x2d4>)
 8001716:	fb82 1203 	smull	r1, r2, r2, r3
 800171a:	1192      	asrs	r2, r2, #6
 800171c:	17db      	asrs	r3, r3, #31
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]

		  printf("	GYRO en x : %ld dps \r \n",X);
 8001722:	69f9      	ldr	r1, [r7, #28]
 8001724:	4838      	ldr	r0, [pc, #224]	@ (8001808 <main+0x2d8>)
 8001726:	f00e f941 	bl	800f9ac <iprintf>
		  printf("	GYRO en y  : %ld dps \r \n",Y);
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	4837      	ldr	r0, [pc, #220]	@ (800180c <main+0x2dc>)
 800172e:	f00e f93d 	bl	800f9ac <iprintf>
		  printf("	GYRO en z  : %ld  dps\r \n",Z);
 8001732:	6979      	ldr	r1, [r7, #20]
 8001734:	4836      	ldr	r0, [pc, #216]	@ (8001810 <main+0x2e0>)
 8001736:	f00e f939 	bl	800f9ac <iprintf>

		  //il faut que je calcule l'angle de rotation par rapport à la vitesse renvoyée par le gyro

		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &Axes2);
 800173a:	4a36      	ldr	r2, [pc, #216]	@ (8001814 <main+0x2e4>)
 800173c:	2102      	movs	r1, #2
 800173e:	2000      	movs	r0, #0
 8001740:	f008 fb6c 	bl	8009e1c <IKS01A3_MOTION_SENSOR_GetAxes>
		  printf("	ACCEL en x : %ld mg\r \n",Axes2.x);//conversion des valeurs de mg en g
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <main+0x2e4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	4833      	ldr	r0, [pc, #204]	@ (8001818 <main+0x2e8>)
 800174c:	f00e f92e 	bl	800f9ac <iprintf>
		  printf("	ACCEL en y  : %ld mg\r \n",Axes2.y);
 8001750:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <main+0x2e4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4619      	mov	r1, r3
 8001756:	4831      	ldr	r0, [pc, #196]	@ (800181c <main+0x2ec>)
 8001758:	f00e f928 	bl	800f9ac <iprintf>
		  printf("	ACCEL en z  : %ld mg\r \n",Axes2.z); //quand on est stable on doit avoir uniquement l'accélération de la pesanteur (1g = 9,8m^2/s)
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <main+0x2e4>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4619      	mov	r1, r3
 8001762:	482f      	ldr	r0, [pc, #188]	@ (8001820 <main+0x2f0>)
 8001764:	f00e f922 	bl	800f9ac <iprintf>

		  double angle = angle_plane(Axes2.x, Axes2.y, Axes2.z);
 8001768:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <main+0x2e4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a29      	ldr	r2, [pc, #164]	@ (8001814 <main+0x2e4>)
 800176e:	6851      	ldr	r1, [r2, #4]
 8001770:	4a28      	ldr	r2, [pc, #160]	@ (8001814 <main+0x2e4>)
 8001772:	6892      	ldr	r2, [r2, #8]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fe77 	bl	8002468 <angle_plane>
 800177a:	e9c7 0108 	strd	r0, r1, [r7, #32]

		  switchLedAll(angle);
 800177e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001782:	f000 fb69 	bl	8001e58 <switchLedAll>

		  if(angle>=80 || angle<=-80){
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <main+0x2f4>)
 800178c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001790:	f7ff f940 	bl	8000a14 <__aeabi_dcmpge>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10a      	bne.n	80017b0 <main+0x280>
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <main+0x2f8>)
 80017a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017a4:	f7ff f92c 	bl	8000a00 <__aeabi_dcmple>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8089 	beq.w	80018c2 <main+0x392>
			  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017b0:	2104      	movs	r1, #4
 80017b2:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <main+0x294>)
 80017b4:	f00c f9f4 	bl	800dba0 <HAL_TIM_PWM_Start>
			  TIM3->CCR1 = 316;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <main+0x2fc>)
 80017ba:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80017be:	635a      	str	r2, [r3, #52]	@ 0x34
			  while(angle>=80 || angle<=-80){
 80017c0:	e065      	b.n	800188e <main+0x35e>
 80017c2:	bf00      	nop
 80017c4:	20000478 	.word	0x20000478
 80017c8:	08014488 	.word	0x08014488
 80017cc:	08014498 	.word	0x08014498
 80017d0:	080144b4 	.word	0x080144b4
 80017d4:	080144c4 	.word	0x080144c4
 80017d8:	080144d8 	.word	0x080144d8
 80017dc:	43480000 	.word	0x43480000
 80017e0:	20000528 	.word	0x20000528
 80017e4:	080144ec 	.word	0x080144ec
 80017e8:	20000500 	.word	0x20000500
 80017ec:	08014504 	.word	0x08014504
 80017f0:	08014518 	.word	0x08014518
 80017f4:	2000051c 	.word	0x2000051c
 80017f8:	2000052c 	.word	0x2000052c
 80017fc:	0801451c 	.word	0x0801451c
 8001800:	20000504 	.word	0x20000504
 8001804:	10624dd3 	.word	0x10624dd3
 8001808:	08014554 	.word	0x08014554
 800180c:	08014570 	.word	0x08014570
 8001810:	0801458c 	.word	0x0801458c
 8001814:	20000510 	.word	0x20000510
 8001818:	080145a8 	.word	0x080145a8
 800181c:	080145c0 	.word	0x080145c0
 8001820:	080145dc 	.word	0x080145dc
 8001824:	40540000 	.word	0x40540000
 8001828:	c0540000 	.word	0xc0540000
 800182c:	40000400 	.word	0x40000400
				  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &Axes2);
 8001830:	4a3c      	ldr	r2, [pc, #240]	@ (8001924 <main+0x3f4>)
 8001832:	2102      	movs	r1, #2
 8001834:	2000      	movs	r0, #0
 8001836:	f008 faf1 	bl	8009e1c <IKS01A3_MOTION_SENSOR_GetAxes>
				  angle = angle_plane(Axes2.x, Axes2.y, Axes2.z);
 800183a:	4b3a      	ldr	r3, [pc, #232]	@ (8001924 <main+0x3f4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a39      	ldr	r2, [pc, #228]	@ (8001924 <main+0x3f4>)
 8001840:	6851      	ldr	r1, [r2, #4]
 8001842:	4a38      	ldr	r2, [pc, #224]	@ (8001924 <main+0x3f4>)
 8001844:	6892      	ldr	r2, [r2, #8]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fe0e 	bl	8002468 <angle_plane>
 800184c:	e9c7 0108 	strd	r0, r1, [r7, #32]
				  clignotement_leds();
 8001850:	f000 fd32 	bl	80022b8 <clignotement_leds>
				  HAL_Delay(50);
 8001854:	2032      	movs	r0, #50	@ 0x32
 8001856:	f008 fe2b 	bl	800a4b0 <HAL_Delay>
				  TIM3->CCR2 = 300;
 800185a:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <main+0x3f8>)
 800185c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001860:	639a      	str	r2, [r3, #56]	@ 0x38
				  HAL_Delay(50);
 8001862:	2032      	movs	r0, #50	@ 0x32
 8001864:	f008 fe24 	bl	800a4b0 <HAL_Delay>
				  TIM3->CCR2 = 290;
 8001868:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <main+0x3f8>)
 800186a:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800186e:	639a      	str	r2, [r3, #56]	@ 0x38
				  HAL_Delay(50);
 8001870:	2032      	movs	r0, #50	@ 0x32
 8001872:	f008 fe1d 	bl	800a4b0 <HAL_Delay>
				  TIM3->CCR2 = 250;
 8001876:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <main+0x3f8>)
 8001878:	22fa      	movs	r2, #250	@ 0xfa
 800187a:	639a      	str	r2, [r3, #56]	@ 0x38
				  HAL_Delay(50);
 800187c:	2032      	movs	r0, #50	@ 0x32
 800187e:	f008 fe17 	bl	800a4b0 <HAL_Delay>
				  TIM3->CCR2 = 200;
 8001882:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <main+0x3f8>)
 8001884:	22c8      	movs	r2, #200	@ 0xc8
 8001886:	639a      	str	r2, [r3, #56]	@ 0x38
				  HAL_Delay(50);
 8001888:	2032      	movs	r0, #50	@ 0x32
 800188a:	f008 fe11 	bl	800a4b0 <HAL_Delay>
			  while(angle>=80 || angle<=-80){
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	4b26      	ldr	r3, [pc, #152]	@ (800192c <main+0x3fc>)
 8001894:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001898:	f7ff f8bc 	bl	8000a14 <__aeabi_dcmpge>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1c6      	bne.n	8001830 <main+0x300>
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <main+0x400>)
 80018a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018ac:	f7ff f8a8 	bl	8000a00 <__aeabi_dcmple>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1bc      	bne.n	8001830 <main+0x300>
			  }
			  extinction_leds();
 80018b6:	f000 fccb 	bl	8002250 <extinction_leds>
			  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80018ba:	2104      	movs	r1, #4
 80018bc:	481d      	ldr	r0, [pc, #116]	@ (8001934 <main+0x404>)
 80018be:	f00c fa05 	bl	800dccc <HAL_TIM_PWM_Stop>
		 }

		  HAL_Delay(500); //on attend une seconde avant de prendre en compte le nouvel angle
 80018c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018c6:	f008 fdf3 	bl	800a4b0 <HAL_Delay>

		  printf("\r \n");
 80018ca:	481b      	ldr	r0, [pc, #108]	@ (8001938 <main+0x408>)
 80018cc:	f00e f8d6 	bl	800fa7c <puts>
	  while(ON_OFF_Projet(sortie) == 1 && adcFunction() >= 1000){
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <main+0x40c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fe19 	bl	800250c <ON_OFF_Projet>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d106      	bne.n	80018ee <main+0x3be>
 80018e0:	f000 fe1e 	bl	8002520 <adcFunction>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018ea:	f4bf aeba 	bcs.w	8001662 <main+0x132>

	  }

  if(ON_OFF_Projet(sortie) == 0 && adcFunction()<1000){
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <main+0x40c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fe0a 	bl	800250c <ON_OFF_Projet>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1e8      	bne.n	80018d0 <main+0x3a0>
 80018fe:	f000 fe0f 	bl	8002520 <adcFunction>
 8001902:	4603      	mov	r3, r0
 8001904:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001908:	d2e2      	bcs.n	80018d0 <main+0x3a0>
	  extinction_leds();
 800190a:	f000 fca1 	bl	8002250 <extinction_leds>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800190e:	2100      	movs	r1, #0
 8001910:	4808      	ldr	r0, [pc, #32]	@ (8001934 <main+0x404>)
 8001912:	f00c f9db 	bl	800dccc <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001916:	2104      	movs	r1, #4
 8001918:	4806      	ldr	r0, [pc, #24]	@ (8001934 <main+0x404>)
 800191a:	f00c f9d7 	bl	800dccc <HAL_TIM_PWM_Stop>
	  MAX7219_Clear();
 800191e:	f00d f898 	bl	800ea52 <MAX7219_Clear>
	  while(ON_OFF_Projet(sortie) == 1 && adcFunction() >= 1000){
 8001922:	e7d5      	b.n	80018d0 <main+0x3a0>
 8001924:	20000510 	.word	0x20000510
 8001928:	40000400 	.word	0x40000400
 800192c:	40540000 	.word	0x40540000
 8001930:	c0540000 	.word	0xc0540000
 8001934:	20000478 	.word	0x20000478
 8001938:	080145f8 	.word	0x080145f8
 800193c:	20000530 	.word	0x20000530

08001940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b092      	sub	sp, #72	@ 0x48
 8001944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	2234      	movs	r2, #52	@ 0x34
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f00e f994 	bl	800fc7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001954:	463b      	mov	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001962:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <SystemClock_Config+0x98>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800196a:	4a1b      	ldr	r2, [pc, #108]	@ (80019d8 <SystemClock_Config+0x98>)
 800196c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001970:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001972:	2302      	movs	r3, #2
 8001974:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001976:	2301      	movs	r3, #1
 8001978:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197a:	2310      	movs	r3, #16
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197e:	2302      	movs	r3, #2
 8001980:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001982:	2300      	movs	r3, #0
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001986:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800198c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001990:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4618      	mov	r0, r3
 8001998:	f00a ffee 	bl	800c978 <HAL_RCC_OscConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019a2:	f000 fe21 	bl	80025e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a6:	230f      	movs	r3, #15
 80019a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019aa:	2303      	movs	r3, #3
 80019ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019ba:	463b      	mov	r3, r7
 80019bc:	2101      	movs	r1, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f00b fb0a 	bl	800cfd8 <HAL_RCC_ClockConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80019ca:	f000 fe0d 	bl	80025e8 <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3748      	adds	r7, #72	@ 0x48
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000

080019dc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80019fe:	4b31      	ldr	r3, [pc, #196]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a00:	4a31      	ldr	r2, [pc, #196]	@ (8001ac8 <MX_ADC_Init+0xec>)
 8001a02:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a16:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001a22:	4b28      	ldr	r3, [pc, #160]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001a28:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001a34:	4b23      	ldr	r3, [pc, #140]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001a3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001a42:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001a5e:	4819      	ldr	r0, [pc, #100]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a60:	f008 fd48 	bl	800a4f4 <HAL_ADC_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8001a6a:	f000 fdbd 	bl	80025e8 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <MX_ADC_Init+0xf0>)
 8001a70:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	763b      	strb	r3, [r7, #24]
  AnalogWDGConfig.HighThreshold = 2000;
 8001a7a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a7e:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480e      	ldr	r0, [pc, #56]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001a8c:	f009 fa28 	bl	800aee0 <HAL_ADC_AnalogWDGConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001a96:	f000 fda7 	bl	80025e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	@ (8001ac4 <MX_ADC_Init+0xe8>)
 8001aac:	f009 f8ac 	bl	800ac08 <HAL_ADC_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_ADC_Init+0xde>
  {
    Error_Handler();
 8001ab6:	f000 fd97 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	@ 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000038c 	.word	0x2000038c
 8001ac8:	40012400 	.word	0x40012400
 8001acc:	00800200 	.word	0x00800200

08001ad0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001ad6:	4a18      	ldr	r2, [pc, #96]	@ (8001b38 <MX_SPI1_Init+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ada:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001adc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001b1c:	220a      	movs	r2, #10
 8001b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <MX_SPI1_Init+0x64>)
 8001b22:	f00b fd1f 	bl	800d564 <HAL_SPI_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b2c:	f000 fd5c 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200003e0 	.word	0x200003e0
 8001b38:	40013000 	.word	0x40013000

08001b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <MX_TIM2_Init+0x94>)
 8001b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <MX_TIM2_Init+0x94>)
 8001b62:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <MX_TIM2_Init+0x94>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <MX_TIM2_Init+0x94>)
 8001b70:	22c8      	movs	r2, #200	@ 0xc8
 8001b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <MX_TIM2_Init+0x94>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <MX_TIM2_Init+0x94>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b80:	4813      	ldr	r0, [pc, #76]	@ (8001bd0 <MX_TIM2_Init+0x94>)
 8001b82:	f00b ff85 	bl	800da90 <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b8c:	f000 fd2c 	bl	80025e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <MX_TIM2_Init+0x94>)
 8001b9e:	f00c f995 	bl	800decc <HAL_TIM_ConfigClockSource>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ba8:	f000 fd1e 	bl	80025e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <MX_TIM2_Init+0x94>)
 8001bba:	f00c fc6f 	bl	800e49c <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bc4:	f000 fd10 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000438 	.word	0x20000438

08001bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	@ 0x28
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0318 	add.w	r3, r7, #24
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c00:	4a34      	ldr	r2, [pc, #208]	@ (8001cd4 <MX_TIM3_Init+0x100>)
 8001c02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001c04:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c06:	221f      	movs	r2, #31
 8001c08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0a:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 316;
 8001c10:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c12:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8001c16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c24:	482a      	ldr	r0, [pc, #168]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c26:	f00b ff33 	bl	800da90 <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001c30:	f000 fcda 	bl	80025e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c3a:	f107 0318 	add.w	r3, r7, #24
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4823      	ldr	r0, [pc, #140]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c42:	f00c f943 	bl	800decc <HAL_TIM_ConfigClockSource>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c4c:	f000 fccc 	bl	80025e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c50:	481f      	ldr	r0, [pc, #124]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c52:	f00b ff5c 	bl	800db0e <HAL_TIM_PWM_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f000 fcc4 	bl	80025e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4818      	ldr	r0, [pc, #96]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c70:	f00c fc14 	bl	800e49c <HAL_TIMEx_MasterConfigSynchronization>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001c7a:	f000 fcb5 	bl	80025e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7e:	2360      	movs	r3, #96	@ 0x60
 8001c80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 158;
 8001c82:	239e      	movs	r3, #158	@ 0x9e
 8001c84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	2200      	movs	r2, #0
 8001c92:	4619      	mov	r1, r3
 8001c94:	480e      	ldr	r0, [pc, #56]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001c96:	f00c f857 	bl	800dd48 <HAL_TIM_PWM_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001ca0:	f000 fca2 	bl	80025e8 <Error_Handler>
  }
  sConfigOC.Pulse = 316;
 8001ca4:	f44f 739e 	mov.w	r3, #316	@ 0x13c
 8001ca8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	2204      	movs	r2, #4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4807      	ldr	r0, [pc, #28]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001cb2:	f00c f849 	bl	800dd48 <HAL_TIM_PWM_ConfigChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001cbc:	f000 fc94 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cc0:	4803      	ldr	r0, [pc, #12]	@ (8001cd0 <MX_TIM3_Init+0xfc>)
 8001cc2:	f000 fd83 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	@ 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000478 	.word	0x20000478
 8001cd4:	40000400 	.word	0x40000400

08001cd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	@ (8001d28 <MX_USART2_UART_Init+0x50>)
 8001ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cfe:	220c      	movs	r2, #12
 8001d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001d10:	f00c fc22 	bl	800e558 <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d1a:	f000 fc65 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200004b8 	.word	0x200004b8
 8001d28:	40004400 	.word	0x40004400

08001d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	4b41      	ldr	r3, [pc, #260]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a40      	ldr	r2, [pc, #256]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	61d3      	str	r3, [r2, #28]
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b35      	ldr	r3, [pc, #212]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a34      	ldr	r2, [pc, #208]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	61d3      	str	r3, [r2, #28]
 8001d7e:	4b32      	ldr	r3, [pc, #200]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b2c      	ldr	r3, [pc, #176]	@ (8001e48 <MX_GPIO_Init+0x11c>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|L3_Pin
 8001da2:	2200      	movs	r2, #0
 8001da4:	f64f 4106 	movw	r1, #64518	@ 0xfc06
 8001da8:	4828      	ldr	r0, [pc, #160]	@ (8001e4c <MX_GPIO_Init+0x120>)
 8001daa:	f009 fd29 	bl	800b800 <HAL_GPIO_WritePin>
                          |L4_Pin|L5_Pin|L6_Pin|L7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001db4:	4826      	ldr	r0, [pc, #152]	@ (8001e50 <MX_GPIO_Init+0x124>)
 8001db6:	f009 fd23 	bl	800b800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4820      	ldr	r0, [pc, #128]	@ (8001e54 <MX_GPIO_Init+0x128>)
 8001dd2:	f009 fa95 	bl	800b300 <HAL_GPIO_Init>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin
                           L4_Pin L5_Pin L6_Pin L7_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin
 8001dd6:	f64f 4306 	movw	r3, #64518	@ 0xfc06
 8001dda:	617b      	str	r3, [r7, #20]
                          |L4_Pin|L5_Pin|L6_Pin|L7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	4817      	ldr	r0, [pc, #92]	@ (8001e4c <MX_GPIO_Init+0x120>)
 8001df0:	f009 fa86 	bl	800b300 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001df4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4810      	ldr	r0, [pc, #64]	@ (8001e50 <MX_GPIO_Init+0x124>)
 8001e0e:	f009 fa77 	bl	800b300 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP1_Pin BP2_Pin */
  GPIO_InitStruct.Pin = BP1_Pin|BP2_Pin;
 8001e12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4809      	ldr	r0, [pc, #36]	@ (8001e50 <MX_GPIO_Init+0x124>)
 8001e2a:	f009 fa69 	bl	800b300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	2028      	movs	r0, #40	@ 0x28
 8001e34:	f009 fa2d 	bl	800b292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e38:	2028      	movs	r0, #40	@ 0x28
 8001e3a:	f009 fa46 	bl	800b2ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	@ 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020800 	.word	0x40020800

08001e58 <switchLedAll>:

/* USER CODE BEGIN 4 */

void switchLedAll(double angle){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	e9c7 0100 	strd	r0, r1, [r7]
	if(angle<10 && angle>-10){
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	4bb4      	ldr	r3, [pc, #720]	@ (8002138 <switchLedAll+0x2e0>)
 8001e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e6c:	f7fe fdbe 	bl	80009ec <__aeabi_dcmplt>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <switchLedAll+0x36>
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	4bb0      	ldr	r3, [pc, #704]	@ (800213c <switchLedAll+0x2e4>)
 8001e7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e80:	f7fe fdd2 	bl	8000a28 <__aeabi_dcmpgt>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <switchLedAll+0x36>
		extinction_leds();
 8001e8a:	f000 f9e1 	bl	8002250 <extinction_leds>
	}
	if((10<angle && angle<20) || (-10>angle && angle>-20)){
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4ba9      	ldr	r3, [pc, #676]	@ (8002138 <switchLedAll+0x2e0>)
 8001e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e98:	f7fe fdc6 	bl	8000a28 <__aeabi_dcmpgt>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <switchLedAll+0x5e>
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4ba6      	ldr	r3, [pc, #664]	@ (8002140 <switchLedAll+0x2e8>)
 8001ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eac:	f7fe fd9e 	bl	80009ec <__aeabi_dcmplt>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d113      	bne.n	8001ede <switchLedAll+0x86>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4ba0      	ldr	r3, [pc, #640]	@ (800213c <switchLedAll+0x2e4>)
 8001ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ec0:	f7fe fd94 	bl	80009ec <__aeabi_dcmplt>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d010      	beq.n	8001eec <switchLedAll+0x94>
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b9d      	ldr	r3, [pc, #628]	@ (8002144 <switchLedAll+0x2ec>)
 8001ed0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ed4:	f7fe fda8 	bl	8000a28 <__aeabi_dcmpgt>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <switchLedAll+0x94>
		extinction_leds();
 8001ede:	f000 f9b7 	bl	8002250 <extinction_leds>
		HAL_GPIO_TogglePin(L7_GPIO_Port, L7_Pin);
 8001ee2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ee6:	4898      	ldr	r0, [pc, #608]	@ (8002148 <switchLedAll+0x2f0>)
 8001ee8:	f009 fca2 	bl	800b830 <HAL_GPIO_TogglePin>
	}
	if((20<angle && angle<30) || (-20>angle && angle>-30)){
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b93      	ldr	r3, [pc, #588]	@ (8002140 <switchLedAll+0x2e8>)
 8001ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ef6:	f7fe fd97 	bl	8000a28 <__aeabi_dcmpgt>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <switchLedAll+0xbc>
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b91      	ldr	r3, [pc, #580]	@ (800214c <switchLedAll+0x2f4>)
 8001f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f0a:	f7fe fd6f 	bl	80009ec <__aeabi_dcmplt>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d113      	bne.n	8001f3c <switchLedAll+0xe4>
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	4b8a      	ldr	r3, [pc, #552]	@ (8002144 <switchLedAll+0x2ec>)
 8001f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f1e:	f7fe fd65 	bl	80009ec <__aeabi_dcmplt>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d015      	beq.n	8001f54 <switchLedAll+0xfc>
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b88      	ldr	r3, [pc, #544]	@ (8002150 <switchLedAll+0x2f8>)
 8001f2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f32:	f7fe fd79 	bl	8000a28 <__aeabi_dcmpgt>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <switchLedAll+0xfc>
		extinction_leds();
 8001f3c:	f000 f988 	bl	8002250 <extinction_leds>
		HAL_GPIO_TogglePin(L7_GPIO_Port, L7_Pin);
 8001f40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f44:	4880      	ldr	r0, [pc, #512]	@ (8002148 <switchLedAll+0x2f0>)
 8001f46:	f009 fc73 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L6_GPIO_Port, L6_Pin);
 8001f4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f4e:	487e      	ldr	r0, [pc, #504]	@ (8002148 <switchLedAll+0x2f0>)
 8001f50:	f009 fc6e 	bl	800b830 <HAL_GPIO_TogglePin>
	}
	if((30<angle && angle<40) || (-30>angle && angle>-40)){
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	4b7c      	ldr	r3, [pc, #496]	@ (800214c <switchLedAll+0x2f4>)
 8001f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f5e:	f7fe fd63 	bl	8000a28 <__aeabi_dcmpgt>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <switchLedAll+0x124>
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b79      	ldr	r3, [pc, #484]	@ (8002154 <switchLedAll+0x2fc>)
 8001f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f72:	f7fe fd3b 	bl	80009ec <__aeabi_dcmplt>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d113      	bne.n	8001fa4 <switchLedAll+0x14c>
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	4b73      	ldr	r3, [pc, #460]	@ (8002150 <switchLedAll+0x2f8>)
 8001f82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f86:	f7fe fd31 	bl	80009ec <__aeabi_dcmplt>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01a      	beq.n	8001fc6 <switchLedAll+0x16e>
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b70      	ldr	r3, [pc, #448]	@ (8002158 <switchLedAll+0x300>)
 8001f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f9a:	f7fe fd45 	bl	8000a28 <__aeabi_dcmpgt>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d010      	beq.n	8001fc6 <switchLedAll+0x16e>
		extinction_leds();
 8001fa4:	f000 f954 	bl	8002250 <extinction_leds>
		HAL_GPIO_TogglePin(L7_GPIO_Port, L7_Pin);
 8001fa8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fac:	4866      	ldr	r0, [pc, #408]	@ (8002148 <switchLedAll+0x2f0>)
 8001fae:	f009 fc3f 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L6_GPIO_Port, L6_Pin);
 8001fb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fb6:	4864      	ldr	r0, [pc, #400]	@ (8002148 <switchLedAll+0x2f0>)
 8001fb8:	f009 fc3a 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L5_GPIO_Port, L5_Pin);
 8001fbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fc0:	4861      	ldr	r0, [pc, #388]	@ (8002148 <switchLedAll+0x2f0>)
 8001fc2:	f009 fc35 	bl	800b830 <HAL_GPIO_TogglePin>

	}
	if((40<angle && angle<50) || (-40>angle && angle>-50)){
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b62      	ldr	r3, [pc, #392]	@ (8002154 <switchLedAll+0x2fc>)
 8001fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fd0:	f7fe fd2a 	bl	8000a28 <__aeabi_dcmpgt>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <switchLedAll+0x196>
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	4b5f      	ldr	r3, [pc, #380]	@ (800215c <switchLedAll+0x304>)
 8001fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fe4:	f7fe fd02 	bl	80009ec <__aeabi_dcmplt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d113      	bne.n	8002016 <switchLedAll+0x1be>
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b59      	ldr	r3, [pc, #356]	@ (8002158 <switchLedAll+0x300>)
 8001ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ff8:	f7fe fcf8 	bl	80009ec <__aeabi_dcmplt>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01f      	beq.n	8002042 <switchLedAll+0x1ea>
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	4b56      	ldr	r3, [pc, #344]	@ (8002160 <switchLedAll+0x308>)
 8002008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800200c:	f7fe fd0c 	bl	8000a28 <__aeabi_dcmpgt>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d015      	beq.n	8002042 <switchLedAll+0x1ea>
		extinction_leds();
 8002016:	f000 f91b 	bl	8002250 <extinction_leds>
		HAL_GPIO_TogglePin(L7_GPIO_Port, L7_Pin);
 800201a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800201e:	484a      	ldr	r0, [pc, #296]	@ (8002148 <switchLedAll+0x2f0>)
 8002020:	f009 fc06 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L6_GPIO_Port, L6_Pin);
 8002024:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002028:	4847      	ldr	r0, [pc, #284]	@ (8002148 <switchLedAll+0x2f0>)
 800202a:	f009 fc01 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L5_GPIO_Port, L5_Pin);
 800202e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002032:	4845      	ldr	r0, [pc, #276]	@ (8002148 <switchLedAll+0x2f0>)
 8002034:	f009 fbfc 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L4_GPIO_Port, L4_Pin);
 8002038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800203c:	4842      	ldr	r0, [pc, #264]	@ (8002148 <switchLedAll+0x2f0>)
 800203e:	f009 fbf7 	bl	800b830 <HAL_GPIO_TogglePin>
	}
	if((50<angle && angle<60) || (-50>angle && angle>-60)){
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b45      	ldr	r3, [pc, #276]	@ (800215c <switchLedAll+0x304>)
 8002048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800204c:	f7fe fcec 	bl	8000a28 <__aeabi_dcmpgt>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <switchLedAll+0x212>
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	4b42      	ldr	r3, [pc, #264]	@ (8002164 <switchLedAll+0x30c>)
 800205c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002060:	f7fe fcc4 	bl	80009ec <__aeabi_dcmplt>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d113      	bne.n	8002092 <switchLedAll+0x23a>
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b3c      	ldr	r3, [pc, #240]	@ (8002160 <switchLedAll+0x308>)
 8002070:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002074:	f7fe fcba 	bl	80009ec <__aeabi_dcmplt>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d024      	beq.n	80020c8 <switchLedAll+0x270>
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <switchLedAll+0x310>)
 8002084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002088:	f7fe fcce 	bl	8000a28 <__aeabi_dcmpgt>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01a      	beq.n	80020c8 <switchLedAll+0x270>
		extinction_leds();
 8002092:	f000 f8dd 	bl	8002250 <extinction_leds>
		HAL_GPIO_TogglePin(L7_GPIO_Port, L7_Pin);
 8002096:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800209a:	482b      	ldr	r0, [pc, #172]	@ (8002148 <switchLedAll+0x2f0>)
 800209c:	f009 fbc8 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L6_GPIO_Port, L6_Pin);
 80020a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020a4:	4828      	ldr	r0, [pc, #160]	@ (8002148 <switchLedAll+0x2f0>)
 80020a6:	f009 fbc3 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L5_GPIO_Port, L5_Pin);
 80020aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020ae:	4826      	ldr	r0, [pc, #152]	@ (8002148 <switchLedAll+0x2f0>)
 80020b0:	f009 fbbe 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L4_GPIO_Port, L4_Pin);
 80020b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020b8:	4823      	ldr	r0, [pc, #140]	@ (8002148 <switchLedAll+0x2f0>)
 80020ba:	f009 fbb9 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L3_GPIO_Port, L3_Pin);
 80020be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020c2:	4821      	ldr	r0, [pc, #132]	@ (8002148 <switchLedAll+0x2f0>)
 80020c4:	f009 fbb4 	bl	800b830 <HAL_GPIO_TogglePin>
	}
	if((60<angle && angle<70) || (-60>angle && angle>-70)){
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	4b25      	ldr	r3, [pc, #148]	@ (8002164 <switchLedAll+0x30c>)
 80020ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020d2:	f7fe fca9 	bl	8000a28 <__aeabi_dcmpgt>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <switchLedAll+0x298>
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <switchLedAll+0x314>)
 80020e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020e6:	f7fe fc81 	bl	80009ec <__aeabi_dcmplt>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d113      	bne.n	8002118 <switchLedAll+0x2c0>
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <switchLedAll+0x310>)
 80020f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020fa:	f7fe fc77 	bl	80009ec <__aeabi_dcmplt>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d049      	beq.n	8002198 <switchLedAll+0x340>
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <switchLedAll+0x318>)
 800210a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800210e:	f7fe fc8b 	bl	8000a28 <__aeabi_dcmpgt>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d03f      	beq.n	8002198 <switchLedAll+0x340>
		extinction_leds();
 8002118:	f000 f89a 	bl	8002250 <extinction_leds>
		HAL_GPIO_TogglePin(L7_GPIO_Port, L7_Pin);
 800211c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002120:	4809      	ldr	r0, [pc, #36]	@ (8002148 <switchLedAll+0x2f0>)
 8002122:	f009 fb85 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L6_GPIO_Port, L6_Pin);
 8002126:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800212a:	4807      	ldr	r0, [pc, #28]	@ (8002148 <switchLedAll+0x2f0>)
 800212c:	f009 fb80 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L5_GPIO_Port, L5_Pin);
 8002130:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002134:	e01e      	b.n	8002174 <switchLedAll+0x31c>
 8002136:	bf00      	nop
 8002138:	40240000 	.word	0x40240000
 800213c:	c0240000 	.word	0xc0240000
 8002140:	40340000 	.word	0x40340000
 8002144:	c0340000 	.word	0xc0340000
 8002148:	40020400 	.word	0x40020400
 800214c:	403e0000 	.word	0x403e0000
 8002150:	c03e0000 	.word	0xc03e0000
 8002154:	40440000 	.word	0x40440000
 8002158:	c0440000 	.word	0xc0440000
 800215c:	40490000 	.word	0x40490000
 8002160:	c0490000 	.word	0xc0490000
 8002164:	404e0000 	.word	0x404e0000
 8002168:	c04e0000 	.word	0xc04e0000
 800216c:	40518000 	.word	0x40518000
 8002170:	c0518000 	.word	0xc0518000
 8002174:	4831      	ldr	r0, [pc, #196]	@ (800223c <switchLedAll+0x3e4>)
 8002176:	f009 fb5b 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L4_GPIO_Port, L4_Pin);
 800217a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800217e:	482f      	ldr	r0, [pc, #188]	@ (800223c <switchLedAll+0x3e4>)
 8002180:	f009 fb56 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L3_GPIO_Port, L3_Pin);
 8002184:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002188:	482c      	ldr	r0, [pc, #176]	@ (800223c <switchLedAll+0x3e4>)
 800218a:	f009 fb51 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L2_GPIO_Port, L2_Pin);
 800218e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002192:	482a      	ldr	r0, [pc, #168]	@ (800223c <switchLedAll+0x3e4>)
 8002194:	f009 fb4c 	bl	800b830 <HAL_GPIO_TogglePin>
	}
	if((70<angle && angle<80) || (-70>angle && angle>-80)){
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b28      	ldr	r3, [pc, #160]	@ (8002240 <switchLedAll+0x3e8>)
 800219e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021a2:	f7fe fc41 	bl	8000a28 <__aeabi_dcmpgt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <switchLedAll+0x368>
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <switchLedAll+0x3ec>)
 80021b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021b6:	f7fe fc19 	bl	80009ec <__aeabi_dcmplt>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d115      	bne.n	80021ec <switchLedAll+0x394>
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <switchLedAll+0x3f0>)
 80021c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021ca:	f7fe fc0f 	bl	80009ec <__aeabi_dcmplt>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d100      	bne.n	80021d6 <switchLedAll+0x37e>
		HAL_GPIO_TogglePin(L3_GPIO_Port, L3_Pin);
		HAL_GPIO_TogglePin(L2_GPIO_Port, L2_Pin);
		HAL_GPIO_TogglePin(L1_GPIO_Port, L1_Pin);
	}

}
 80021d4:	e02e      	b.n	8002234 <switchLedAll+0x3dc>
	if((70<angle && angle<80) || (-70>angle && angle>-80)){
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <switchLedAll+0x3f4>)
 80021dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021e0:	f7fe fc22 	bl	8000a28 <__aeabi_dcmpgt>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d100      	bne.n	80021ec <switchLedAll+0x394>
}
 80021ea:	e023      	b.n	8002234 <switchLedAll+0x3dc>
		extinction_leds();
 80021ec:	f000 f830 	bl	8002250 <extinction_leds>
		HAL_GPIO_TogglePin(L7_GPIO_Port, L7_Pin);
 80021f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021f4:	4811      	ldr	r0, [pc, #68]	@ (800223c <switchLedAll+0x3e4>)
 80021f6:	f009 fb1b 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L6_GPIO_Port, L6_Pin);
 80021fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021fe:	480f      	ldr	r0, [pc, #60]	@ (800223c <switchLedAll+0x3e4>)
 8002200:	f009 fb16 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L5_GPIO_Port, L5_Pin);
 8002204:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002208:	480c      	ldr	r0, [pc, #48]	@ (800223c <switchLedAll+0x3e4>)
 800220a:	f009 fb11 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L4_GPIO_Port, L4_Pin);
 800220e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002212:	480a      	ldr	r0, [pc, #40]	@ (800223c <switchLedAll+0x3e4>)
 8002214:	f009 fb0c 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L3_GPIO_Port, L3_Pin);
 8002218:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800221c:	4807      	ldr	r0, [pc, #28]	@ (800223c <switchLedAll+0x3e4>)
 800221e:	f009 fb07 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L2_GPIO_Port, L2_Pin);
 8002222:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002226:	4805      	ldr	r0, [pc, #20]	@ (800223c <switchLedAll+0x3e4>)
 8002228:	f009 fb02 	bl	800b830 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(L1_GPIO_Port, L1_Pin);
 800222c:	2104      	movs	r1, #4
 800222e:	4803      	ldr	r0, [pc, #12]	@ (800223c <switchLedAll+0x3e4>)
 8002230:	f009 fafe 	bl	800b830 <HAL_GPIO_TogglePin>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40020400 	.word	0x40020400
 8002240:	40518000 	.word	0x40518000
 8002244:	40540000 	.word	0x40540000
 8002248:	c0518000 	.word	0xc0518000
 800224c:	c0540000 	.word	0xc0540000

08002250 <extinction_leds>:

void extinction_leds(void){
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L7_GPIO_Port, L7_Pin, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800225a:	4816      	ldr	r0, [pc, #88]	@ (80022b4 <extinction_leds+0x64>)
 800225c:	f009 fad0 	bl	800b800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L6_GPIO_Port, L6_Pin, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002266:	4813      	ldr	r0, [pc, #76]	@ (80022b4 <extinction_leds+0x64>)
 8002268:	f009 faca 	bl	800b800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L5_GPIO_Port, L5_Pin, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002272:	4810      	ldr	r0, [pc, #64]	@ (80022b4 <extinction_leds+0x64>)
 8002274:	f009 fac4 	bl	800b800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800227e:	480d      	ldr	r0, [pc, #52]	@ (80022b4 <extinction_leds+0x64>)
 8002280:	f009 fabe 	bl	800b800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, 0);
 8002284:	2200      	movs	r2, #0
 8002286:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800228a:	480a      	ldr	r0, [pc, #40]	@ (80022b4 <extinction_leds+0x64>)
 800228c:	f009 fab8 	bl	800b800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002296:	4807      	ldr	r0, [pc, #28]	@ (80022b4 <extinction_leds+0x64>)
 8002298:	f009 fab2 	bl	800b800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2104      	movs	r1, #4
 80022a0:	4804      	ldr	r0, [pc, #16]	@ (80022b4 <extinction_leds+0x64>)
 80022a2:	f009 faad 	bl	800b800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2102      	movs	r1, #2
 80022aa:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <extinction_leds+0x64>)
 80022ac:	f009 faa8 	bl	800b800 <HAL_GPIO_WritePin>
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40020400 	.word	0x40020400

080022b8 <clignotement_leds>:

void clignotement_leds(void){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0

	int i;

	extinction_leds();
 80022be:	f7ff ffc7 	bl	8002250 <extinction_leds>

	for(i=0;i<5;i++){
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	e02b      	b.n	8002320 <clignotement_leds+0x68>
	HAL_GPIO_TogglePin(L7_GPIO_Port, L7_Pin);
 80022c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022cc:	4818      	ldr	r0, [pc, #96]	@ (8002330 <clignotement_leds+0x78>)
 80022ce:	f009 faaf 	bl	800b830 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(L6_GPIO_Port, L6_Pin);
 80022d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022d6:	4816      	ldr	r0, [pc, #88]	@ (8002330 <clignotement_leds+0x78>)
 80022d8:	f009 faaa 	bl	800b830 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(L5_GPIO_Port, L5_Pin);
 80022dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022e0:	4813      	ldr	r0, [pc, #76]	@ (8002330 <clignotement_leds+0x78>)
 80022e2:	f009 faa5 	bl	800b830 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(L4_GPIO_Port, L4_Pin);
 80022e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022ea:	4811      	ldr	r0, [pc, #68]	@ (8002330 <clignotement_leds+0x78>)
 80022ec:	f009 faa0 	bl	800b830 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(L3_GPIO_Port, L3_Pin);
 80022f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022f4:	480e      	ldr	r0, [pc, #56]	@ (8002330 <clignotement_leds+0x78>)
 80022f6:	f009 fa9b 	bl	800b830 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(L2_GPIO_Port, L2_Pin);
 80022fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022fe:	480c      	ldr	r0, [pc, #48]	@ (8002330 <clignotement_leds+0x78>)
 8002300:	f009 fa96 	bl	800b830 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(L1_GPIO_Port, L1_Pin);
 8002304:	2104      	movs	r1, #4
 8002306:	480a      	ldr	r0, [pc, #40]	@ (8002330 <clignotement_leds+0x78>)
 8002308:	f009 fa92 	bl	800b830 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(L0_GPIO_Port, L0_Pin);
 800230c:	2102      	movs	r1, #2
 800230e:	4808      	ldr	r0, [pc, #32]	@ (8002330 <clignotement_leds+0x78>)
 8002310:	f009 fa8e 	bl	800b830 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 8002314:	2032      	movs	r0, #50	@ 0x32
 8002316:	f008 f8cb 	bl	800a4b0 <HAL_Delay>
	for(i=0;i<5;i++){
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3301      	adds	r3, #1
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b04      	cmp	r3, #4
 8002324:	ddd0      	ble.n	80022c8 <clignotement_leds+0x10>
	}
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40020400 	.word	0x40020400

08002334 <__io_putchar>:

int __io_putchar(int ch)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF); //printf sur Termite le terminal application
 800233c:	1d39      	adds	r1, r7, #4
 800233e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002342:	2201      	movs	r2, #1
 8002344:	4805      	ldr	r0, [pc, #20]	@ (800235c <__io_putchar+0x28>)
 8002346:	f00c f957 	bl	800e5f8 <HAL_UART_Transmit>
	ITM_SendChar(ch);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff f8c9 	bl	80014e4 <ITM_SendChar>
	return(ch);
 8002352:	687b      	ldr	r3, [r7, #4]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	200004b8 	.word	0x200004b8

08002360 <conversion_press_alt>:

float conversion_press_alt(float PressValue, float TempValue){
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]

	float T = TempValue;//température à voir pour la mesurer
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	60fb      	str	r3, [r7, #12]

	float alt = ((pow((PressValue/1013),(1/5.257)) - 1)*(0.01*T + 273.15))/(0.0065); //altitude par rapport au niveau de la mer
 800236e:	492a      	ldr	r1, [pc, #168]	@ (8002418 <conversion_press_alt+0xb8>)
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7fe fdd3 	bl	8000f1c <__aeabi_fdiv>
 8002376:	4603      	mov	r3, r0
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f86d 	bl	8000458 <__aeabi_f2d>
 800237e:	a31e      	add	r3, pc, #120	@ (adr r3, 80023f8 <conversion_press_alt+0x98>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	f010 ffb0 	bl	80132e8 <pow>
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b23      	ldr	r3, [pc, #140]	@ (800241c <conversion_press_alt+0xbc>)
 800238e:	f7fd ff03 	bl	8000198 <__aeabi_dsub>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4614      	mov	r4, r2
 8002398:	461d      	mov	r5, r3
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7fe f85c 	bl	8000458 <__aeabi_f2d>
 80023a0:	a317      	add	r3, pc, #92	@ (adr r3, 8002400 <conversion_press_alt+0xa0>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	f7fe f8af 	bl	8000508 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	a315      	add	r3, pc, #84	@ (adr r3, 8002408 <conversion_press_alt+0xa8>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fd fef0 	bl	800019c <__adddf3>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4620      	mov	r0, r4
 80023c2:	4629      	mov	r1, r5
 80023c4:	f7fe f8a0 	bl	8000508 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	a30f      	add	r3, pc, #60	@ (adr r3, 8002410 <conversion_press_alt+0xb0>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f7fe f9c1 	bl	800075c <__aeabi_ddiv>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe fb89 	bl	8000af8 <__aeabi_d2f>
 80023e6:	4603      	mov	r3, r0
 80023e8:	60bb      	str	r3, [r7, #8]

	return alt;
 80023ea:	68bb      	ldr	r3, [r7, #8]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	f3af 8000 	nop.w
 80023f8:	7dee2d4a 	.word	0x7dee2d4a
 80023fc:	3fc85936 	.word	0x3fc85936
 8002400:	47ae147b 	.word	0x47ae147b
 8002404:	3f847ae1 	.word	0x3f847ae1
 8002408:	66666666 	.word	0x66666666
 800240c:	40711266 	.word	0x40711266
 8002410:	76c8b439 	.word	0x76c8b439
 8002414:	3f7a9fbe 	.word	0x3f7a9fbe
 8002418:	447d4000 	.word	0x447d4000
 800241c:	3ff00000 	.word	0x3ff00000

08002420 <affichage_pression>:

void affichage_pression(void){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
MAX7219_Clear();
 8002424:	f00c fb15 	bl	800ea52 <MAX7219_Clear>
MAX7219_DisplayChar('4',buffer[3]);
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <affichage_pression+0x44>)
 800242a:	78db      	ldrb	r3, [r3, #3]
 800242c:	4619      	mov	r1, r3
 800242e:	2034      	movs	r0, #52	@ 0x34
 8002430:	f00c fb25 	bl	800ea7e <MAX7219_DisplayChar>
MAX7219_DisplayChar('3',buffer[2]);
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <affichage_pression+0x44>)
 8002436:	789b      	ldrb	r3, [r3, #2]
 8002438:	4619      	mov	r1, r3
 800243a:	2033      	movs	r0, #51	@ 0x33
 800243c:	f00c fb1f 	bl	800ea7e <MAX7219_DisplayChar>
MAX7219_DisplayChar('2',buffer[1]);
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <affichage_pression+0x44>)
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	4619      	mov	r1, r3
 8002446:	2032      	movs	r0, #50	@ 0x32
 8002448:	f00c fb19 	bl	800ea7e <MAX7219_DisplayChar>
MAX7219_DisplayChar('1',buffer[0]);
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <affichage_pression+0x44>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	2031      	movs	r0, #49	@ 0x31
 8002454:	f00c fb13 	bl	800ea7e <MAX7219_DisplayChar>
HAL_Delay(200);
 8002458:	20c8      	movs	r0, #200	@ 0xc8
 800245a:	f008 f829 	bl	800a4b0 <HAL_Delay>
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000051c 	.word	0x2000051c

08002468 <angle_plane>:


double angle_plane(int32_t AX,int32_t AY, int32_t AZ ){
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]

	double angle;

	angle = atan((sqrt(pow((double)AX,2) + pow((double)AY,2)))/((double)AZ))*(180/3.14); //calcul de l'angle
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7fd ffdd 	bl	8000434 <__aeabi_i2d>
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002482:	f010 ff31 	bl	80132e8 <pow>
 8002486:	4604      	mov	r4, r0
 8002488:	460d      	mov	r5, r1
 800248a:	68b8      	ldr	r0, [r7, #8]
 800248c:	f7fd ffd2 	bl	8000434 <__aeabi_i2d>
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002498:	f010 ff26 	bl	80132e8 <pow>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fd fe7a 	bl	800019c <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f010 ff82 	bl	80133b8 <sqrt>
 80024b4:	4604      	mov	r4, r0
 80024b6:	460d      	mov	r5, r1
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fd ffbb 	bl	8000434 <__aeabi_i2d>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4620      	mov	r0, r4
 80024c4:	4629      	mov	r1, r5
 80024c6:	f7fe f949 	bl	800075c <__aeabi_ddiv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f010 ff95 	bl	8013400 <atan>
 80024d6:	a30a      	add	r3, pc, #40	@ (adr r3, 8002500 <angle_plane+0x98>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe f814 	bl	8000508 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//angle = atan2((double)AX,(double)AZ)*(180/3.14);

	printf("angle rotation : %lf \r\n",angle);
 80024e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ec:	4806      	ldr	r0, [pc, #24]	@ (8002508 <angle_plane+0xa0>)
 80024ee:	f00d fa5d 	bl	800f9ac <iprintf>

	return angle;
 80024f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002500:	61d59ae7 	.word	0x61d59ae7
 8002504:	404ca994 	.word	0x404ca994
 8002508:	080145fc 	.word	0x080145fc

0800250c <ON_OFF_Projet>:

int ON_OFF_Projet(int sortie){
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	return sortie;
 8002514:	687b      	ldr	r3, [r7, #4]
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <adcFunction>:

uint32_t adcFunction(void) //potar RV2 utilisé pour faire varier la vitesse du moteur
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc);
 8002524:	482b      	ldr	r0, [pc, #172]	@ (80025d4 <adcFunction+0xb4>)
 8002526:	f008 f9e7 	bl	800a8f8 <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(&hadc, 100); // refresh des infos toutes les 1000ms
 800252a:	2164      	movs	r1, #100	@ 0x64
 800252c:	4829      	ldr	r0, [pc, #164]	@ (80025d4 <adcFunction+0xb4>)
 800252e:	f008 f953 	bl	800a7d8 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc);
 8002532:	4828      	ldr	r0, [pc, #160]	@ (80025d4 <adcFunction+0xb4>)
 8002534:	f008 fa4a 	bl	800a9cc <HAL_ADC_GetValue>
 8002538:	4603      	mov	r3, r0
 800253a:	4a27      	ldr	r2, [pc, #156]	@ (80025d8 <adcFunction+0xb8>)
 800253c:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc);
 800253e:	4825      	ldr	r0, [pc, #148]	@ (80025d4 <adcFunction+0xb4>)
 8002540:	f008 f91e 	bl	800a780 <HAL_ADC_Stop>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002544:	2100      	movs	r1, #0
 8002546:	4825      	ldr	r0, [pc, #148]	@ (80025dc <adcFunction+0xbc>)
 8002548:	f00b fb2a 	bl	800dba0 <HAL_TIM_PWM_Start>

	printf("ADC_Value = %lu \n\r",analogValue);//valeur max à gauche 4095
 800254c:	4b22      	ldr	r3, [pc, #136]	@ (80025d8 <adcFunction+0xb8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	4823      	ldr	r0, [pc, #140]	@ (80025e0 <adcFunction+0xc0>)
 8002554:	f00d fa2a 	bl	800f9ac <iprintf>

	if(analogValue >= 0 && analogValue < 1000)
 8002558:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <adcFunction+0xb8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002560:	d202      	bcs.n	8002568 <adcFunction+0x48>
		{
			TIM3->CCR1 = 0;
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <adcFunction+0xc4>)
 8002564:	2200      	movs	r2, #0
 8002566:	635a      	str	r2, [r3, #52]	@ 0x34
		}

	if(analogValue >= 1000 && analogValue < 2000)
 8002568:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <adcFunction+0xb8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002570:	d307      	bcc.n	8002582 <adcFunction+0x62>
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <adcFunction+0xb8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800257a:	d202      	bcs.n	8002582 <adcFunction+0x62>
		{
			TIM3->CCR1 = 79;
 800257c:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <adcFunction+0xc4>)
 800257e:	224f      	movs	r2, #79	@ 0x4f
 8002580:	635a      	str	r2, [r3, #52]	@ 0x34
		}

	if(analogValue >= 2000 && analogValue < 3000)
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <adcFunction+0xb8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800258a:	d308      	bcc.n	800259e <adcFunction+0x7e>
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <adcFunction+0xb8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002594:	4293      	cmp	r3, r2
 8002596:	d802      	bhi.n	800259e <adcFunction+0x7e>
		{
			TIM3->CCR1 = 158;
 8002598:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <adcFunction+0xc4>)
 800259a:	229e      	movs	r2, #158	@ 0x9e
 800259c:	635a      	str	r2, [r3, #52]	@ 0x34
		}

	if(analogValue >= 3000 && analogValue < 4000)
 800259e:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <adcFunction+0xb8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d907      	bls.n	80025ba <adcFunction+0x9a>
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <adcFunction+0xb8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80025b2:	d202      	bcs.n	80025ba <adcFunction+0x9a>
		{
			TIM3->CCR1 = 237;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <adcFunction+0xc4>)
 80025b6:	22ed      	movs	r2, #237	@ 0xed
 80025b8:	635a      	str	r2, [r3, #52]	@ 0x34
		}

	if(analogValue >= 4000)
 80025ba:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <adcFunction+0xb8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80025c2:	d303      	bcc.n	80025cc <adcFunction+0xac>
		{
			TIM3->CCR1 = 316;
 80025c4:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <adcFunction+0xc4>)
 80025c6:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80025ca:	635a      	str	r2, [r3, #52]	@ 0x34
		}

	return analogValue;
 80025cc:	4b02      	ldr	r3, [pc, #8]	@ (80025d8 <adcFunction+0xb8>)
 80025ce:	681b      	ldr	r3, [r3, #0]

}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	2000038c 	.word	0x2000038c
 80025d8:	20000534 	.word	0x20000534
 80025dc:	20000478 	.word	0x20000478
 80025e0:	08014614 	.word	0x08014614
 80025e4:	40000400 	.word	0x40000400

080025e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ec:	b672      	cpsid	i
}
 80025ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <Error_Handler+0x8>

080025f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <HAL_MspInit+0x5c>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	4a14      	ldr	r2, [pc, #80]	@ (8002650 <HAL_MspInit+0x5c>)
 8002600:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002604:	6253      	str	r3, [r2, #36]	@ 0x24
 8002606:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_MspInit+0x5c>)
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <HAL_MspInit+0x5c>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a0e      	ldr	r2, [pc, #56]	@ (8002650 <HAL_MspInit+0x5c>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6213      	str	r3, [r2, #32]
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <HAL_MspInit+0x5c>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <HAL_MspInit+0x5c>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	4a08      	ldr	r2, [pc, #32]	@ (8002650 <HAL_MspInit+0x5c>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002634:	6253      	str	r3, [r2, #36]	@ 0x24
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_MspInit+0x5c>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002642:	2007      	movs	r0, #7
 8002644:	f008 fe1a 	bl	800b27c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800

08002654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	@ 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <HAL_ADC_MspInit+0x84>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d12b      	bne.n	80026ce <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002676:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <HAL_ADC_MspInit+0x88>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a18      	ldr	r2, [pc, #96]	@ (80026dc <HAL_ADC_MspInit+0x88>)
 800267c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <HAL_ADC_MspInit+0x88>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <HAL_ADC_MspInit+0x88>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <HAL_ADC_MspInit+0x88>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	61d3      	str	r3, [r2, #28]
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <HAL_ADC_MspInit+0x88>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = My_adc_Pin;
 80026a6:	2301      	movs	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026aa:	2303      	movs	r3, #3
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(My_adc_GPIO_Port, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	4809      	ldr	r0, [pc, #36]	@ (80026e0 <HAL_ADC_MspInit+0x8c>)
 80026ba:	f008 fe21 	bl	800b300 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	2012      	movs	r0, #18
 80026c4:	f008 fde5 	bl	800b292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80026c8:	2012      	movs	r0, #18
 80026ca:	f008 fdfe 	bl	800b2ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	@ 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40012400 	.word	0x40012400
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020000 	.word	0x40020000

080026e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a17      	ldr	r2, [pc, #92]	@ (8002760 <HAL_SPI_MspInit+0x7c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d127      	bne.n	8002756 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <HAL_SPI_MspInit+0x80>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a16      	ldr	r2, [pc, #88]	@ (8002764 <HAL_SPI_MspInit+0x80>)
 800270c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <HAL_SPI_MspInit+0x80>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <HAL_SPI_MspInit+0x80>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4a10      	ldr	r2, [pc, #64]	@ (8002764 <HAL_SPI_MspInit+0x80>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	61d3      	str	r3, [r2, #28]
 800272a:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <HAL_SPI_MspInit+0x80>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002736:	23e0      	movs	r3, #224	@ 0xe0
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002746:	2305      	movs	r3, #5
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4805      	ldr	r0, [pc, #20]	@ (8002768 <HAL_SPI_MspInit+0x84>)
 8002752:	f008 fdd5 	bl	800b300 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002756:	bf00      	nop
 8002758:	3728      	adds	r7, #40	@ 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40013000 	.word	0x40013000
 8002764:	40023800 	.word	0x40023800
 8002768:	40020000 	.word	0x40020000

0800276c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277c:	d10c      	bne.n	8002798 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <HAL_TIM_Base_MspInit+0x58>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <HAL_TIM_Base_MspInit+0x58>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6253      	str	r3, [r2, #36]	@ 0x24
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_TIM_Base_MspInit+0x58>)
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002796:	e010      	b.n	80027ba <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <HAL_TIM_Base_MspInit+0x5c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10b      	bne.n	80027ba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a2:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_TIM_Base_MspInit+0x58>)
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <HAL_TIM_Base_MspInit+0x58>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6253      	str	r3, [r2, #36]	@ 0x24
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_TIM_Base_MspInit+0x58>)
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40000400 	.word	0x40000400

080027cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	@ 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002868 <HAL_TIM_MspPostInit+0x9c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d137      	bne.n	800285e <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ee:	4b1f      	ldr	r3, [pc, #124]	@ (800286c <HAL_TIM_MspPostInit+0xa0>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a1e      	ldr	r2, [pc, #120]	@ (800286c <HAL_TIM_MspPostInit+0xa0>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b1c      	ldr	r3, [pc, #112]	@ (800286c <HAL_TIM_MspPostInit+0xa0>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_TIM_MspPostInit+0xa0>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4a18      	ldr	r2, [pc, #96]	@ (800286c <HAL_TIM_MspPostInit+0xa0>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	61d3      	str	r3, [r2, #28]
 8002812:	4b16      	ldr	r3, [pc, #88]	@ (800286c <HAL_TIM_MspPostInit+0xa0>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800282e:	2302      	movs	r3, #2
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	4619      	mov	r1, r3
 8002838:	480d      	ldr	r0, [pc, #52]	@ (8002870 <HAL_TIM_MspPostInit+0xa4>)
 800283a:	f008 fd61 	bl	800b300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800283e:	2310      	movs	r3, #16
 8002840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800284e:	2302      	movs	r3, #2
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	4806      	ldr	r0, [pc, #24]	@ (8002874 <HAL_TIM_MspPostInit+0xa8>)
 800285a:	f008 fd51 	bl	800b300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800285e:	bf00      	nop
 8002860:	3728      	adds	r7, #40	@ 0x28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40000400 	.word	0x40000400
 800286c:	40023800 	.word	0x40023800
 8002870:	40020800 	.word	0x40020800
 8002874:	40020400 	.word	0x40020400

08002878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	@ 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a17      	ldr	r2, [pc, #92]	@ (80028f4 <HAL_UART_MspInit+0x7c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d127      	bne.n	80028ea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800289a:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <HAL_UART_MspInit+0x80>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	4a16      	ldr	r2, [pc, #88]	@ (80028f8 <HAL_UART_MspInit+0x80>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a4:	6253      	str	r3, [r2, #36]	@ 0x24
 80028a6:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <HAL_UART_MspInit+0x80>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_UART_MspInit+0x80>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a10      	ldr	r2, [pc, #64]	@ (80028f8 <HAL_UART_MspInit+0x80>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	61d3      	str	r3, [r2, #28]
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_UART_MspInit+0x80>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028ca:	230c      	movs	r3, #12
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028da:	2307      	movs	r3, #7
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	4619      	mov	r1, r3
 80028e4:	4805      	ldr	r0, [pc, #20]	@ (80028fc <HAL_UART_MspInit+0x84>)
 80028e6:	f008 fd0b 	bl	800b300 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	@ 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40004400 	.word	0x40004400
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020000 	.word	0x40020000

08002900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <NMI_Handler+0x4>

08002908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <HardFault_Handler+0x4>

08002910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <MemManage_Handler+0x4>

08002918 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <BusFault_Handler+0x4>

08002920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <UsageFault_Handler+0x4>

08002928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002950:	f007 fd92 	bl	800a478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800295c:	4802      	ldr	r0, [pc, #8]	@ (8002968 <ADC1_IRQHandler+0x10>)
 800295e:	f008 f841 	bl	800a9e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000038c 	.word	0x2000038c

0800296c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BP1_Pin);
 8002970:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002974:	f008 ff76 	bl	800b864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BP2_Pin);
 8002978:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800297c:	f008 ff72 	bl	800b864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002980:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002984:	f008 ff6e 	bl	800b864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  if(__HAL_GPIO_EXTI_GET_IT(BP1_Pin) != RESET){ //permet de "stocker" l'état d'interruption donc l'appui
 8002988:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <EXTI15_10_IRQHandler+0x58>)
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <EXTI15_10_IRQHandler+0x38>
 	  HAL_GPIO_EXTI_Callback(BP1_Pin);
 8002994:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002998:	f000 f816 	bl	80029c8 <HAL_GPIO_EXTI_Callback>
 	  __HAL_GPIO_EXTI_CLEAR_IT(BP1_Pin);
 800299c:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <EXTI15_10_IRQHandler+0x58>)
 800299e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029a2:	615a      	str	r2, [r3, #20]
   }

  if(__HAL_GPIO_EXTI_GET_IT(BP2_Pin) != RESET){
 80029a4:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <EXTI15_10_IRQHandler+0x58>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <EXTI15_10_IRQHandler+0x54>
	  HAL_GPIO_EXTI_Callback(BP2_Pin);
 80029b0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80029b4:	f000 f808 	bl	80029c8 <HAL_GPIO_EXTI_Callback>
	  __HAL_GPIO_EXTI_CLEAR_IT(BP2_Pin);
 80029b8:	4b02      	ldr	r3, [pc, #8]	@ (80029c4 <EXTI15_10_IRQHandler+0x58>)
 80029ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029be:	615a      	str	r2, [r3, #20]
  }

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == BP1_Pin){
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d8:	d103      	bne.n	80029e2 <HAL_GPIO_EXTI_Callback+0x1a>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);//lance la fonction main uniquement si on appuie sur le bouton
 80029da:	2104      	movs	r1, #4
 80029dc:	480f      	ldr	r0, [pc, #60]	@ (8002a1c <HAL_GPIO_EXTI_Callback+0x54>)
 80029de:	f00b f975 	bl	800dccc <HAL_TIM_PWM_Stop>
	}

	if(GPIO_Pin == BP2_Pin){
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029e8:	d114      	bne.n	8002a14 <HAL_GPIO_EXTI_Callback+0x4c>

			if(sortie==0){
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0x58>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HAL_GPIO_EXTI_Callback+0x3c>
				sortie = 1;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0x58>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
				ON_OFF_Projet(sortie);
 80029f8:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0x58>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fd85 	bl	800250c <ON_OFF_Projet>
				//return;
			}
		}


}
 8002a02:	e007      	b.n	8002a14 <HAL_GPIO_EXTI_Callback+0x4c>
				sortie=0;
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0x58>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
				ON_OFF_Projet(sortie);
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0x58>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fd7c 	bl	800250c <ON_OFF_Projet>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000478 	.word	0x20000478
 8002a20:	20000530 	.word	0x20000530

08002a24 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002a2e:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <BSP_I2C1_Init+0x58>)
 8002a30:	4a13      	ldr	r2, [pc, #76]	@ (8002a80 <BSP_I2C1_Init+0x5c>)
 8002a32:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002a34:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <BSP_I2C1_Init+0x60>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	4912      	ldr	r1, [pc, #72]	@ (8002a84 <BSP_I2C1_Init+0x60>)
 8002a3c:	600a      	str	r2, [r1, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d117      	bne.n	8002a72 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002a42:	480e      	ldr	r0, [pc, #56]	@ (8002a7c <BSP_I2C1_Init+0x58>)
 8002a44:	f009 fbcc 	bl	800c1e0 <HAL_I2C_GetState>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d111      	bne.n	8002a72 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002a4e:	480b      	ldr	r0, [pc, #44]	@ (8002a7c <BSP_I2C1_Init+0x58>)
 8002a50:	f000 f8e2 	bl	8002c18 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10b      	bne.n	8002a72 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002a5a:	4808      	ldr	r0, [pc, #32]	@ (8002a7c <BSP_I2C1_Init+0x58>)
 8002a5c:	f000 f8a8 	bl	8002bb0 <MX_I2C1_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002a66:	f06f 0307 	mvn.w	r3, #7
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	e001      	b.n	8002a72 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002a72:	687b      	ldr	r3, [r7, #4]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000538 	.word	0x20000538
 8002a80:	40005400 	.word	0x40005400
 8002a84:	2000058c 	.word	0x2000058c

08002a88 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002a92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad0 <BSP_I2C1_DeInit+0x48>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d014      	beq.n	8002ac4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <BSP_I2C1_DeInit+0x48>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad0 <BSP_I2C1_DeInit+0x48>)
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <BSP_I2C1_DeInit+0x48>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002aac:	4809      	ldr	r0, [pc, #36]	@ (8002ad4 <BSP_I2C1_DeInit+0x4c>)
 8002aae:	f000 f8f9 	bl	8002ca4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002ab2:	4808      	ldr	r0, [pc, #32]	@ (8002ad4 <BSP_I2C1_DeInit+0x4c>)
 8002ab4:	f009 f832 	bl	800bb1c <HAL_I2C_DeInit>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002abe:	f06f 0307 	mvn.w	r3, #7
 8002ac2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000058c 	.word	0x2000058c
 8002ad4:	20000538 	.word	0x20000538

08002ad8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	@ 0x28
 8002adc:	af04      	add	r7, sp, #16
 8002ade:	60ba      	str	r2, [r7, #8]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	81fb      	strh	r3, [r7, #14]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	81bb      	strh	r3, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002af2:	89ba      	ldrh	r2, [r7, #12]
 8002af4:	89f9      	ldrh	r1, [r7, #14]
 8002af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2301      	movs	r3, #1
 8002b06:	480c      	ldr	r0, [pc, #48]	@ (8002b38 <BSP_I2C1_WriteReg+0x60>)
 8002b08:	f009 f84a 	bl	800bba0 <HAL_I2C_Mem_Write>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00c      	beq.n	8002b2c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002b12:	4809      	ldr	r0, [pc, #36]	@ (8002b38 <BSP_I2C1_WriteReg+0x60>)
 8002b14:	f009 fb71 	bl	800c1fa <HAL_I2C_GetError>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d103      	bne.n	8002b26 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b1e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e002      	b.n	8002b2c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002b26:	f06f 0303 	mvn.w	r3, #3
 8002b2a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002b2c:	697b      	ldr	r3, [r7, #20]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000538 	.word	0x20000538

08002b3c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	@ 0x28
 8002b40:	af04      	add	r7, sp, #16
 8002b42:	60ba      	str	r2, [r7, #8]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	81fb      	strh	r3, [r7, #14]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	81bb      	strh	r3, [r7, #12]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002b56:	89ba      	ldrh	r2, [r7, #12]
 8002b58:	89f9      	ldrh	r1, [r7, #14]
 8002b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2301      	movs	r3, #1
 8002b6a:	480c      	ldr	r0, [pc, #48]	@ (8002b9c <BSP_I2C1_ReadReg+0x60>)
 8002b6c:	f009 f912 	bl	800bd94 <HAL_I2C_Mem_Read>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00c      	beq.n	8002b90 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002b76:	4809      	ldr	r0, [pc, #36]	@ (8002b9c <BSP_I2C1_ReadReg+0x60>)
 8002b78:	f009 fb3f 	bl	800c1fa <HAL_I2C_GetError>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d103      	bne.n	8002b8a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b82:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e002      	b.n	8002b90 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002b8a:	f06f 0303 	mvn.w	r3, #3
 8002b8e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002b90:	697b      	ldr	r3, [r7, #20]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000538 	.word	0x20000538

08002ba0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002ba4:	f007 fc7a 	bl	800a49c <HAL_GetTick>
 8002ba8:	4603      	mov	r3, r0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <MX_I2C1_Init+0x60>)
 8002bc0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a13      	ldr	r2, [pc, #76]	@ (8002c14 <MX_I2C1_Init+0x64>)
 8002bc6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bda:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f008 fe4d 	bl	800b894 <HAL_I2C_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40005400 	.word	0x40005400
 8002c14:	00061a80 	.word	0x00061a80

08002c18 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c20:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <I2C1_MspInit+0x84>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	4a1d      	ldr	r2, [pc, #116]	@ (8002c9c <I2C1_MspInit+0x84>)
 8002c26:	f043 0302 	orr.w	r3, r3, #2
 8002c2a:	61d3      	str	r3, [r2, #28]
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c9c <I2C1_MspInit+0x84>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002c38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3e:	2312      	movs	r3, #18
 8002c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	4812      	ldr	r0, [pc, #72]	@ (8002ca0 <I2C1_MspInit+0x88>)
 8002c56:	f008 fb53 	bl	800b300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002c5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c60:	2312      	movs	r3, #18
 8002c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	4619      	mov	r1, r3
 8002c76:	480a      	ldr	r0, [pc, #40]	@ (8002ca0 <I2C1_MspInit+0x88>)
 8002c78:	f008 fb42 	bl	800b300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c7c:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <I2C1_MspInit+0x84>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	4a06      	ldr	r2, [pc, #24]	@ (8002c9c <I2C1_MspInit+0x84>)
 8002c82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c86:	6253      	str	r3, [r2, #36]	@ 0x24
 8002c88:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <I2C1_MspInit+0x84>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002c94:	bf00      	nop
 8002c96:	3728      	adds	r7, #40	@ 0x28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40020400 	.word	0x40020400

08002ca4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002cac:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <I2C1_MspDeInit+0x30>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	4a08      	ldr	r2, [pc, #32]	@ (8002cd4 <I2C1_MspDeInit+0x30>)
 8002cb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cb6:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002cb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cbc:	4806      	ldr	r0, [pc, #24]	@ (8002cd8 <I2C1_MspDeInit+0x34>)
 8002cbe:	f008 fcaf 	bl	800b620 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002cc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cc6:	4804      	ldr	r0, [pc, #16]	@ (8002cd8 <I2C1_MspDeInit+0x34>)
 8002cc8:	f008 fcaa 	bl	800b620 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020400 	.word	0x40020400

08002cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return 1;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <_kill>:

int _kill(int pid, int sig)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cf4:	f00d f814 	bl	800fd20 <__errno>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2216      	movs	r2, #22
 8002cfc:	601a      	str	r2, [r3, #0]
  return -1;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_exit>:

void _exit (int status)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d12:	f04f 31ff 	mov.w	r1, #4294967295
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffe7 	bl	8002cea <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <_exit+0x12>

08002d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e00a      	b.n	8002d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d32:	f3af 8000 	nop.w
 8002d36:	4601      	mov	r1, r0
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	60ba      	str	r2, [r7, #8]
 8002d3e:	b2ca      	uxtb	r2, r1
 8002d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3301      	adds	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dbf0      	blt.n	8002d32 <_read+0x12>
  }

  return len;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e009      	b.n	8002d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	60ba      	str	r2, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fadd 	bl	8002334 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf1      	blt.n	8002d6c <_write+0x12>
  }
  return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_close>:

int _close(int file)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002db8:	605a      	str	r2, [r3, #4]
  return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <_isatty>:

int _isatty(int file)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dce:	2301      	movs	r3, #1
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <_sbrk+0x5c>)
 8002dfe:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <_sbrk+0x60>)
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e08:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e10:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <_sbrk+0x64>)
 8002e12:	4a12      	ldr	r2, [pc, #72]	@ (8002e5c <_sbrk+0x68>)
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e16:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d207      	bcs.n	8002e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e24:	f00c ff7c 	bl	800fd20 <__errno>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	e009      	b.n	8002e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e34:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <_sbrk+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	4a05      	ldr	r2, [pc, #20]	@ (8002e58 <_sbrk+0x64>)
 8002e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20014000 	.word	0x20014000
 8002e54:	00000400 	.word	0x00000400
 8002e58:	20000590 	.word	0x20000590
 8002e5c:	200008c8 	.word	0x200008c8

08002e60 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e6c:	f7ff fff8 	bl	8002e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e70:	480b      	ldr	r0, [pc, #44]	@ (8002ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002e72:	490c      	ldr	r1, [pc, #48]	@ (8002ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e78:	e002      	b.n	8002e80 <LoopCopyDataInit>

08002e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7e:	3304      	adds	r3, #4

08002e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e84:	d3f9      	bcc.n	8002e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e86:	4a09      	ldr	r2, [pc, #36]	@ (8002eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e88:	4c09      	ldr	r4, [pc, #36]	@ (8002eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e8c:	e001      	b.n	8002e92 <LoopFillZerobss>

08002e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e90:	3204      	adds	r2, #4

08002e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e94:	d3fb      	bcc.n	8002e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e96:	f00c ff49 	bl	800fd2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e9a:	f7fe fb49 	bl	8001530 <main>
  bx lr
 8002e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8002ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea4:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8002ea8:	08014b38 	.word	0x08014b38
  ldr r2, =_sbss
 8002eac:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8002eb0:	200008c8 	.word	0x200008c8

08002eb4 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eb4:	e7fe      	b.n	8002eb4 <COMP_ACQ_IRQHandler>
	...

08002eb8 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e034      	b.n	8002f3a <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	7b1a      	ldrb	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f44 <HTS221_RegisterBusIO+0x8c>)
 8002f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	@ (8002f48 <HTS221_RegisterBusIO+0x90>)
 8002f12:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4798      	blx	r3
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	e002      	b.n	8002f3a <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	08003581 	.word	0x08003581
 8002f48:	080035e3 	.word	0x080035e3

08002f4c <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fa9e 	bl	80034a0 <HTS221_Initialize>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	e004      	b.n	8002f7a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d111      	bne.n	8002fb8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f87e 	bl	8003096 <HTS221_HUM_Disable>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa4:	e00d      	b.n	8002fc2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f95f 	bl	800326a <HTS221_TEMP_Disable>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb6:	e004      	b.n	8002fc2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3320      	adds	r3, #32
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fc2a 	bl	8003834 <hts221_device_id_get>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e000      	b.n	8002fee <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2201      	movs	r2, #1
 8003006:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2200      	movs	r2, #0
 800301e:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	4a09      	ldr	r2, [pc, #36]	@ (8003048 <HTS221_GetCapabilities+0x50>)
 8003024:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	4a07      	ldr	r2, [pc, #28]	@ (8003048 <HTS221_GetCapabilities+0x50>)
 800302a:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr
 8003048:	41480000 	.word	0x41480000

0800304c <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e015      	b.n	800308e <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3320      	adds	r3, #32
 8003070:	2101      	movs	r1, #1
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fbef 	bl	8003856 <hts221_power_on_set>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	e004      	b.n	800308e <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e015      	b.n	80030d8 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3320      	adds	r3, #32
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fbca 	bl	8003856 <hts221_power_on_set>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80030c8:	f04f 33ff 	mov.w	r3, #4294967295
 80030cc:	e004      	b.n	80030d8 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80030ea:	6839      	ldr	r1, [r7, #0]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f965 	bl	80033bc <HTS221_GetOutputDataRate>
 80030f2:	4603      	mov	r3, r0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003106:	6839      	ldr	r1, [r7, #0]
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f99b 	bl	8003444 <HTS221_SetOutputDataRate>
 800310e:	4603      	mov	r3, r0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3320      	adds	r3, #32
 8003126:	f107 020c 	add.w	r2, r7, #12
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fc5e 	bl	80039ee <hts221_hum_adc_point_0_get>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003138:	f04f 33ff 	mov.w	r3, #4294967295
 800313c:	e069      	b.n	8003212 <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f103 0220 	add.w	r2, r3, #32
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	3304      	adds	r3, #4
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f000 fba8 	bl	80038a2 <hts221_hum_rh_point_0_get>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	e059      	b.n	8003212 <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f103 0220 	add.w	r2, r3, #32
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	3308      	adds	r3, #8
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f000 fc5f 	bl	8003a30 <hts221_hum_adc_point_1_get>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	e049      	b.n	8003212 <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f103 0220 	add.w	r2, r3, #32
 8003184:	f107 030c 	add.w	r3, r7, #12
 8003188:	330c      	adds	r3, #12
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f000 fba8 	bl	80038e2 <hts221_hum_rh_point_1_get>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295
 800319c:	e039      	b.n	8003212 <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 800319e:	2300      	movs	r3, #0
 80031a0:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3320      	adds	r3, #32
 80031a6:	f107 021c 	add.w	r2, r7, #28
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fafd 	bl	80037ac <hts221_humidity_raw_get>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	e029      	b.n	8003212 <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80031be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd fda2 	bl	8000d0c <__aeabi_i2f>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 f991 	bl	80034f8 <Linear_Interpolation>
 80031d6:	4602      	mov	r2, r0
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f04f 0100 	mov.w	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd ff83 	bl	80010f0 <__aeabi_fcmplt>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4907      	ldr	r1, [pc, #28]	@ (800321c <HTS221_HUM_GetHumidity+0x104>)
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd ff94 	bl	800112c <__aeabi_fcmpgt>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	4a03      	ldr	r2, [pc, #12]	@ (800321c <HTS221_HUM_GetHumidity+0x104>)
 800320e:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	42c80000 	.word	0x42c80000

08003220 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e015      	b.n	8003262 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3320      	adds	r3, #32
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fb05 	bl	8003856 <hts221_power_on_set>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	e004      	b.n	8003262 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e015      	b.n	80032ac <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10b      	bne.n	80032a2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3320      	adds	r3, #32
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fae0 	bl	8003856 <hts221_power_on_set>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
 80032a0:	e004      	b.n	80032ac <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f87b 	bl	80033bc <HTS221_GetOutputDataRate>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80032da:	6839      	ldr	r1, [r7, #0]
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f8b1 	bl	8003444 <HTS221_SetOutputDataRate>
 80032e2:	4603      	mov	r3, r0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3320      	adds	r3, #32
 80032fa:	f107 020c 	add.w	r2, r7, #12
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fbb6 	bl	8003a72 <hts221_temp_adc_point_0_get>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
 8003310:	e04f      	b.n	80033b2 <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f103 0220 	add.w	r2, r3, #32
 8003318:	f107 030c 	add.w	r3, r7, #12
 800331c:	3304      	adds	r3, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f000 fafe 	bl	8003922 <hts221_temp_deg_point_0_get>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
 8003330:	e03f      	b.n	80033b2 <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f103 0220 	add.w	r2, r3, #32
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	3308      	adds	r3, #8
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f000 fbb7 	bl	8003ab4 <hts221_temp_adc_point_1_get>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 800334c:	f04f 33ff 	mov.w	r3, #4294967295
 8003350:	e02f      	b.n	80033b2 <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f103 0220 	add.w	r2, r3, #32
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	330c      	adds	r3, #12
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f000 fb11 	bl	8003988 <hts221_temp_deg_point_1_get>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 800336c:	f04f 33ff 	mov.w	r3, #4294967295
 8003370:	e01f      	b.n	80033b2 <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8003372:	2300      	movs	r3, #0
 8003374:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3320      	adds	r3, #32
 800337a:	f107 021c 	add.w	r2, r7, #28
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fa35 	bl	80037f0 <hts221_temperature_raw_get>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	e00f      	b.n	80033b2 <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003392:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fcb8 	bl	8000d0c <__aeabi_i2f>
 800339c:	4602      	mov	r2, r0
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 f8a7 	bl	80034f8 <Linear_Interpolation>
 80033aa:	4602      	mov	r2, r0
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3320      	adds	r3, #32
 80033ce:	f107 020b 	add.w	r2, r7, #11
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f98b 	bl	80036f0 <hts221_data_rate_get>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80033e0:	f04f 33ff 	mov.w	r3, #4294967295
 80033e4:	e025      	b.n	8003432 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80033e6:	7afb      	ldrb	r3, [r7, #11]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d81d      	bhi.n	8003428 <HTS221_GetOutputDataRate+0x6c>
 80033ec:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <HTS221_GetOutputDataRate+0x38>)
 80033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f2:	bf00      	nop
 80033f4:	08003405 	.word	0x08003405
 80033f8:	0800340f 	.word	0x0800340f
 80033fc:	08003419 	.word	0x08003419
 8003400:	08003421 	.word	0x08003421
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
      break;
 800340c:	e010      	b.n	8003430 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003414:	601a      	str	r2, [r3, #0]
      break;
 8003416:	e00b      	b.n	8003430 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4a08      	ldr	r2, [pc, #32]	@ (800343c <HTS221_GetOutputDataRate+0x80>)
 800341c:	601a      	str	r2, [r3, #0]
      break;
 800341e:	e007      	b.n	8003430 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a07      	ldr	r2, [pc, #28]	@ (8003440 <HTS221_GetOutputDataRate+0x84>)
 8003424:	601a      	str	r2, [r3, #0]
      break;
 8003426:	e003      	b.n	8003430 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003428:	f04f 33ff 	mov.w	r3, #4294967295
 800342c:	60fb      	str	r3, [r7, #12]
      break;
 800342e:	bf00      	nop
  }

  return ret;
 8003430:	68fb      	ldr	r3, [r7, #12]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40e00000 	.word	0x40e00000
 8003440:	41480000 	.word	0x41480000

08003444 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800344e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003452:	6838      	ldr	r0, [r7, #0]
 8003454:	f7fd fe56 	bl	8001104 <__aeabi_fcmple>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HTS221_SetOutputDataRate+0x1e>
 800345e:	2301      	movs	r3, #1
 8003460:	e009      	b.n	8003476 <HTS221_SetOutputDataRate+0x32>
 8003462:	490e      	ldr	r1, [pc, #56]	@ (800349c <HTS221_SetOutputDataRate+0x58>)
 8003464:	6838      	ldr	r0, [r7, #0]
 8003466:	f7fd fe4d 	bl	8001104 <__aeabi_fcmple>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HTS221_SetOutputDataRate+0x30>
 8003470:	2302      	movs	r3, #2
 8003472:	e000      	b.n	8003476 <HTS221_SetOutputDataRate+0x32>
 8003474:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003476:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3320      	adds	r3, #32
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f000 f90f 	bl	80036a4 <hts221_data_rate_set>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 800348c:	f04f 33ff 	mov.w	r3, #4294967295
 8003490:	e000      	b.n	8003494 <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40e00000 	.word	0x40e00000

080034a0 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3320      	adds	r3, #32
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f9d1 	bl	8003856 <hts221_power_on_set>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	e017      	b.n	80034f0 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3320      	adds	r3, #32
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f94a 	bl	8003760 <hts221_block_data_update_set>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	e00b      	b.n	80034f0 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80034d8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ffb1 	bl	8003444 <HTS221_SetOutputDataRate>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ec:	e000      	b.n	80034f0 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f7fd fb47 	bl	8000ba0 <__aeabi_fsub>
 8003512:	4603      	mov	r3, r0
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fc4c 	bl	8000db4 <__aeabi_fmul>
 800351c:	4603      	mov	r3, r0
 800351e:	461c      	mov	r4, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f7fd fc42 	bl	8000db4 <__aeabi_fmul>
 8003530:	4603      	mov	r3, r0
 8003532:	461d      	mov	r5, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7fd fc38 	bl	8000db4 <__aeabi_fmul>
 8003544:	4603      	mov	r3, r0
 8003546:	4619      	mov	r1, r3
 8003548:	4628      	mov	r0, r5
 800354a:	f7fd fb29 	bl	8000ba0 <__aeabi_fsub>
 800354e:	4603      	mov	r3, r0
 8003550:	4619      	mov	r1, r3
 8003552:	4620      	mov	r0, r4
 8003554:	f7fd fb26 	bl	8000ba4 <__addsf3>
 8003558:	4603      	mov	r3, r0
 800355a:	461c      	mov	r4, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f7fd fb1a 	bl	8000ba0 <__aeabi_fsub>
 800356c:	4603      	mov	r3, r0
 800356e:	4619      	mov	r1, r3
 8003570:	4620      	mov	r0, r4
 8003572:	f7fd fcd3 	bl	8000f1c <__aeabi_fdiv>
 8003576:	4603      	mov	r3, r0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bdb0      	pop	{r4, r5, r7, pc}

08003580 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	460b      	mov	r3, r1
 800358e:	72fb      	strb	r3, [r7, #11]
 8003590:	4613      	mov	r3, r2
 8003592:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10e      	bne.n	80035be <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	695c      	ldr	r4, [r3, #20]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	7b1b      	ldrb	r3, [r3, #12]
 80035a8:	4618      	mov	r0, r3
 80035aa:	7afb      	ldrb	r3, [r7, #11]
 80035ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	47a0      	blx	r4
 80035ba:	4603      	mov	r3, r0
 80035bc:	e00d      	b.n	80035da <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	695c      	ldr	r4, [r3, #20]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	7b1b      	ldrb	r3, [r3, #12]
 80035c6:	4618      	mov	r0, r3
 80035c8:	7afb      	ldrb	r3, [r7, #11]
 80035ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	4619      	mov	r1, r3
 80035d2:	893b      	ldrh	r3, [r7, #8]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	47a0      	blx	r4
 80035d8:	4603      	mov	r3, r0
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd90      	pop	{r4, r7, pc}

080035e2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80035e2:	b590      	push	{r4, r7, lr}
 80035e4:	b087      	sub	sp, #28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	461a      	mov	r2, r3
 80035ee:	460b      	mov	r3, r1
 80035f0:	72fb      	strb	r3, [r7, #11]
 80035f2:	4613      	mov	r3, r2
 80035f4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	691c      	ldr	r4, [r3, #16]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	7b1b      	ldrb	r3, [r3, #12]
 800360a:	4618      	mov	r0, r3
 800360c:	7afb      	ldrb	r3, [r7, #11]
 800360e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003612:	b2db      	uxtb	r3, r3
 8003614:	4619      	mov	r1, r3
 8003616:	893b      	ldrh	r3, [r7, #8]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	47a0      	blx	r4
 800361c:	4603      	mov	r3, r0
 800361e:	e00d      	b.n	800363c <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	691c      	ldr	r4, [r3, #16]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	7b1b      	ldrb	r3, [r3, #12]
 8003628:	4618      	mov	r0, r3
 800362a:	7afb      	ldrb	r3, [r7, #11]
 800362c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003630:	b2db      	uxtb	r3, r3
 8003632:	4619      	mov	r1, r3
 8003634:	893b      	ldrh	r3, [r7, #8]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	47a0      	blx	r4
 800363a:	4603      	mov	r3, r0
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}

08003644 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	460b      	mov	r3, r1
 8003652:	72fb      	strb	r3, [r7, #11]
 8003654:	4613      	mov	r3, r2
 8003656:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685c      	ldr	r4, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	68d8      	ldr	r0, [r3, #12]
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	7af9      	ldrb	r1, [r7, #11]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	47a0      	blx	r4
 8003668:	6178      	str	r0, [r7, #20]

  return ret;
 800366a:	697b      	ldr	r3, [r7, #20]
}
 800366c:	4618      	mov	r0, r3
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}

08003674 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	460b      	mov	r3, r1
 8003682:	72fb      	strb	r3, [r7, #11]
 8003684:	4613      	mov	r3, r2
 8003686:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681c      	ldr	r4, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68d8      	ldr	r0, [r3, #12]
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	7af9      	ldrb	r1, [r7, #11]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	47a0      	blx	r4
 8003698:	6178      	str	r0, [r7, #20]

  return ret;
 800369a:	697b      	ldr	r3, [r7, #20]
}
 800369c:	4618      	mov	r0, r3
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd90      	pop	{r4, r7, pc}

080036a4 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80036b0:	f107 0208 	add.w	r2, r7, #8
 80036b4:	2301      	movs	r3, #1
 80036b6:	2120      	movs	r1, #32
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ffc3 	bl	8003644 <hts221_read_reg>
 80036be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10f      	bne.n	80036e6 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	7a3b      	ldrb	r3, [r7, #8]
 80036d0:	f362 0301 	bfi	r3, r2, #0, #2
 80036d4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80036d6:	f107 0208 	add.w	r2, r7, #8
 80036da:	2301      	movs	r3, #1
 80036dc:	2120      	movs	r1, #32
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ffc8 	bl	8003674 <hts221_write_reg>
 80036e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036e6:	68fb      	ldr	r3, [r7, #12]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80036fa:	f107 0208 	add.w	r2, r7, #8
 80036fe:	2301      	movs	r3, #1
 8003700:	2120      	movs	r1, #32
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff9e 	bl	8003644 <hts221_read_reg>
 8003708:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800370a:	7a3b      	ldrb	r3, [r7, #8]
 800370c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b03      	cmp	r3, #3
 8003714:	d81a      	bhi.n	800374c <hts221_data_rate_get+0x5c>
 8003716:	a201      	add	r2, pc, #4	@ (adr r2, 800371c <hts221_data_rate_get+0x2c>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	0800372d 	.word	0x0800372d
 8003720:	08003735 	.word	0x08003735
 8003724:	0800373d 	.word	0x0800373d
 8003728:	08003745 	.word	0x08003745
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
      break;
 8003732:	e00f      	b.n	8003754 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
      break;
 800373a:	e00b      	b.n	8003754 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2202      	movs	r2, #2
 8003740:	701a      	strb	r2, [r3, #0]
      break;
 8003742:	e007      	b.n	8003754 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2203      	movs	r2, #3
 8003748:	701a      	strb	r2, [r3, #0]
      break;
 800374a:	e003      	b.n	8003754 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2204      	movs	r2, #4
 8003750:	701a      	strb	r2, [r3, #0]
      break;
 8003752:	bf00      	nop
  }

  return ret;
 8003754:	68fb      	ldr	r3, [r7, #12]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop

08003760 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800376c:	f107 0208 	add.w	r2, r7, #8
 8003770:	2301      	movs	r3, #1
 8003772:	2120      	movs	r1, #32
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff65 	bl	8003644 <hts221_read_reg>
 800377a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	b2da      	uxtb	r2, r3
 800378a:	7a3b      	ldrb	r3, [r7, #8]
 800378c:	f362 0382 	bfi	r3, r2, #2, #1
 8003790:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003792:	f107 0208 	add.w	r2, r7, #8
 8003796:	2301      	movs	r3, #1
 8003798:	2120      	movs	r1, #32
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff6a 	bl	8003674 <hts221_write_reg>
 80037a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037a2:	68fb      	ldr	r3, [r7, #12]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80037b6:	f107 0208 	add.w	r2, r7, #8
 80037ba:	2302      	movs	r3, #2
 80037bc:	2128      	movs	r1, #40	@ 0x28
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff40 	bl	8003644 <hts221_read_reg>
 80037c4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80037c6:	7a7b      	ldrb	r3, [r7, #9]
 80037c8:	b21a      	sxth	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	b29b      	uxth	r3, r3
 80037da:	7a3a      	ldrb	r2, [r7, #8]
 80037dc:	4413      	add	r3, r2
 80037de:	b29b      	uxth	r3, r3
 80037e0:	b21a      	sxth	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	801a      	strh	r2, [r3, #0]

  return ret;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80037fa:	f107 0208 	add.w	r2, r7, #8
 80037fe:	2302      	movs	r3, #2
 8003800:	212a      	movs	r1, #42	@ 0x2a
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff ff1e 	bl	8003644 <hts221_read_reg>
 8003808:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800380a:	7a7b      	ldrb	r3, [r7, #9]
 800380c:	b21a      	sxth	r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003818:	b29b      	uxth	r3, r3
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	b29b      	uxth	r3, r3
 800381e:	7a3a      	ldrb	r2, [r7, #8]
 8003820:	4413      	add	r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	b21a      	sxth	r2, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	801a      	strh	r2, [r3, #0]

  return ret;
 800382a:	68fb      	ldr	r3, [r7, #12]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800383e:	2301      	movs	r3, #1
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	210f      	movs	r1, #15
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fefd 	bl	8003644 <hts221_read_reg>
 800384a:	60f8      	str	r0, [r7, #12]

  return ret;
 800384c:	68fb      	ldr	r3, [r7, #12]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003862:	f107 0208 	add.w	r2, r7, #8
 8003866:	2301      	movs	r3, #1
 8003868:	2120      	movs	r1, #32
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff feea 	bl	8003644 <hts221_read_reg>
 8003870:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10f      	bne.n	8003898 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	b2da      	uxtb	r2, r3
 8003880:	7a3b      	ldrb	r3, [r7, #8]
 8003882:	f362 13c7 	bfi	r3, r2, #7, #1
 8003886:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003888:	f107 0208 	add.w	r2, r7, #8
 800388c:	2301      	movs	r3, #1
 800388e:	2120      	movs	r1, #32
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff feef 	bl	8003674 <hts221_write_reg>
 8003896:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003898:	68fb      	ldr	r3, [r7, #12]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80038ac:	f107 020b 	add.w	r2, r7, #11
 80038b0:	2301      	movs	r3, #1
 80038b2:	2130      	movs	r1, #48	@ 0x30
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fec5 	bl	8003644 <hts221_read_reg>
 80038ba:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80038bc:	7afb      	ldrb	r3, [r7, #11]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fa24 	bl	8000d0c <__aeabi_i2f>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fb26 	bl	8000f1c <__aeabi_fdiv>
 80038d0:	4603      	mov	r3, r0
 80038d2:	461a      	mov	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	601a      	str	r2, [r3, #0]

  return ret;
 80038d8:	68fb      	ldr	r3, [r7, #12]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80038ec:	f107 020b 	add.w	r2, r7, #11
 80038f0:	2301      	movs	r3, #1
 80038f2:	2131      	movs	r1, #49	@ 0x31
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fea5 	bl	8003644 <hts221_read_reg>
 80038fa:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80038fc:	7afb      	ldrb	r3, [r7, #11]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fa04 	bl	8000d0c <__aeabi_i2f>
 8003904:	4603      	mov	r3, r0
 8003906:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd fb06 	bl	8000f1c <__aeabi_fdiv>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	601a      	str	r2, [r3, #0]

  return ret;
 8003918:	68fb      	ldr	r3, [r7, #12]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800392c:	f107 020f 	add.w	r2, r7, #15
 8003930:	2301      	movs	r3, #1
 8003932:	2132      	movs	r1, #50	@ 0x32
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fe85 	bl	8003644 <hts221_read_reg>
 800393a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11d      	bne.n	800397e <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003942:	f107 0210 	add.w	r2, r7, #16
 8003946:	2301      	movs	r3, #1
 8003948:	2135      	movs	r1, #53	@ 0x35
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fe7a 	bl	8003644 <hts221_read_reg>
 8003950:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003952:	7c3b      	ldrb	r3, [r7, #16]
 8003954:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003958:	b2db      	uxtb	r3, r3
 800395a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	4413      	add	r3, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd f9d1 	bl	8000d0c <__aeabi_i2f>
 800396a:	4603      	mov	r3, r0
 800396c:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8003970:	4618      	mov	r0, r3
 8003972:	f7fd fad3 	bl	8000f1c <__aeabi_fdiv>
 8003976:	4603      	mov	r3, r0
 8003978:	461a      	mov	r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800397e:	697b      	ldr	r3, [r7, #20]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003992:	f107 020f 	add.w	r2, r7, #15
 8003996:	2301      	movs	r3, #1
 8003998:	2133      	movs	r1, #51	@ 0x33
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fe52 	bl	8003644 <hts221_read_reg>
 80039a0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11d      	bne.n	80039e4 <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80039a8:	f107 0210 	add.w	r2, r7, #16
 80039ac:	2301      	movs	r3, #1
 80039ae:	2135      	movs	r1, #53	@ 0x35
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff fe47 	bl	8003644 <hts221_read_reg>
 80039b6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80039b8:	7c3b      	ldrb	r3, [r7, #16]
 80039ba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	7bfa      	ldrb	r2, [r7, #15]
 80039c8:	4413      	add	r3, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd f99e 	bl	8000d0c <__aeabi_i2f>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd faa0 	bl	8000f1c <__aeabi_fdiv>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80039e4:	697b      	ldr	r3, [r7, #20]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80039f8:	f107 0208 	add.w	r2, r7, #8
 80039fc:	2302      	movs	r3, #2
 80039fe:	2136      	movs	r1, #54	@ 0x36
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff fe1f 	bl	8003644 <hts221_read_reg>
 8003a06:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003a08:	7a7b      	ldrb	r3, [r7, #9]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	7a3a      	ldrb	r2, [r7, #8]
 8003a10:	4413      	add	r3, r2
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003a16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd f976 	bl	8000d0c <__aeabi_i2f>
 8003a20:	4602      	mov	r2, r0
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]

  return ret;
 8003a26:	68fb      	ldr	r3, [r7, #12]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003a3a:	f107 0208 	add.w	r2, r7, #8
 8003a3e:	2302      	movs	r3, #2
 8003a40:	213a      	movs	r1, #58	@ 0x3a
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fdfe 	bl	8003644 <hts221_read_reg>
 8003a48:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003a4a:	7a7b      	ldrb	r3, [r7, #9]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	7a3a      	ldrb	r2, [r7, #8]
 8003a52:	4413      	add	r3, r2
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003a58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fd f955 	bl	8000d0c <__aeabi_i2f>
 8003a62:	4602      	mov	r2, r0
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	601a      	str	r2, [r3, #0]

  return ret;
 8003a68:	68fb      	ldr	r3, [r7, #12]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003a7c:	f107 0208 	add.w	r2, r7, #8
 8003a80:	2302      	movs	r3, #2
 8003a82:	213c      	movs	r1, #60	@ 0x3c
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fddd 	bl	8003644 <hts221_read_reg>
 8003a8a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003a8c:	7a7b      	ldrb	r3, [r7, #9]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	7a3a      	ldrb	r2, [r7, #8]
 8003a94:	4413      	add	r3, r2
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003a9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd f934 	bl	8000d0c <__aeabi_i2f>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	601a      	str	r2, [r3, #0]

  return ret;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003abe:	f107 0208 	add.w	r2, r7, #8
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	213e      	movs	r1, #62	@ 0x3e
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff fdbc 	bl	8003644 <hts221_read_reg>
 8003acc:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003ace:	7a7b      	ldrb	r3, [r7, #9]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	7a3a      	ldrb	r2, [r7, #8]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003adc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd f913 	bl	8000d0c <__aeabi_i2f>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	601a      	str	r2, [r3, #0]

  return ret;
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e051      	b.n	8003bb8 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	7b1a      	ldrb	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <LIS2DW12_RegisterBusIO+0xcc>)
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc8 <LIS2DW12_RegisterBusIO+0xd0>)
 8003b56:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e020      	b.n	8003bb8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4798      	blx	r3
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e016      	b.n	8003bb8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d112      	bne.n	8003bb8 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8003b9c:	2305      	movs	r3, #5
 8003b9e:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8003ba0:	7afb      	ldrb	r3, [r7, #11]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2121      	movs	r1, #33	@ 0x21
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fcbf 	bl	800452a <LIS2DW12_Write_Reg>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	08004851 	.word	0x08004851
 8003bc8:	08004887 	.word	0x08004887

08003bcc <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3320      	adds	r3, #32
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 f993 	bl	8004f06 <lis2dw12_auto_increment_set>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	e04b      	b.n	8003c84 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3320      	adds	r3, #32
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 f8aa 	bl	8004d4c <lis2dw12_block_data_update_set>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003c02:	e03f      	b.n	8003c84 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3320      	adds	r3, #32
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 f9a1 	bl	8004f52 <lis2dw12_fifo_mode_set>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1a:	e033      	b.n	8003c84 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3320      	adds	r3, #32
 8003c20:	2104      	movs	r1, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fe7a 	bl	800491c <lis2dw12_power_mode_set>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	e027      	b.n	8003c84 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <LIS2DW12_Init+0xc0>)
 8003c38:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3320      	adds	r3, #32
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 ff6b 	bl	8004b2c <lis2dw12_data_rate_set>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c60:	e010      	b.n	8003c84 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3320      	adds	r3, #32
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 f895 	bl	8004d98 <lis2dw12_full_scale_set>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	e004      	b.n	8003c84 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	42c80000 	.word	0x42c80000

08003c90 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f884 	bl	8003da6 <LIS2DW12_ACC_Disable>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca8:	e010      	b.n	8003ccc <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3320      	adds	r3, #32
 8003ce2:	6839      	ldr	r1, [r7, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 f8fd 	bl	8004ee4 <lis2dw12_device_id_get>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf4:	e000      	b.n	8003cf8 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4a06      	ldr	r2, [pc, #24]	@ (8003d58 <LIS2DW12_GetCapabilities+0x58>)
 8003d40:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	44c80000 	.word	0x44c80000

08003d5c <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e015      	b.n	8003d9e <LIS2DW12_ACC_Enable+0x42>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fbec 	bl	8004560 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <LIS2DW12_ACC_Enable+0x38>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8003d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d92:	e004      	b.n	8003d9e <LIS2DW12_ACC_Enable+0x42>
  }

  pObj->acc_is_enabled = 1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e010      	b.n	8003dde <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3320      	adds	r3, #32
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 feb2 	bl	8004b2c <lis2dw12_data_rate_set>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	e004      	b.n	8003dde <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3320      	adds	r3, #32
 8003dfa:	f107 020b 	add.w	r2, r7, #11
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 ffef 	bl	8004de4 <lis2dw12_full_scale_get>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e10:	e080      	b.n	8003f14 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3320      	adds	r3, #32
 8003e16:	f107 020a 	add.w	r2, r7, #10
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fdcb 	bl	80049b8 <lis2dw12_power_mode_get>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2c:	e072      	b.n	8003f14 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003e2e:	7abb      	ldrb	r3, [r7, #10]
 8003e30:	2b1b      	cmp	r3, #27
 8003e32:	bf8c      	ite	hi
 8003e34:	2201      	movhi	r2, #1
 8003e36:	2200      	movls	r2, #0
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	2a00      	cmp	r2, #0
 8003e3c:	d162      	bne.n	8003f04 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003e3e:	2201      	movs	r2, #1
 8003e40:	409a      	lsls	r2, r3
 8003e42:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003e46:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf14      	ite	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	2300      	moveq	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d12f      	bne.n	8003eb8 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003e58:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d04c      	beq.n	8003f04 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d81b      	bhi.n	8003ea8 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003e70:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003e91 	.word	0x08003e91
 8003e80:	08003e99 	.word	0x08003e99
 8003e84:	08003ea1 	.word	0x08003ea1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	4a24      	ldr	r2, [pc, #144]	@ (8003f1c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003e8c:	601a      	str	r2, [r3, #0]
          break;
 8003e8e:	e012      	b.n	8003eb6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4a23      	ldr	r2, [pc, #140]	@ (8003f20 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003e94:	601a      	str	r2, [r3, #0]
          break;
 8003e96:	e00e      	b.n	8003eb6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	4a22      	ldr	r2, [pc, #136]	@ (8003f24 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003e9c:	601a      	str	r2, [r3, #0]
          break;
 8003e9e:	e00a      	b.n	8003eb6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	@ (8003f28 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003ea4:	601a      	str	r2, [r3, #0]
          break;
 8003ea6:	e006      	b.n	8003eb6 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	4a20      	ldr	r2, [pc, #128]	@ (8003f2c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003eac:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	60fb      	str	r3, [r7, #12]
          break;
 8003eb4:	bf00      	nop
      }
      break;
 8003eb6:	e02c      	b.n	8003f12 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d81a      	bhi.n	8003ef4 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec4 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003edd 	.word	0x08003edd
 8003ecc:	08003ee5 	.word	0x08003ee5
 8003ed0:	08003eed 	.word	0x08003eed
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4a16      	ldr	r2, [pc, #88]	@ (8003f30 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003ed8:	601a      	str	r2, [r3, #0]
          break;
 8003eda:	e012      	b.n	8003f02 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4a15      	ldr	r2, [pc, #84]	@ (8003f34 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003ee0:	601a      	str	r2, [r3, #0]
          break;
 8003ee2:	e00e      	b.n	8003f02 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8003f1c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003ee8:	601a      	str	r2, [r3, #0]
          break;
 8003eea:	e00a      	b.n	8003f02 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	4a0c      	ldr	r2, [pc, #48]	@ (8003f20 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003ef0:	601a      	str	r2, [r3, #0]
          break;
 8003ef2:	e006      	b.n	8003f02 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8003f2c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003ef8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	60fb      	str	r3, [r7, #12]
          break;
 8003f00:	bf00      	nop
      }
      break;
 8003f02:	e006      	b.n	8003f12 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	4a09      	ldr	r2, [pc, #36]	@ (8003f2c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003f08:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	60fb      	str	r3, [r7, #12]
      break;
 8003f10:	bf00      	nop
  }

  return ret;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	3f79db23 	.word	0x3f79db23
 8003f20:	3ff9db23 	.word	0x3ff9db23
 8003f24:	4079db23 	.word	0x4079db23
 8003f28:	40f9db23 	.word	0x40f9db23
 8003f2c:	bf800000 	.word	0xbf800000
 8003f30:	3e79db23 	.word	0x3e79db23
 8003f34:	3ef9db23 	.word	0x3ef9db23

08003f38 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3320      	adds	r3, #32
 8003f4a:	f107 020b 	add.w	r2, r7, #11
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fe31 	bl	8004bb8 <lis2dw12_data_rate_get>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f60:	e14f      	b.n	8004202 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3320      	adds	r3, #32
 8003f66:	f107 020a 	add.w	r2, r7, #10
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fd23 	bl	80049b8 <lis2dw12_power_mode_get>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	e141      	b.n	8004202 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	2b32      	cmp	r3, #50	@ 0x32
 8003f82:	f200 8136 	bhi.w	80041f2 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003f86:	a201      	add	r2, pc, #4	@ (adr r2, 8003f8c <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08004059 	.word	0x08004059
 8003f90:	08004063 	.word	0x08004063
 8003f94:	080040bd 	.word	0x080040bd
 8003f98:	080040c5 	.word	0x080040c5
 8003f9c:	080040cd 	.word	0x080040cd
 8003fa0:	080040d5 	.word	0x080040d5
 8003fa4:	080040dd 	.word	0x080040dd
 8003fa8:	080040e5 	.word	0x080040e5
 8003fac:	0800413f 	.word	0x0800413f
 8003fb0:	08004199 	.word	0x08004199
 8003fb4:	080041f3 	.word	0x080041f3
 8003fb8:	080041f3 	.word	0x080041f3
 8003fbc:	080041f3 	.word	0x080041f3
 8003fc0:	080041f3 	.word	0x080041f3
 8003fc4:	080041f3 	.word	0x080041f3
 8003fc8:	080041f3 	.word	0x080041f3
 8003fcc:	080041f3 	.word	0x080041f3
 8003fd0:	080041f3 	.word	0x080041f3
 8003fd4:	08004059 	.word	0x08004059
 8003fd8:	080041f3 	.word	0x080041f3
 8003fdc:	080041f3 	.word	0x080041f3
 8003fe0:	080041f3 	.word	0x080041f3
 8003fe4:	080041f3 	.word	0x080041f3
 8003fe8:	080041f3 	.word	0x080041f3
 8003fec:	080041f3 	.word	0x080041f3
 8003ff0:	080041f3 	.word	0x080041f3
 8003ff4:	080041f3 	.word	0x080041f3
 8003ff8:	080041f3 	.word	0x080041f3
 8003ffc:	080041f3 	.word	0x080041f3
 8004000:	080041f3 	.word	0x080041f3
 8004004:	080041f3 	.word	0x080041f3
 8004008:	080041f3 	.word	0x080041f3
 800400c:	080041f3 	.word	0x080041f3
 8004010:	080041f3 	.word	0x080041f3
 8004014:	080041f3 	.word	0x080041f3
 8004018:	080041f3 	.word	0x080041f3
 800401c:	080041f3 	.word	0x080041f3
 8004020:	080041f3 	.word	0x080041f3
 8004024:	080041f3 	.word	0x080041f3
 8004028:	080041f3 	.word	0x080041f3
 800402c:	080041f3 	.word	0x080041f3
 8004030:	080041f3 	.word	0x080041f3
 8004034:	080041f3 	.word	0x080041f3
 8004038:	080041f3 	.word	0x080041f3
 800403c:	080041f3 	.word	0x080041f3
 8004040:	080041f3 	.word	0x080041f3
 8004044:	080041f3 	.word	0x080041f3
 8004048:	080041f3 	.word	0x080041f3
 800404c:	080041f3 	.word	0x080041f3
 8004050:	080041f3 	.word	0x080041f3
 8004054:	08004059 	.word	0x08004059
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
      break;
 8004060:	e0ce      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8004062:	7abb      	ldrb	r3, [r7, #10]
 8004064:	2b1b      	cmp	r3, #27
 8004066:	bf8c      	ite	hi
 8004068:	2201      	movhi	r2, #1
 800406a:	2200      	movls	r2, #0
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	2a00      	cmp	r2, #0
 8004070:	d11c      	bne.n	80040ac <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8004072:	2201      	movs	r2, #1
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800407c:	2a00      	cmp	r2, #0
 800407e:	bf14      	ite	ne
 8004080:	2201      	movne	r2, #1
 8004082:	2200      	moveq	r2, #0
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	2a00      	cmp	r2, #0
 8004088:	d10c      	bne.n	80040a4 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 800408a:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf14      	ite	ne
 8004092:	2301      	movne	r3, #1
 8004094:	2300      	moveq	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4a5b      	ldr	r2, [pc, #364]	@ (800420c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80040a0:	601a      	str	r2, [r3, #0]
          break;
 80040a2:	e00a      	b.n	80040ba <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004210 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 80040a8:	601a      	str	r2, [r3, #0]
          break;
 80040aa:	e006      	b.n	80040ba <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4a59      	ldr	r2, [pc, #356]	@ (8004214 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80040b0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	60fb      	str	r3, [r7, #12]
          break;
 80040b8:	bf00      	nop
      }
      break;
 80040ba:	e0a1      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4a53      	ldr	r2, [pc, #332]	@ (800420c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80040c0:	601a      	str	r2, [r3, #0]
      break;
 80040c2:	e09d      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4a54      	ldr	r2, [pc, #336]	@ (8004218 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 80040c8:	601a      	str	r2, [r3, #0]
      break;
 80040ca:	e099      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4a53      	ldr	r2, [pc, #332]	@ (800421c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 80040d0:	601a      	str	r2, [r3, #0]
      break;
 80040d2:	e095      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4a52      	ldr	r2, [pc, #328]	@ (8004220 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 80040d8:	601a      	str	r2, [r3, #0]
      break;
 80040da:	e091      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4a51      	ldr	r2, [pc, #324]	@ (8004224 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80040e0:	601a      	str	r2, [r3, #0]
      break;
 80040e2:	e08d      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80040e4:	7abb      	ldrb	r3, [r7, #10]
 80040e6:	2b1b      	cmp	r3, #27
 80040e8:	bf8c      	ite	hi
 80040ea:	2201      	movhi	r2, #1
 80040ec:	2200      	movls	r2, #0
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	2a00      	cmp	r2, #0
 80040f2:	d11c      	bne.n	800412e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 80040f4:	2201      	movs	r2, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80040fe:	2a00      	cmp	r2, #0
 8004100:	bf14      	ite	ne
 8004102:	2201      	movne	r2, #1
 8004104:	2200      	moveq	r2, #0
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	2a00      	cmp	r2, #0
 800410a:	d10c      	bne.n	8004126 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 800410c:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	4a41      	ldr	r2, [pc, #260]	@ (8004228 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8004122:	601a      	str	r2, [r3, #0]
          break;
 8004124:	e00a      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	4a3e      	ldr	r2, [pc, #248]	@ (8004224 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800412a:	601a      	str	r2, [r3, #0]
          break;
 800412c:	e006      	b.n	800413c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	4a38      	ldr	r2, [pc, #224]	@ (8004214 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004132:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
 8004138:	60fb      	str	r3, [r7, #12]
          break;
 800413a:	bf00      	nop
      }
      break;
 800413c:	e060      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800413e:	7abb      	ldrb	r3, [r7, #10]
 8004140:	2b1b      	cmp	r3, #27
 8004142:	bf8c      	ite	hi
 8004144:	2201      	movhi	r2, #1
 8004146:	2200      	movls	r2, #0
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	2a00      	cmp	r2, #0
 800414c:	d11c      	bne.n	8004188 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 800414e:	2201      	movs	r2, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8004158:	2a00      	cmp	r2, #0
 800415a:	bf14      	ite	ne
 800415c:	2201      	movne	r2, #1
 800415e:	2200      	moveq	r2, #0
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	2a00      	cmp	r2, #0
 8004164:	d10c      	bne.n	8004180 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8004166:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	4a2c      	ldr	r2, [pc, #176]	@ (800422c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 800417c:	601a      	str	r2, [r3, #0]
          break;
 800417e:	e00a      	b.n	8004196 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	4a28      	ldr	r2, [pc, #160]	@ (8004224 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8004184:	601a      	str	r2, [r3, #0]
          break;
 8004186:	e006      	b.n	8004196 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4a22      	ldr	r2, [pc, #136]	@ (8004214 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800418c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800418e:	f04f 33ff 	mov.w	r3, #4294967295
 8004192:	60fb      	str	r3, [r7, #12]
          break;
 8004194:	bf00      	nop
      }
      break;
 8004196:	e033      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8004198:	7abb      	ldrb	r3, [r7, #10]
 800419a:	2b1b      	cmp	r3, #27
 800419c:	bf8c      	ite	hi
 800419e:	2201      	movhi	r2, #1
 80041a0:	2200      	movls	r2, #0
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	2a00      	cmp	r2, #0
 80041a6:	d11c      	bne.n	80041e2 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80041a8:	2201      	movs	r2, #1
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2201      	movne	r2, #1
 80041b8:	2200      	moveq	r2, #0
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	2a00      	cmp	r2, #0
 80041be:	d10c      	bne.n	80041da <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 80041c0:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	4a16      	ldr	r2, [pc, #88]	@ (8004230 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 80041d6:	601a      	str	r2, [r3, #0]
          break;
 80041d8:	e00a      	b.n	80041f0 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	4a11      	ldr	r2, [pc, #68]	@ (8004224 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80041de:	601a      	str	r2, [r3, #0]
          break;
 80041e0:	e006      	b.n	80041f0 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004214 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80041e6:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ec:	60fb      	str	r3, [r7, #12]
          break;
 80041ee:	bf00      	nop
      }
      break;
 80041f0:	e006      	b.n	8004200 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	4a07      	ldr	r2, [pc, #28]	@ (8004214 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80041f6:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
 80041fc:	60fb      	str	r3, [r7, #12]
      break;
 80041fe:	bf00      	nop
  }

  return ret;
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	41480000 	.word	0x41480000
 8004210:	3fcccccd 	.word	0x3fcccccd
 8004214:	bf800000 	.word	0xbf800000
 8004218:	41c80000 	.word	0x41c80000
 800421c:	42480000 	.word	0x42480000
 8004220:	42c80000 	.word	0x42c80000
 8004224:	43480000 	.word	0x43480000
 8004228:	43c80000 	.word	0x43c80000
 800422c:	44480000 	.word	0x44480000
 8004230:	44c80000 	.word	0x44c80000

08004234 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800423e:	2300      	movs	r3, #0
 8004240:	2200      	movs	r2, #0
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f805 	bl	8004254 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800424a:	4603      	mov	r3, r0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	460b      	mov	r3, r1
 8004264:	71fb      	strb	r3, [r7, #7]
 8004266:	4613      	mov	r3, r2
 8004268:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x30>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8004274:	79bb      	ldrb	r3, [r7, #6]
 8004276:	79fa      	ldrb	r2, [r7, #7]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f970 	bl	8004560 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8004280:	4603      	mov	r3, r0
 8004282:	e006      	b.n	8004292 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x3e>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8004284:	79bb      	ldrb	r3, [r7, #6]
 8004286:	79fa      	ldrb	r2, [r7, #7]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fa6a 	bl	8004764 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8004290:	4603      	mov	r3, r0
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3320      	adds	r3, #32
 80042ae:	f107 020b 	add.w	r2, r7, #11
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fd95 	bl	8004de4 <lis2dw12_full_scale_get>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80042c0:	f04f 33ff 	mov.w	r3, #4294967295
 80042c4:	e027      	b.n	8004316 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80042c6:	7afb      	ldrb	r3, [r7, #11]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d81b      	bhi.n	8004304 <LIS2DW12_ACC_GetFullScale+0x68>
 80042cc:	a201      	add	r2, pc, #4	@ (adr r2, 80042d4 <LIS2DW12_ACC_GetFullScale+0x38>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042ed 	.word	0x080042ed
 80042dc:	080042f5 	.word	0x080042f5
 80042e0:	080042fd 	.word	0x080042fd
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2202      	movs	r2, #2
 80042e8:	601a      	str	r2, [r3, #0]
      break;
 80042ea:	e013      	b.n	8004314 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2204      	movs	r2, #4
 80042f0:	601a      	str	r2, [r3, #0]
      break;
 80042f2:	e00f      	b.n	8004314 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2208      	movs	r2, #8
 80042f8:	601a      	str	r2, [r3, #0]
      break;
 80042fa:	e00b      	b.n	8004314 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2210      	movs	r2, #16
 8004300:	601a      	str	r2, [r3, #0]
      break;
 8004302:	e007      	b.n	8004314 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f04f 32ff 	mov.w	r2, #4294967295
 800430a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800430c:	f04f 33ff 	mov.w	r3, #4294967295
 8004310:	60fb      	str	r3, [r7, #12]
      break;
 8004312:	bf00      	nop
  }

  return ret;
 8004314:	68fb      	ldr	r3, [r7, #12]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop

08004320 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b02      	cmp	r3, #2
 800432e:	dd0b      	ble.n	8004348 <LIS2DW12_ACC_SetFullScale+0x28>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b04      	cmp	r3, #4
 8004334:	dd06      	ble.n	8004344 <LIS2DW12_ACC_SetFullScale+0x24>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	dc01      	bgt.n	8004340 <LIS2DW12_ACC_SetFullScale+0x20>
 800433c:	2302      	movs	r3, #2
 800433e:	e004      	b.n	800434a <LIS2DW12_ACC_SetFullScale+0x2a>
 8004340:	2303      	movs	r3, #3
 8004342:	e002      	b.n	800434a <LIS2DW12_ACC_SetFullScale+0x2a>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <LIS2DW12_ACC_SetFullScale+0x2a>
 8004348:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800434a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3320      	adds	r3, #32
 8004350:	7bfa      	ldrb	r2, [r7, #15]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fd1f 	bl	8004d98 <lis2dw12_full_scale_set>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8004360:	f04f 33ff 	mov.w	r3, #4294967295
 8004364:	e000      	b.n	8004368 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3320      	adds	r3, #32
 8004382:	f107 020b 	add.w	r2, r7, #11
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fb15 	bl	80049b8 <lis2dw12_power_mode_get>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8004394:	f04f 33ff 	mov.w	r3, #4294967295
 8004398:	e068      	b.n	800446c <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3320      	adds	r3, #32
 800439e:	f107 020c 	add.w	r2, r7, #12
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fd55 	bl	8004e54 <lis2dw12_acceleration_raw_get>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
 80043b4:	e05a      	b.n	800446c <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 80043b6:	7afb      	ldrb	r3, [r7, #11]
 80043b8:	2b1b      	cmp	r3, #27
 80043ba:	bf8c      	ite	hi
 80043bc:	2201      	movhi	r2, #1
 80043be:	2200      	movls	r2, #0
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	d14d      	bne.n	8004462 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 80043ce:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d124      	bne.n	800442a <LIS2DW12_ACC_GetAxesRaw+0xba>
 80043e0:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d037      	beq.n	8004462 <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80043f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da00      	bge.n	80043fc <LIS2DW12_ACC_GetAxesRaw+0x8c>
 80043fa:	330f      	adds	r3, #15
 80043fc:	111b      	asrs	r3, r3, #4
 80043fe:	b21a      	sxth	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8004404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004408:	2b00      	cmp	r3, #0
 800440a:	da00      	bge.n	800440e <LIS2DW12_ACC_GetAxesRaw+0x9e>
 800440c:	330f      	adds	r3, #15
 800440e:	111b      	asrs	r3, r3, #4
 8004410:	b21a      	sxth	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8004416:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	da00      	bge.n	8004420 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 800441e:	330f      	adds	r3, #15
 8004420:	111b      	asrs	r3, r3, #4
 8004422:	b21a      	sxth	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	809a      	strh	r2, [r3, #4]
      break;
 8004428:	e01f      	b.n	800446a <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 800442a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	da00      	bge.n	8004434 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 8004432:	3303      	adds	r3, #3
 8004434:	109b      	asrs	r3, r3, #2
 8004436:	b21a      	sxth	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 800443c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004440:	2b00      	cmp	r3, #0
 8004442:	da00      	bge.n	8004446 <LIS2DW12_ACC_GetAxesRaw+0xd6>
 8004444:	3303      	adds	r3, #3
 8004446:	109b      	asrs	r3, r3, #2
 8004448:	b21a      	sxth	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 800444e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	da00      	bge.n	8004458 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 8004456:	3303      	adds	r3, #3
 8004458:	109b      	asrs	r3, r3, #2
 800445a:	b21a      	sxth	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	809a      	strh	r2, [r3, #4]
      break;
 8004460:	e003      	b.n	800446a <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	617b      	str	r3, [r7, #20]
      break;
 8004468:	bf00      	nop
  }

  return ret;
 800446a:	697b      	ldr	r3, [r7, #20]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8004484:	f107 0310 	add.w	r3, r7, #16
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff ff70 	bl	8004370 <LIS2DW12_ACC_GetAxesRaw>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295
 800449a:	e042      	b.n	8004522 <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 800449c:	f107 030c 	add.w	r3, r7, #12
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff fca0 	bl	8003de8 <LIS2DW12_ACC_GetSensitivity>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	e036      	b.n	8004522 <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80044b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc fc27 	bl	8000d0c <__aeabi_i2f>
 80044be:	4602      	mov	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f7fc fc75 	bl	8000db4 <__aeabi_fmul>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc fe37 	bl	8001140 <__aeabi_f2iz>
 80044d2:	4602      	mov	r2, r0
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80044d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc fc15 	bl	8000d0c <__aeabi_i2f>
 80044e2:	4602      	mov	r2, r0
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f7fc fc63 	bl	8000db4 <__aeabi_fmul>
 80044ee:	4603      	mov	r3, r0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fc fe25 	bl	8001140 <__aeabi_f2iz>
 80044f6:	4602      	mov	r2, r0
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80044fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc fc03 	bl	8000d0c <__aeabi_i2f>
 8004506:	4602      	mov	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f7fc fc51 	bl	8000db4 <__aeabi_fmul>
 8004512:	4603      	mov	r3, r0
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc fe13 	bl	8001140 <__aeabi_f2iz>
 800451a:	4602      	mov	r2, r0
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	70fb      	strb	r3, [r7, #3]
 8004536:	4613      	mov	r3, r2
 8004538:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f103 0020 	add.w	r0, r3, #32
 8004540:	1cba      	adds	r2, r7, #2
 8004542:	78f9      	ldrb	r1, [r7, #3]
 8004544:	2301      	movs	r3, #1
 8004546:	f000 f9d1 	bl	80048ec <lis2dw12_write_reg>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8004550:	f04f 33ff 	mov.w	r3, #4294967295
 8004554:	e000      	b.n	8004558 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4611      	mov	r1, r2
 800456c:	461a      	mov	r2, r3
 800456e:	460b      	mov	r3, r1
 8004570:	71fb      	strb	r3, [r7, #7]
 8004572:	4613      	mov	r3, r2
 8004574:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	3b01      	subs	r3, #1
 800457a:	2b03      	cmp	r3, #3
 800457c:	d80a      	bhi.n	8004594 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 800457e:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	080045bd 	.word	0x080045bd
 8004588:	080045e5 	.word	0x080045e5
 800458c:	0800460d 	.word	0x0800460d
 8004590:	08004635 	.word	0x08004635
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8004594:	79bb      	ldrb	r3, [r7, #6]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d002      	beq.n	80045a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 800459a:	2304      	movs	r3, #4
 800459c:	75fb      	strb	r3, [r7, #23]
          break;
 800459e:	e002      	b.n	80045a6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80045a0:	2314      	movs	r3, #20
 80045a2:	75fb      	strb	r3, [r7, #23]
          break;
 80045a4:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80045a6:	4967      	ldr	r1, [pc, #412]	@ (8004744 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	f7fc fda1 	bl	80010f0 <__aeabi_fcmplt>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d100      	bne.n	80045b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x56>
      {
        Odr = 12.5f;
      }
      break;
 80045b4:	e052      	b.n	800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 12.5f;
 80045b6:	4b63      	ldr	r3, [pc, #396]	@ (8004744 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 80045b8:	60bb      	str	r3, [r7, #8]
      break;
 80045ba:	e04f      	b.n	800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80045bc:	79bb      	ldrb	r3, [r7, #6]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d002      	beq.n	80045c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x68>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80045c2:	2303      	movs	r3, #3
 80045c4:	75fb      	strb	r3, [r7, #23]
          break;
 80045c6:	e002      	b.n	80045ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80045c8:	2313      	movs	r3, #19
 80045ca:	75fb      	strb	r3, [r7, #23]
          break;
 80045cc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80045ce:	495e      	ldr	r1, [pc, #376]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80045d0:	68b8      	ldr	r0, [r7, #8]
 80045d2:	f7fc fdab 	bl	800112c <__aeabi_fcmpgt>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d100      	bne.n	80045de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x7e>
      {
        Odr = 200.0f;
      }
      break;
 80045dc:	e03e      	b.n	800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 80045de:	4b5a      	ldr	r3, [pc, #360]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80045e0:	60bb      	str	r3, [r7, #8]
      break;
 80045e2:	e03b      	b.n	800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80045e4:	79bb      	ldrb	r3, [r7, #6]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d002      	beq.n	80045f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x90>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80045ea:	2302      	movs	r3, #2
 80045ec:	75fb      	strb	r3, [r7, #23]
          break;
 80045ee:	e002      	b.n	80045f6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x96>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80045f0:	2312      	movs	r3, #18
 80045f2:	75fb      	strb	r3, [r7, #23]
          break;
 80045f4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80045f6:	4954      	ldr	r1, [pc, #336]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80045f8:	68b8      	ldr	r0, [r7, #8]
 80045fa:	f7fc fd97 	bl	800112c <__aeabi_fcmpgt>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d100      	bne.n	8004606 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xa6>
      {
        Odr = 200.0f;
      }
      break;
 8004604:	e02a      	b.n	800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 8004606:	4b50      	ldr	r3, [pc, #320]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004608:	60bb      	str	r3, [r7, #8]
      break;
 800460a:	e027      	b.n	800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 800460c:	79bb      	ldrb	r3, [r7, #6]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d002      	beq.n	8004618 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb8>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
          break;
 8004616:	e002      	b.n	800461e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xbe>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004618:	2311      	movs	r3, #17
 800461a:	75fb      	strb	r3, [r7, #23]
          break;
 800461c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800461e:	494a      	ldr	r1, [pc, #296]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004620:	68b8      	ldr	r0, [r7, #8]
 8004622:	f7fc fd83 	bl	800112c <__aeabi_fcmpgt>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d100      	bne.n	800462e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xce>
      {
        Odr = 200.0f;
      }
      break;
 800462c:	e016      	b.n	800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 800462e:	4b46      	ldr	r3, [pc, #280]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004630:	60bb      	str	r3, [r7, #8]
      break;
 8004632:	e013      	b.n	800465c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8004634:	79bb      	ldrb	r3, [r7, #6]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d002      	beq.n	8004640 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]
          break;
 800463e:	e002      	b.n	8004646 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004640:	2310      	movs	r3, #16
 8004642:	75fb      	strb	r3, [r7, #23]
          break;
 8004644:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004646:	4940      	ldr	r1, [pc, #256]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004648:	68b8      	ldr	r0, [r7, #8]
 800464a:	f7fc fd6f 	bl	800112c <__aeabi_fcmpgt>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d100      	bne.n	8004656 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
      {
        Odr = 200.0f;
      }
      break;
 8004654:	e001      	b.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfa>
        Odr = 200.0f;
 8004656:	4b3c      	ldr	r3, [pc, #240]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004658:	60bb      	str	r3, [r7, #8]
      break;
 800465a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800465c:	493b      	ldr	r1, [pc, #236]	@ (800474c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1ec>)
 800465e:	68b8      	ldr	r0, [r7, #8]
 8004660:	f7fc fd50 	bl	8001104 <__aeabi_fcmple>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
 800466a:	2301      	movs	r3, #1
 800466c:	e03f      	b.n	80046ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800466e:	4935      	ldr	r1, [pc, #212]	@ (8004744 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 8004670:	68b8      	ldr	r0, [r7, #8]
 8004672:	f7fc fd47 	bl	8001104 <__aeabi_fcmple>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
 800467c:	2302      	movs	r3, #2
 800467e:	e036      	b.n	80046ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004680:	4933      	ldr	r1, [pc, #204]	@ (8004750 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 8004682:	68b8      	ldr	r0, [r7, #8]
 8004684:	f7fc fd3e 	bl	8001104 <__aeabi_fcmple>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x132>
 800468e:	2303      	movs	r3, #3
 8004690:	e02d      	b.n	80046ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004692:	4930      	ldr	r1, [pc, #192]	@ (8004754 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f4>)
 8004694:	68b8      	ldr	r0, [r7, #8]
 8004696:	f7fc fd35 	bl	8001104 <__aeabi_fcmple>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x144>
 80046a0:	2304      	movs	r3, #4
 80046a2:	e024      	b.n	80046ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80046a4:	492c      	ldr	r1, [pc, #176]	@ (8004758 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>)
 80046a6:	68b8      	ldr	r0, [r7, #8]
 80046a8:	f7fc fd2c 	bl	8001104 <__aeabi_fcmple>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x156>
 80046b2:	2305      	movs	r3, #5
 80046b4:	e01b      	b.n	80046ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80046b6:	4924      	ldr	r1, [pc, #144]	@ (8004748 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	f7fc fd23 	bl	8001104 <__aeabi_fcmple>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80046c4:	2306      	movs	r3, #6
 80046c6:	e012      	b.n	80046ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80046c8:	4924      	ldr	r1, [pc, #144]	@ (800475c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fc>)
 80046ca:	68b8      	ldr	r0, [r7, #8]
 80046cc:	f7fc fd1a 	bl	8001104 <__aeabi_fcmple>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17a>
 80046d6:	2307      	movs	r3, #7
 80046d8:	e009      	b.n	80046ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80046da:	4921      	ldr	r1, [pc, #132]	@ (8004760 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x200>)
 80046dc:	68b8      	ldr	r0, [r7, #8]
 80046de:	f7fc fd11 	bl	8001104 <__aeabi_fcmple>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18c>
 80046e8:	2308      	movs	r3, #8
 80046ea:	e000      	b.n	80046ee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80046ec:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80046ee:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3320      	adds	r3, #32
 80046f4:	7dba      	ldrb	r2, [r7, #22]
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fa17 	bl	8004b2c <lis2dw12_data_rate_set>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
  {
    return LIS2DW12_ERROR;
 8004704:	f04f 33ff 	mov.w	r3, #4294967295
 8004708:	e018      	b.n	800473c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3320      	adds	r3, #32
 800470e:	7dfa      	ldrb	r2, [r7, #23]
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f902 	bl	800491c <lis2dw12_power_mode_set>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
  {
    return LIS2DW12_ERROR;
 800471e:	f04f 33ff 	mov.w	r3, #4294967295
 8004722:	e00b      	b.n	800473c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	79fa      	ldrb	r2, [r7, #7]
 800472e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	79ba      	ldrb	r2, [r7, #6]
 8004736:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	41480000 	.word	0x41480000
 8004748:	43480000 	.word	0x43480000
 800474c:	3fcccccd 	.word	0x3fcccccd
 8004750:	41c80000 	.word	0x41c80000
 8004754:	42480000 	.word	0x42480000
 8004758:	42c80000 	.word	0x42c80000
 800475c:	43c80000 	.word	0x43c80000
 8004760:	44480000 	.word	0x44480000

08004764 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	4611      	mov	r1, r2
 8004770:	461a      	mov	r2, r3
 8004772:	460b      	mov	r3, r1
 8004774:	71fb      	strb	r3, [r7, #7]
 8004776:	4613      	mov	r3, r2
 8004778:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	79fa      	ldrb	r2, [r7, #7]
 800477e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	79ba      	ldrb	r2, [r7, #6]
 8004786:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 800478a:	4928      	ldr	r1, [pc, #160]	@ (800482c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 800478c:	68b8      	ldr	r0, [r7, #8]
 800478e:	f7fc fcb9 	bl	8001104 <__aeabi_fcmple>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004798:	4b24      	ldr	r3, [pc, #144]	@ (800482c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 800479a:	e03f      	b.n	800481c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   25.0f) ?   25.0f
 800479c:	4924      	ldr	r1, [pc, #144]	@ (8004830 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 800479e:	68b8      	ldr	r0, [r7, #8]
 80047a0:	f7fc fcb0 	bl	8001104 <__aeabi_fcmple>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x4a>
 80047aa:	4b21      	ldr	r3, [pc, #132]	@ (8004830 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80047ac:	e036      	b.n	800481c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   50.0f) ?   50.0f
 80047ae:	4921      	ldr	r1, [pc, #132]	@ (8004834 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80047b0:	68b8      	ldr	r0, [r7, #8]
 80047b2:	f7fc fca7 	bl	8001104 <__aeabi_fcmple>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x5c>
 80047bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004834 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80047be:	e02d      	b.n	800481c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  100.0f) ?  100.0f
 80047c0:	491d      	ldr	r1, [pc, #116]	@ (8004838 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 80047c2:	68b8      	ldr	r0, [r7, #8]
 80047c4:	f7fc fc9e 	bl	8001104 <__aeabi_fcmple>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 80047ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004838 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 80047d0:	e024      	b.n	800481c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  200.0f) ?  200.0f
 80047d2:	491a      	ldr	r1, [pc, #104]	@ (800483c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 80047d4:	68b8      	ldr	r0, [r7, #8]
 80047d6:	f7fc fc95 	bl	8001104 <__aeabi_fcmple>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
 80047e0:	4b16      	ldr	r3, [pc, #88]	@ (800483c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 80047e2:	e01b      	b.n	800481c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  400.0f) ?  400.0f
 80047e4:	4916      	ldr	r1, [pc, #88]	@ (8004840 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 80047e6:	68b8      	ldr	r0, [r7, #8]
 80047e8:	f7fc fc8c 	bl	8001104 <__aeabi_fcmple>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80047f2:	4b13      	ldr	r3, [pc, #76]	@ (8004840 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 80047f4:	e012      	b.n	800481c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  800.0f) ?  800.0f
 80047f6:	4913      	ldr	r1, [pc, #76]	@ (8004844 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 80047f8:	68b8      	ldr	r0, [r7, #8]
 80047fa:	f7fc fc83 	bl	8001104 <__aeabi_fcmple>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8004804:	4b0f      	ldr	r3, [pc, #60]	@ (8004844 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8004806:	e009      	b.n	800481c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  :                    1600.0f;
 8004808:	490f      	ldr	r1, [pc, #60]	@ (8004848 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 800480a:	68b8      	ldr	r0, [r7, #8]
 800480c:	f7fc fc7a 	bl	8001104 <__aeabi_fcmple>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb6>
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8004818:	e000      	b.n	800481c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
 800481a:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	3fcccccd 	.word	0x3fcccccd
 8004830:	41480000 	.word	0x41480000
 8004834:	41c80000 	.word	0x41c80000
 8004838:	42480000 	.word	0x42480000
 800483c:	42c80000 	.word	0x42c80000
 8004840:	43480000 	.word	0x43480000
 8004844:	43c80000 	.word	0x43c80000
 8004848:	44480000 	.word	0x44480000
 800484c:	44c80000 	.word	0x44c80000

08004850 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	461a      	mov	r2, r3
 800485c:	460b      	mov	r3, r1
 800485e:	72fb      	strb	r3, [r7, #11]
 8004860:	4613      	mov	r3, r2
 8004862:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	695c      	ldr	r4, [r3, #20]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	7b1b      	ldrb	r3, [r3, #12]
 8004870:	4618      	mov	r0, r3
 8004872:	7afb      	ldrb	r3, [r7, #11]
 8004874:	b299      	uxth	r1, r3
 8004876:	893b      	ldrh	r3, [r7, #8]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	47a0      	blx	r4
 800487c:	4603      	mov	r3, r0
}
 800487e:	4618      	mov	r0, r3
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	bd90      	pop	{r4, r7, pc}

08004886 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004886:	b590      	push	{r4, r7, lr}
 8004888:	b087      	sub	sp, #28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	461a      	mov	r2, r3
 8004892:	460b      	mov	r3, r1
 8004894:	72fb      	strb	r3, [r7, #11]
 8004896:	4613      	mov	r3, r2
 8004898:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	691c      	ldr	r4, [r3, #16]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	7b1b      	ldrb	r3, [r3, #12]
 80048a6:	4618      	mov	r0, r3
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	b299      	uxth	r1, r3
 80048ac:	893b      	ldrh	r3, [r7, #8]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	47a0      	blx	r4
 80048b2:	4603      	mov	r3, r0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}

080048bc <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	461a      	mov	r2, r3
 80048c8:	460b      	mov	r3, r1
 80048ca:	72fb      	strb	r3, [r7, #11]
 80048cc:	4613      	mov	r3, r2
 80048ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685c      	ldr	r4, [r3, #4]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68d8      	ldr	r0, [r3, #12]
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	7af9      	ldrb	r1, [r7, #11]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	47a0      	blx	r4
 80048e0:	6178      	str	r0, [r7, #20]

  return ret;
 80048e2:	697b      	ldr	r3, [r7, #20]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd90      	pop	{r4, r7, pc}

080048ec <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	461a      	mov	r2, r3
 80048f8:	460b      	mov	r3, r1
 80048fa:	72fb      	strb	r3, [r7, #11]
 80048fc:	4613      	mov	r3, r2
 80048fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681c      	ldr	r4, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68d8      	ldr	r0, [r3, #12]
 8004908:	893b      	ldrh	r3, [r7, #8]
 800490a:	7af9      	ldrb	r1, [r7, #11]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	47a0      	blx	r4
 8004910:	6178      	str	r0, [r7, #20]

  return ret;
 8004912:	697b      	ldr	r3, [r7, #20]
}
 8004914:	4618      	mov	r0, r3
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}

0800491c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004928:	f107 0210 	add.w	r2, r7, #16
 800492c:	2301      	movs	r3, #1
 800492e:	2120      	movs	r1, #32
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff ffc3 	bl	80048bc <lis2dw12_read_reg>
 8004936:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d118      	bne.n	8004970 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	b2da      	uxtb	r2, r3
 8004948:	7c3b      	ldrb	r3, [r7, #16]
 800494a:	f362 0383 	bfi	r3, r2, #2, #2
 800494e:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	b2da      	uxtb	r2, r3
 8004958:	7c3b      	ldrb	r3, [r7, #16]
 800495a:	f362 0301 	bfi	r3, r2, #0, #2
 800495e:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004960:	f107 0210 	add.w	r2, r7, #16
 8004964:	2301      	movs	r3, #1
 8004966:	2120      	movs	r1, #32
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ffbf 	bl	80048ec <lis2dw12_write_reg>
 800496e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d107      	bne.n	8004986 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004976:	f107 020c 	add.w	r2, r7, #12
 800497a:	2301      	movs	r3, #1
 800497c:	2125      	movs	r1, #37	@ 0x25
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ff9c 	bl	80048bc <lis2dw12_read_reg>
 8004984:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d110      	bne.n	80049ae <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	b2da      	uxtb	r2, r3
 8004996:	7b3b      	ldrb	r3, [r7, #12]
 8004998:	f362 0382 	bfi	r3, r2, #2, #1
 800499c:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800499e:	f107 020c 	add.w	r2, r7, #12
 80049a2:	2301      	movs	r3, #1
 80049a4:	2125      	movs	r1, #37	@ 0x25
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff ffa0 	bl	80048ec <lis2dw12_write_reg>
 80049ac:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80049ae:	697b      	ldr	r3, [r7, #20]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80049c2:	f107 0210 	add.w	r2, r7, #16
 80049c6:	2301      	movs	r3, #1
 80049c8:	2120      	movs	r1, #32
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff ff76 	bl	80048bc <lis2dw12_read_reg>
 80049d0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f040 80a3 	bne.w	8004b20 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80049da:	f107 020c 	add.w	r2, r7, #12
 80049de:	2301      	movs	r3, #1
 80049e0:	2125      	movs	r1, #37	@ 0x25
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff ff6a 	bl	80048bc <lis2dw12_read_reg>
 80049e8:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80049ea:	7b3b      	ldrb	r3, [r7, #12]
 80049ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	011a      	lsls	r2, r3, #4
 80049f4:	7c3b      	ldrb	r3, [r7, #16]
 80049f6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8004a00:	7c3a      	ldrb	r2, [r7, #16]
 8004a02:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8004a06:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004a08:	4413      	add	r3, r2
 8004a0a:	2b1b      	cmp	r3, #27
 8004a0c:	f200 8084 	bhi.w	8004b18 <lis2dw12_power_mode_get+0x160>
 8004a10:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <lis2dw12_power_mode_get+0x60>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004aa9 	.word	0x08004aa9
 8004a1c:	08004aa1 	.word	0x08004aa1
 8004a20:	08004a99 	.word	0x08004a99
 8004a24:	08004a91 	.word	0x08004a91
 8004a28:	08004a89 	.word	0x08004a89
 8004a2c:	08004b19 	.word	0x08004b19
 8004a30:	08004b19 	.word	0x08004b19
 8004a34:	08004b19 	.word	0x08004b19
 8004a38:	08004ac9 	.word	0x08004ac9
 8004a3c:	08004ac1 	.word	0x08004ac1
 8004a40:	08004ab9 	.word	0x08004ab9
 8004a44:	08004ab1 	.word	0x08004ab1
 8004a48:	08004b19 	.word	0x08004b19
 8004a4c:	08004b19 	.word	0x08004b19
 8004a50:	08004b19 	.word	0x08004b19
 8004a54:	08004b19 	.word	0x08004b19
 8004a58:	08004af1 	.word	0x08004af1
 8004a5c:	08004ae9 	.word	0x08004ae9
 8004a60:	08004ae1 	.word	0x08004ae1
 8004a64:	08004ad9 	.word	0x08004ad9
 8004a68:	08004ad1 	.word	0x08004ad1
 8004a6c:	08004b19 	.word	0x08004b19
 8004a70:	08004b19 	.word	0x08004b19
 8004a74:	08004b19 	.word	0x08004b19
 8004a78:	08004b11 	.word	0x08004b11
 8004a7c:	08004b09 	.word	0x08004b09
 8004a80:	08004b01 	.word	0x08004b01
 8004a84:	08004af9 	.word	0x08004af9
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	701a      	strb	r2, [r3, #0]
        break;
 8004a8e:	e047      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2203      	movs	r2, #3
 8004a94:	701a      	strb	r2, [r3, #0]
        break;
 8004a96:	e043      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	701a      	strb	r2, [r3, #0]
        break;
 8004a9e:	e03f      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	701a      	strb	r2, [r3, #0]
        break;
 8004aa6:	e03b      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
        break;
 8004aae:	e037      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	220b      	movs	r2, #11
 8004ab4:	701a      	strb	r2, [r3, #0]
        break;
 8004ab6:	e033      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	220a      	movs	r2, #10
 8004abc:	701a      	strb	r2, [r3, #0]
        break;
 8004abe:	e02f      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2209      	movs	r2, #9
 8004ac4:	701a      	strb	r2, [r3, #0]
        break;
 8004ac6:	e02b      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2208      	movs	r2, #8
 8004acc:	701a      	strb	r2, [r3, #0]
        break;
 8004ace:	e027      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2214      	movs	r2, #20
 8004ad4:	701a      	strb	r2, [r3, #0]
        break;
 8004ad6:	e023      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2213      	movs	r2, #19
 8004adc:	701a      	strb	r2, [r3, #0]
        break;
 8004ade:	e01f      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2212      	movs	r2, #18
 8004ae4:	701a      	strb	r2, [r3, #0]
        break;
 8004ae6:	e01b      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2211      	movs	r2, #17
 8004aec:	701a      	strb	r2, [r3, #0]
        break;
 8004aee:	e017      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2210      	movs	r2, #16
 8004af4:	701a      	strb	r2, [r3, #0]
        break;
 8004af6:	e013      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	221b      	movs	r2, #27
 8004afc:	701a      	strb	r2, [r3, #0]
        break;
 8004afe:	e00f      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	221a      	movs	r2, #26
 8004b04:	701a      	strb	r2, [r3, #0]
        break;
 8004b06:	e00b      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2219      	movs	r2, #25
 8004b0c:	701a      	strb	r2, [r3, #0]
        break;
 8004b0e:	e007      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2218      	movs	r2, #24
 8004b14:	701a      	strb	r2, [r3, #0]
        break;
 8004b16:	e003      	b.n	8004b20 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	701a      	strb	r2, [r3, #0]
        break;
 8004b1e:	bf00      	nop
    }
  }

  return ret;
 8004b20:	697b      	ldr	r3, [r7, #20]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop

08004b2c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004b38:	f107 0210 	add.w	r2, r7, #16
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	2120      	movs	r1, #32
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff febb 	bl	80048bc <lis2dw12_read_reg>
 8004b46:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10f      	bne.n	8004b6e <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	7c3b      	ldrb	r3, [r7, #16]
 8004b58:	f362 1307 	bfi	r3, r2, #4, #4
 8004b5c:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004b5e:	f107 0210 	add.w	r2, r7, #16
 8004b62:	2301      	movs	r3, #1
 8004b64:	2120      	movs	r1, #32
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fec0 	bl	80048ec <lis2dw12_write_reg>
 8004b6c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b74:	f107 020c 	add.w	r2, r7, #12
 8004b78:	2301      	movs	r3, #1
 8004b7a:	2122      	movs	r1, #34	@ 0x22
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fe9d 	bl	80048bc <lis2dw12_read_reg>
 8004b82:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d110      	bne.n	8004bac <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	7b3b      	ldrb	r3, [r7, #12]
 8004b96:	f362 0301 	bfi	r3, r2, #0, #2
 8004b9a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b9c:	f107 020c 	add.w	r2, r7, #12
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	2122      	movs	r1, #34	@ 0x22
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fea1 	bl	80048ec <lis2dw12_write_reg>
 8004baa:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004bac:	697b      	ldr	r3, [r7, #20]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004bc2:	f107 0210 	add.w	r2, r7, #16
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	2120      	movs	r1, #32
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff fe76 	bl	80048bc <lis2dw12_read_reg>
 8004bd0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f040 80b3 	bne.w	8004d40 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004bda:	f107 020c 	add.w	r2, r7, #12
 8004bde:	2301      	movs	r3, #1
 8004be0:	2122      	movs	r1, #34	@ 0x22
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fe6a 	bl	80048bc <lis2dw12_read_reg>
 8004be8:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004bea:	7b3b      	ldrb	r3, [r7, #12]
 8004bec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	7c3a      	ldrb	r2, [r7, #16]
 8004bf6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	2b32      	cmp	r3, #50	@ 0x32
 8004c00:	f200 809a 	bhi.w	8004d38 <lis2dw12_data_rate_get+0x180>
 8004c04:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <lis2dw12_data_rate_get+0x54>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004cd9 	.word	0x08004cd9
 8004c10:	08004ce1 	.word	0x08004ce1
 8004c14:	08004ce9 	.word	0x08004ce9
 8004c18:	08004cf1 	.word	0x08004cf1
 8004c1c:	08004cf9 	.word	0x08004cf9
 8004c20:	08004d01 	.word	0x08004d01
 8004c24:	08004d09 	.word	0x08004d09
 8004c28:	08004d11 	.word	0x08004d11
 8004c2c:	08004d19 	.word	0x08004d19
 8004c30:	08004d21 	.word	0x08004d21
 8004c34:	08004d39 	.word	0x08004d39
 8004c38:	08004d39 	.word	0x08004d39
 8004c3c:	08004d39 	.word	0x08004d39
 8004c40:	08004d39 	.word	0x08004d39
 8004c44:	08004d39 	.word	0x08004d39
 8004c48:	08004d39 	.word	0x08004d39
 8004c4c:	08004d39 	.word	0x08004d39
 8004c50:	08004d39 	.word	0x08004d39
 8004c54:	08004d31 	.word	0x08004d31
 8004c58:	08004d39 	.word	0x08004d39
 8004c5c:	08004d39 	.word	0x08004d39
 8004c60:	08004d39 	.word	0x08004d39
 8004c64:	08004d39 	.word	0x08004d39
 8004c68:	08004d39 	.word	0x08004d39
 8004c6c:	08004d39 	.word	0x08004d39
 8004c70:	08004d39 	.word	0x08004d39
 8004c74:	08004d39 	.word	0x08004d39
 8004c78:	08004d39 	.word	0x08004d39
 8004c7c:	08004d39 	.word	0x08004d39
 8004c80:	08004d39 	.word	0x08004d39
 8004c84:	08004d39 	.word	0x08004d39
 8004c88:	08004d39 	.word	0x08004d39
 8004c8c:	08004d39 	.word	0x08004d39
 8004c90:	08004d39 	.word	0x08004d39
 8004c94:	08004d39 	.word	0x08004d39
 8004c98:	08004d39 	.word	0x08004d39
 8004c9c:	08004d39 	.word	0x08004d39
 8004ca0:	08004d39 	.word	0x08004d39
 8004ca4:	08004d39 	.word	0x08004d39
 8004ca8:	08004d39 	.word	0x08004d39
 8004cac:	08004d39 	.word	0x08004d39
 8004cb0:	08004d39 	.word	0x08004d39
 8004cb4:	08004d39 	.word	0x08004d39
 8004cb8:	08004d39 	.word	0x08004d39
 8004cbc:	08004d39 	.word	0x08004d39
 8004cc0:	08004d39 	.word	0x08004d39
 8004cc4:	08004d39 	.word	0x08004d39
 8004cc8:	08004d39 	.word	0x08004d39
 8004ccc:	08004d39 	.word	0x08004d39
 8004cd0:	08004d39 	.word	0x08004d39
 8004cd4:	08004d29 	.word	0x08004d29
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
        break;
 8004cde:	e02f      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
        break;
 8004ce6:	e02b      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2202      	movs	r2, #2
 8004cec:	701a      	strb	r2, [r3, #0]
        break;
 8004cee:	e027      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	701a      	strb	r2, [r3, #0]
        break;
 8004cf6:	e023      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	701a      	strb	r2, [r3, #0]
        break;
 8004cfe:	e01f      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2205      	movs	r2, #5
 8004d04:	701a      	strb	r2, [r3, #0]
        break;
 8004d06:	e01b      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2206      	movs	r2, #6
 8004d0c:	701a      	strb	r2, [r3, #0]
        break;
 8004d0e:	e017      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2207      	movs	r2, #7
 8004d14:	701a      	strb	r2, [r3, #0]
        break;
 8004d16:	e013      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	701a      	strb	r2, [r3, #0]
        break;
 8004d1e:	e00f      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2209      	movs	r2, #9
 8004d24:	701a      	strb	r2, [r3, #0]
        break;
 8004d26:	e00b      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2232      	movs	r2, #50	@ 0x32
 8004d2c:	701a      	strb	r2, [r3, #0]
        break;
 8004d2e:	e007      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2212      	movs	r2, #18
 8004d34:	701a      	strb	r2, [r3, #0]
        break;
 8004d36:	e003      	b.n	8004d40 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
        break;
 8004d3e:	bf00      	nop
    }
  }

  return ret;
 8004d40:	697b      	ldr	r3, [r7, #20]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop

08004d4c <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004d58:	f107 0208 	add.w	r2, r7, #8
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	2121      	movs	r1, #33	@ 0x21
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fdab 	bl	80048bc <lis2dw12_read_reg>
 8004d66:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	7a3b      	ldrb	r3, [r7, #8]
 8004d78:	f362 03c3 	bfi	r3, r2, #3, #1
 8004d7c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004d7e:	f107 0208 	add.w	r2, r7, #8
 8004d82:	2301      	movs	r3, #1
 8004d84:	2121      	movs	r1, #33	@ 0x21
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fdb0 	bl	80048ec <lis2dw12_write_reg>
 8004d8c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004da4:	f107 0208 	add.w	r2, r7, #8
 8004da8:	2301      	movs	r3, #1
 8004daa:	2125      	movs	r1, #37	@ 0x25
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fd85 	bl	80048bc <lis2dw12_read_reg>
 8004db2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10f      	bne.n	8004dda <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	7a3b      	ldrb	r3, [r7, #8]
 8004dc4:	f362 1305 	bfi	r3, r2, #4, #2
 8004dc8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004dca:	f107 0208 	add.w	r2, r7, #8
 8004dce:	2301      	movs	r3, #1
 8004dd0:	2125      	movs	r1, #37	@ 0x25
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fd8a 	bl	80048ec <lis2dw12_write_reg>
 8004dd8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004dda:	68fb      	ldr	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004dee:	f107 0208 	add.w	r2, r7, #8
 8004df2:	2301      	movs	r3, #1
 8004df4:	2125      	movs	r1, #37	@ 0x25
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fd60 	bl	80048bc <lis2dw12_read_reg>
 8004dfc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004dfe:	7a3b      	ldrb	r3, [r7, #8]
 8004e00:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d81a      	bhi.n	8004e40 <lis2dw12_full_scale_get+0x5c>
 8004e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <lis2dw12_full_scale_get+0x2c>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e29 	.word	0x08004e29
 8004e18:	08004e31 	.word	0x08004e31
 8004e1c:	08004e39 	.word	0x08004e39
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
      break;
 8004e26:	e00f      	b.n	8004e48 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
      break;
 8004e2e:	e00b      	b.n	8004e48 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2202      	movs	r2, #2
 8004e34:	701a      	strb	r2, [r3, #0]
      break;
 8004e36:	e007      	b.n	8004e48 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	701a      	strb	r2, [r3, #0]
      break;
 8004e3e:	e003      	b.n	8004e48 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
      break;
 8004e46:	bf00      	nop
  }

  return ret;
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop

08004e54 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004e5e:	f107 020c 	add.w	r2, r7, #12
 8004e62:	2306      	movs	r3, #6
 8004e64:	2128      	movs	r1, #40	@ 0x28
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fd28 	bl	80048bc <lis2dw12_read_reg>
 8004e6c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004e6e:	7b7b      	ldrb	r3, [r7, #13]
 8004e70:	b21a      	sxth	r2, r3
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	7b3a      	ldrb	r2, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	b21a      	sxth	r2, r3
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	3302      	adds	r3, #2
 8004e94:	b212      	sxth	r2, r2
 8004e96:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	7bba      	ldrb	r2, [r7, #14]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	3302      	adds	r3, #2
 8004eb0:	b212      	sxth	r2, r2
 8004eb2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004eb4:	7c7a      	ldrb	r2, [r7, #17]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	b212      	sxth	r2, r2
 8004ebc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	7c3a      	ldrb	r2, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	b212      	sxth	r2, r2
 8004ed8:	801a      	strh	r2, [r3, #0]

  return ret;
 8004eda:	697b      	ldr	r3, [r7, #20]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004eee:	2301      	movs	r3, #1
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	210f      	movs	r1, #15
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fce1 	bl	80048bc <lis2dw12_read_reg>
 8004efa:	60f8      	str	r0, [r7, #12]

  return ret;
 8004efc:	68fb      	ldr	r3, [r7, #12]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004f12:	f107 0208 	add.w	r2, r7, #8
 8004f16:	2301      	movs	r3, #1
 8004f18:	2121      	movs	r1, #33	@ 0x21
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fcce 	bl	80048bc <lis2dw12_read_reg>
 8004f20:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10f      	bne.n	8004f48 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	7a3b      	ldrb	r3, [r7, #8]
 8004f32:	f362 0382 	bfi	r3, r2, #2, #1
 8004f36:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004f38:	f107 0208 	add.w	r2, r7, #8
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	2121      	movs	r1, #33	@ 0x21
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff fcd3 	bl	80048ec <lis2dw12_write_reg>
 8004f46:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f48:	68fb      	ldr	r3, [r7, #12]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004f5e:	f107 0208 	add.w	r2, r7, #8
 8004f62:	2301      	movs	r3, #1
 8004f64:	212e      	movs	r1, #46	@ 0x2e
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff fca8 	bl	80048bc <lis2dw12_read_reg>
 8004f6c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10f      	bne.n	8004f94 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	7a3b      	ldrb	r3, [r7, #8]
 8004f7e:	f362 1347 	bfi	r3, r2, #5, #3
 8004f82:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004f84:	f107 0208 	add.w	r2, r7, #8
 8004f88:	2301      	movs	r3, #1
 8004f8a:	212e      	movs	r1, #46	@ 0x2e
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fcad 	bl	80048ec <lis2dw12_write_reg>
 8004f92:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d103      	bne.n	8004fbc <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	e067      	b.n	800508c <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	7b1a      	ldrb	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a28      	ldr	r2, [pc, #160]	@ (8005098 <LIS2MDL_RegisterBusIO+0xf8>)
 8004ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a27      	ldr	r2, [pc, #156]	@ (800509c <LIS2MDL_RegisterBusIO+0xfc>)
 8004ffe:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e036      	b.n	800508c <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4798      	blx	r3
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e02c      	b.n	800508c <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d028      	beq.n	800508c <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005040:	2b00      	cmp	r3, #0
 8005042:	d123      	bne.n	800508c <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d10d      	bne.n	8005068 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800504c:	2334      	movs	r3, #52	@ 0x34
 800504e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8005050:	7afb      	ldrb	r3, [r7, #11]
 8005052:	461a      	mov	r2, r3
 8005054:	2162      	movs	r1, #98	@ 0x62
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fb16 	bl	8005688 <LIS2MDL_Write_Reg>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d014      	beq.n	800508c <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8005062:	f04f 33ff 	mov.w	r3, #4294967295
 8005066:	e012      	b.n	800508e <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d101      	bne.n	8005074 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	e00c      	b.n	800508e <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3320      	adds	r3, #32
 8005078:	2101      	movs	r1, #1
 800507a:	4618      	mov	r0, r3
 800507c:	f000 ff67 	bl	8005f4e <lis2mdl_i2c_interface_set>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	e000      	b.n	800508e <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 800508c:	68fb      	ldr	r3, [r7, #12]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	080056df 	.word	0x080056df
 800509c:	08005761 	.word	0x08005761

080050a0 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d144      	bne.n	800513a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80050b0:	f107 0208 	add.w	r2, r7, #8
 80050b4:	2301      	movs	r3, #1
 80050b6:	2162      	movs	r1, #98	@ 0x62
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fb92 	bl	80057e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
 80050c8:	e06c      	b.n	80051a4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80050ca:	f107 020c 	add.w	r2, r7, #12
 80050ce:	2301      	movs	r3, #1
 80050d0:	2160      	movs	r1, #96	@ 0x60
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fb85 	bl	80057e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80050de:	f04f 33ff 	mov.w	r3, #4294967295
 80050e2:	e05f      	b.n	80051a4 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80050e4:	7a3b      	ldrb	r3, [r7, #8]
 80050e6:	f043 0310 	orr.w	r3, r3, #16
 80050ea:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80050ec:	7a3b      	ldrb	r3, [r7, #8]
 80050ee:	f36f 0341 	bfc	r3, #1, #1
 80050f2:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80050f4:	7b3b      	ldrb	r3, [r7, #12]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f362 0301 	bfi	r3, r2, #0, #2
 80050fc:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80050fe:	7b3b      	ldrb	r3, [r7, #12]
 8005100:	f043 030c 	orr.w	r3, r3, #12
 8005104:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8005106:	f107 0208 	add.w	r2, r7, #8
 800510a:	2301      	movs	r3, #1
 800510c:	2162      	movs	r1, #98	@ 0x62
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fca6 	bl	8005a60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800511a:	f04f 33ff 	mov.w	r3, #4294967295
 800511e:	e041      	b.n	80051a4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005120:	f107 020c 	add.w	r2, r7, #12
 8005124:	2301      	movs	r3, #1
 8005126:	2160      	movs	r1, #96	@ 0x60
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fc99 	bl	8005a60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d032      	beq.n	800519a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	e034      	b.n	80051a4 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3320      	adds	r3, #32
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fe5f 	bl	8005e04 <lis2mdl_block_data_update_set>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 800514c:	f04f 33ff 	mov.w	r3, #4294967295
 8005150:	e028      	b.n	80051a4 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3320      	adds	r3, #32
 8005156:	2102      	movs	r1, #2
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fdcf 	bl	8005cfc <lis2mdl_operating_mode_set>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8005164:	f04f 33ff 	mov.w	r3, #4294967295
 8005168:	e01c      	b.n	80051a4 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3320      	adds	r3, #32
 800516e:	2103      	movs	r1, #3
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fde9 	bl	8005d48 <lis2mdl_data_rate_set>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	e010      	b.n	80051a4 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3320      	adds	r3, #32
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f000 feba 	bl	8005f02 <lis2mdl_self_test_set>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8005194:	f04f 33ff 	mov.w	r3, #4294967295
 8005198:	e004      	b.n	80051a4 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f8a5 	bl	8005304 <LIS2MDL_MAG_Disable>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80051c0:	f04f 33ff 	mov.w	r3, #4294967295
 80051c4:	e004      	b.n	80051d0 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d10b      	bne.n	8005202 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80051ea:	2301      	movs	r3, #1
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	214f      	movs	r1, #79	@ 0x4f
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 faf6 	bl	80057e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00e      	beq.n	800521a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005200:	e00c      	b.n	800521c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3320      	adds	r3, #32
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fe69 	bl	8005ee0 <lis2mdl_device_id_get>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
 8005218:	e000      	b.n	800521c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2200      	movs	r2, #0
 8005238:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2201      	movs	r2, #1
 800523e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2200      	movs	r2, #0
 800524a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2232      	movs	r2, #50	@ 0x32
 8005256:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4a04      	ldr	r2, [pc, #16]	@ (800527c <LIS2MDL_GetCapabilities+0x58>)
 800526c:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	42c80000 	.word	0x42c80000

08005280 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e032      	b.n	80052fc <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d11d      	bne.n	80052da <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800529e:	f107 020c 	add.w	r2, r7, #12
 80052a2:	2301      	movs	r3, #1
 80052a4:	2160      	movs	r1, #96	@ 0x60
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa9b 	bl	80057e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295
 80052b6:	e021      	b.n	80052fc <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80052b8:	7b3b      	ldrb	r3, [r7, #12]
 80052ba:	f36f 0301 	bfc	r3, #0, #2
 80052be:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80052c0:	f107 020c 	add.w	r2, r7, #12
 80052c4:	2301      	movs	r3, #1
 80052c6:	2160      	movs	r1, #96	@ 0x60
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fbc9 	bl	8005a60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00e      	beq.n	80052f2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	e010      	b.n	80052fc <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3320      	adds	r3, #32
 80052de:	2100      	movs	r1, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fd0b 	bl	8005cfc <lis2mdl_operating_mode_set>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295
 80052f0:	e004      	b.n	80052fc <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e033      	b.n	8005382 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d11e      	bne.n	8005360 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005322:	f107 020c 	add.w	r2, r7, #12
 8005326:	2301      	movs	r3, #1
 8005328:	2160      	movs	r1, #96	@ 0x60
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa59 	bl	80057e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8005336:	f04f 33ff 	mov.w	r3, #4294967295
 800533a:	e022      	b.n	8005382 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800533c:	7b3b      	ldrb	r3, [r7, #12]
 800533e:	2202      	movs	r2, #2
 8005340:	f362 0301 	bfi	r3, r2, #0, #2
 8005344:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005346:	f107 020c 	add.w	r2, r7, #12
 800534a:	2301      	movs	r3, #1
 800534c:	2160      	movs	r1, #96	@ 0x60
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fb86 	bl	8005a60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00e      	beq.n	8005378 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	e010      	b.n	8005382 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3320      	adds	r3, #32
 8005364:	2102      	movs	r1, #2
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fcc8 	bl	8005cfc <lis2mdl_operating_mode_set>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8005372:	f04f 33ff 	mov.w	r3, #4294967295
 8005376:	e004      	b.n	8005382 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800539a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3320      	adds	r3, #32
 80053ba:	f107 020b 	add.w	r2, r7, #11
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fce7 	bl	8005d94 <lis2mdl_data_rate_get>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295
 80053d0:	e023      	b.n	800541a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80053d2:	7afb      	ldrb	r3, [r7, #11]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d81b      	bhi.n	8005410 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80053d8:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	080053f9 	.word	0x080053f9
 80053e8:	08005401 	.word	0x08005401
 80053ec:	08005409 	.word	0x08005409
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005424 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80053f4:	601a      	str	r2, [r3, #0]
      break;
 80053f6:	e00f      	b.n	8005418 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005428 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80053fc:	601a      	str	r2, [r3, #0]
      break;
 80053fe:	e00b      	b.n	8005418 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	4a0a      	ldr	r2, [pc, #40]	@ (800542c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8005404:	601a      	str	r2, [r3, #0]
      break;
 8005406:	e007      	b.n	8005418 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4a09      	ldr	r2, [pc, #36]	@ (8005430 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 800540c:	601a      	str	r2, [r3, #0]
      break;
 800540e:	e003      	b.n	8005418 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8005410:	f04f 33ff 	mov.w	r3, #4294967295
 8005414:	60fb      	str	r3, [r7, #12]
      break;
 8005416:	bf00      	nop
  }

  return ret;
 8005418:	68fb      	ldr	r3, [r7, #12]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	41200000 	.word	0x41200000
 8005428:	41a00000 	.word	0x41a00000
 800542c:	42480000 	.word	0x42480000
 8005430:	42c80000 	.word	0x42c80000

08005434 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 800543e:	492a      	ldr	r1, [pc, #168]	@ (80054e8 <LIS2MDL_MAG_SetOutputDataRate+0xb4>)
 8005440:	6838      	ldr	r0, [r7, #0]
 8005442:	f7fb fe5f 	bl	8001104 <__aeabi_fcmple>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <LIS2MDL_MAG_SetOutputDataRate+0x1c>
 800544c:	2300      	movs	r3, #0
 800544e:	e012      	b.n	8005476 <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8005450:	4926      	ldr	r1, [pc, #152]	@ (80054ec <LIS2MDL_MAG_SetOutputDataRate+0xb8>)
 8005452:	6838      	ldr	r0, [r7, #0]
 8005454:	f7fb fe56 	bl	8001104 <__aeabi_fcmple>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <LIS2MDL_MAG_SetOutputDataRate+0x2e>
 800545e:	2301      	movs	r3, #1
 8005460:	e009      	b.n	8005476 <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8005462:	4923      	ldr	r1, [pc, #140]	@ (80054f0 <LIS2MDL_MAG_SetOutputDataRate+0xbc>)
 8005464:	6838      	ldr	r0, [r7, #0]
 8005466:	f7fb fe4d 	bl	8001104 <__aeabi_fcmple>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <LIS2MDL_MAG_SetOutputDataRate+0x40>
 8005470:	2302      	movs	r3, #2
 8005472:	e000      	b.n	8005476 <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8005474:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8005476:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b03      	cmp	r3, #3
 800547e:	d121      	bne.n	80054c4 <LIS2MDL_MAG_SetOutputDataRate+0x90>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005480:	f107 020c 	add.w	r2, r7, #12
 8005484:	2301      	movs	r3, #1
 8005486:	2160      	movs	r1, #96	@ 0x60
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f9aa 	bl	80057e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <LIS2MDL_MAG_SetOutputDataRate+0x66>
    {
      return LIS2MDL_ERROR;
 8005494:	f04f 33ff 	mov.w	r3, #4294967295
 8005498:	e022      	b.n	80054e0 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	7b3b      	ldrb	r3, [r7, #12]
 80054a4:	f362 0383 	bfi	r3, r2, #2, #2
 80054a8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80054aa:	f107 020c 	add.w	r2, r7, #12
 80054ae:	2301      	movs	r3, #1
 80054b0:	2160      	movs	r1, #96	@ 0x60
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fad4 	bl	8005a60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00f      	beq.n	80054de <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 80054be:	f04f 33ff 	mov.w	r3, #4294967295
 80054c2:	e00d      	b.n	80054e0 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3320      	adds	r3, #32
 80054c8:	7bfa      	ldrb	r2, [r7, #15]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fc3b 	bl	8005d48 <lis2mdl_data_rate_set>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 80054d8:	f04f 33ff 	mov.w	r3, #4294967295
 80054dc:	e000      	b.n	80054e0 <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }

  return LIS2MDL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	41200000 	.word	0x41200000
 80054ec:	41a00000 	.word	0x41a00000
 80054f0:	42480000 	.word	0x42480000

080054f4 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2232      	movs	r2, #50	@ 0x32
 8005502:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr

08005510 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3320      	adds	r3, #32
 8005534:	f107 0208 	add.w	r2, r7, #8
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fc88 	bl	8005e50 <lis2mdl_magnetic_raw_get>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8005546:	f04f 33ff 	mov.w	r3, #4294967295
 800554a:	e00c      	b.n	8005566 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800554c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005554:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800555c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b088      	sub	sp, #32
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b03      	cmp	r3, #3
 800557e:	d134      	bne.n	80055ea <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005580:	f107 0218 	add.w	r2, r7, #24
 8005584:	2306      	movs	r3, #6
 8005586:	2168      	movs	r1, #104	@ 0x68
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f92a 	bl	80057e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	e072      	b.n	8005680 <LIS2MDL_MAG_GetAxes+0x112>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800559a:	7e7b      	ldrb	r3, [r7, #25]
 800559c:	b21b      	sxth	r3, r3
 800559e:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 80055a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	7e3a      	ldrb	r2, [r7, #24]
 80055ac:	4413      	add	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	b21b      	sxth	r3, r3
 80055b2:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80055b4:	7efb      	ldrb	r3, [r7, #27]
 80055b6:	b21b      	sxth	r3, r3
 80055b8:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80055ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	7eba      	ldrb	r2, [r7, #26]
 80055c6:	4413      	add	r3, r2
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80055ce:	7f7b      	ldrb	r3, [r7, #29]
 80055d0:	b21b      	sxth	r3, r3
 80055d2:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80055d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	b29b      	uxth	r3, r3
 80055de:	7f3a      	ldrb	r2, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	b21b      	sxth	r3, r3
 80055e6:	82bb      	strh	r3, [r7, #20]
 80055e8:	e00d      	b.n	8005606 <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3320      	adds	r3, #32
 80055ee:	f107 0210 	add.w	r2, r7, #16
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fc2b 	bl	8005e50 <lis2mdl_magnetic_raw_get>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 8005600:	f04f 33ff 	mov.w	r3, #4294967295
 8005604:	e03c      	b.n	8005680 <LIS2MDL_MAG_GetAxes+0x112>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8005606:	f107 030c 	add.w	r3, r7, #12
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff febc 	bl	800538a <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005612:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005616:	4618      	mov	r0, r3
 8005618:	f7fb fb78 	bl	8000d0c <__aeabi_i2f>
 800561c:	4602      	mov	r2, r0
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4619      	mov	r1, r3
 8005622:	4610      	mov	r0, r2
 8005624:	f7fb fbc6 	bl	8000db4 <__aeabi_fmul>
 8005628:	4603      	mov	r3, r0
 800562a:	4618      	mov	r0, r3
 800562c:	f7fb fd88 	bl	8001140 <__aeabi_f2iz>
 8005630:	4602      	mov	r2, r0
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005636:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fb fb66 	bl	8000d0c <__aeabi_i2f>
 8005640:	4602      	mov	r2, r0
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f7fb fbb4 	bl	8000db4 <__aeabi_fmul>
 800564c:	4603      	mov	r3, r0
 800564e:	4618      	mov	r0, r3
 8005650:	f7fb fd76 	bl	8001140 <__aeabi_f2iz>
 8005654:	4602      	mov	r2, r0
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800565a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fb fb54 	bl	8000d0c <__aeabi_i2f>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f7fb fba2 	bl	8000db4 <__aeabi_fmul>
 8005670:	4603      	mov	r3, r0
 8005672:	4618      	mov	r0, r3
 8005674:	f7fb fd64 	bl	8001140 <__aeabi_f2iz>
 8005678:	4602      	mov	r2, r0
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
 8005694:	4613      	mov	r3, r2
 8005696:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b03      	cmp	r3, #3
 800569e:	d10b      	bne.n	80056b8 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80056a0:	1cba      	adds	r2, r7, #2
 80056a2:	78f9      	ldrb	r1, [r7, #3]
 80056a4:	2301      	movs	r3, #1
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f9da 	bl	8005a60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295
 80056b6:	e00e      	b.n	80056d6 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f103 0020 	add.w	r0, r3, #32
 80056be:	1cba      	adds	r2, r7, #2
 80056c0:	78f9      	ldrb	r1, [r7, #3]
 80056c2:	2301      	movs	r3, #1
 80056c4:	f000 fb02 	bl	8005ccc <lis2mdl_write_reg>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
 80056d2:	e000      	b.n	80056d6 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056de:	b590      	push	{r4, r7, lr}
 80056e0:	b087      	sub	sp, #28
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	461a      	mov	r2, r3
 80056ea:	460b      	mov	r3, r1
 80056ec:	72fb      	strb	r3, [r7, #11]
 80056ee:	4613      	mov	r3, r2
 80056f0:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10e      	bne.n	800571c <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	695c      	ldr	r4, [r3, #20]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	7b1b      	ldrb	r3, [r3, #12]
 8005706:	4618      	mov	r0, r3
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800570e:	b2db      	uxtb	r3, r3
 8005710:	4619      	mov	r1, r3
 8005712:	893b      	ldrh	r3, [r7, #8]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	47a0      	blx	r4
 8005718:	4603      	mov	r3, r0
 800571a:	e01d      	b.n	8005758 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b03      	cmp	r3, #3
 8005722:	d10b      	bne.n	800573c <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	695c      	ldr	r4, [r3, #20]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	7b1b      	ldrb	r3, [r3, #12]
 800572c:	4618      	mov	r0, r3
 800572e:	7afb      	ldrb	r3, [r7, #11]
 8005730:	b299      	uxth	r1, r3
 8005732:	893b      	ldrh	r3, [r7, #8]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	47a0      	blx	r4
 8005738:	4603      	mov	r3, r0
 800573a:	e00d      	b.n	8005758 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	695c      	ldr	r4, [r3, #20]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	7b1b      	ldrb	r3, [r3, #12]
 8005744:	4618      	mov	r0, r3
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800574c:	b2db      	uxtb	r3, r3
 800574e:	4619      	mov	r1, r3
 8005750:	893b      	ldrh	r3, [r7, #8]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	47a0      	blx	r4
 8005756:	4603      	mov	r3, r0
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd90      	pop	{r4, r7, pc}

08005760 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	461a      	mov	r2, r3
 800576c:	460b      	mov	r3, r1
 800576e:	72fb      	strb	r3, [r7, #11]
 8005770:	4613      	mov	r3, r2
 8005772:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10e      	bne.n	800579e <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	691c      	ldr	r4, [r3, #16]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	7b1b      	ldrb	r3, [r3, #12]
 8005788:	4618      	mov	r0, r3
 800578a:	7afb      	ldrb	r3, [r7, #11]
 800578c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005790:	b2db      	uxtb	r3, r3
 8005792:	4619      	mov	r1, r3
 8005794:	893b      	ldrh	r3, [r7, #8]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	47a0      	blx	r4
 800579a:	4603      	mov	r3, r0
 800579c:	e01d      	b.n	80057da <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d10b      	bne.n	80057be <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	691c      	ldr	r4, [r3, #16]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	7b1b      	ldrb	r3, [r3, #12]
 80057ae:	4618      	mov	r0, r3
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	b299      	uxth	r1, r3
 80057b4:	893b      	ldrh	r3, [r7, #8]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	47a0      	blx	r4
 80057ba:	4603      	mov	r3, r0
 80057bc:	e00d      	b.n	80057da <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	691c      	ldr	r4, [r3, #16]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	7b1b      	ldrb	r3, [r3, #12]
 80057c6:	4618      	mov	r0, r3
 80057c8:	7afb      	ldrb	r3, [r7, #11]
 80057ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	4619      	mov	r1, r3
 80057d2:	893b      	ldrh	r3, [r7, #8]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	47a0      	blx	r4
 80057d8:	4603      	mov	r3, r0
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}

080057e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b08c      	sub	sp, #48	@ 0x30
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	461a      	mov	r2, r3
 80057ee:	460b      	mov	r3, r1
 80057f0:	72fb      	strb	r3, [r7, #11]
 80057f2:	4613      	mov	r3, r2
 80057f4:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80057fc:	2340      	movs	r3, #64	@ 0x40
 80057fe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005802:	2300      	movs	r3, #0
 8005804:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8005808:	233d      	movs	r3, #61	@ 0x3d
 800580a:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800580c:	2315      	movs	r3, #21
 800580e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005812:	2316      	movs	r3, #22
 8005814:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005818:	2317      	movs	r3, #23
 800581a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 800581e:	2314      	movs	r3, #20
 8005820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005824:	2344      	movs	r3, #68	@ 0x44
 8005826:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8005828:	2302      	movs	r3, #2
 800582a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800582e:	2339      	movs	r3, #57	@ 0x39
 8005830:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800583a:	2329      	movs	r3, #41	@ 0x29
 800583c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005840:	231e      	movs	r3, #30
 8005842:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 800584c:	893b      	ldrh	r3, [r7, #8]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005852:	2310      	movs	r3, #16
 8005854:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800585e:	2340      	movs	r3, #64	@ 0x40
 8005860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f103 0020 	add.w	r0, r3, #32
 800586a:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800586e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005872:	2301      	movs	r3, #1
 8005874:	f000 fa2a 	bl	8005ccc <lis2mdl_write_reg>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	e0e9      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f103 0020 	add.w	r0, r3, #32
 800588a:	f107 021f 	add.w	r2, r7, #31
 800588e:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005892:	2301      	movs	r3, #1
 8005894:	f000 fa1a 	bl	8005ccc <lis2mdl_write_reg>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
 80058a2:	e0d9      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f103 0020 	add.w	r0, r3, #32
 80058aa:	f107 020b 	add.w	r2, r7, #11
 80058ae:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80058b2:	2301      	movs	r3, #1
 80058b4:	f000 fa0a 	bl	8005ccc <lis2mdl_write_reg>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80058be:	f04f 33ff 	mov.w	r3, #4294967295
 80058c2:	e0c9      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f103 0020 	add.w	r0, r3, #32
 80058ca:	f107 021d 	add.w	r2, r7, #29
 80058ce:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80058d2:	2301      	movs	r3, #1
 80058d4:	f000 f9fa 	bl	8005ccc <lis2mdl_write_reg>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	e0b9      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f103 0020 	add.w	r0, r3, #32
 80058ea:	f107 021e 	add.w	r2, r7, #30
 80058ee:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80058f2:	2301      	movs	r3, #1
 80058f4:	f000 f9ea 	bl	8005ccc <lis2mdl_write_reg>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005902:	e0a9      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f103 0020 	add.w	r0, r3, #32
 800590a:	f107 0220 	add.w	r2, r7, #32
 800590e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005912:	2301      	movs	r3, #1
 8005914:	f000 f9da 	bl	8005ccc <lis2mdl_write_reg>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	e099      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f103 0020 	add.w	r0, r3, #32
 800592a:	f107 021c 	add.w	r2, r7, #28
 800592e:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005932:	2301      	movs	r3, #1
 8005934:	f000 f9b2 	bl	8005c9c <lis2mdl_read_reg>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800593e:	f04f 33ff 	mov.w	r3, #4294967295
 8005942:	e089      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005944:	7f3b      	ldrb	r3, [r7, #28]
 8005946:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800594a:	429a      	cmp	r2, r3
 800594c:	d102      	bne.n	8005954 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800594e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005952:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f103 0020 	add.w	r0, r3, #32
 800595a:	f107 021c 	add.w	r2, r7, #28
 800595e:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005962:	2301      	movs	r3, #1
 8005964:	f000 f9b2 	bl	8005ccc <lis2mdl_write_reg>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 800596e:	f04f 33ff 	mov.w	r3, #4294967295
 8005972:	e071      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f103 0020 	add.w	r0, r3, #32
 800597a:	f107 0214 	add.w	r2, r7, #20
 800597e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005982:	2306      	movs	r3, #6
 8005984:	f000 f98a 	bl	8005c9c <lis2mdl_read_reg>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 800598e:	f04f 33ff 	mov.w	r3, #4294967295
 8005992:	e061      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f103 0020 	add.w	r0, r3, #32
 800599a:	f107 021b 	add.w	r2, r7, #27
 800599e:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80059a2:	2301      	movs	r3, #1
 80059a4:	f000 f97a 	bl	8005c9c <lis2mdl_read_reg>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80059ae:	f04f 33ff 	mov.w	r3, #4294967295
 80059b2:	e051      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80059b4:	7efa      	ldrb	r2, [r7, #27]
 80059b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059ba:	4013      	ands	r3, r2
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d1e6      	bne.n	8005994 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f103 0020 	add.w	r0, r3, #32
 80059cc:	f107 021b 	add.w	r2, r7, #27
 80059d0:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80059d4:	2301      	movs	r3, #1
 80059d6:	f000 f961 	bl	8005c9c <lis2mdl_read_reg>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80059e0:	f04f 33ff 	mov.w	r3, #4294967295
 80059e4:	e038      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80059e6:	7efa      	ldrb	r2, [r7, #27]
 80059e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059ec:	4013      	ands	r3, r2
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1e6      	bne.n	80059c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f103 0020 	add.w	r0, r3, #32
 80059fe:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005a02:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005a06:	2301      	movs	r3, #1
 8005a08:	f000 f960 	bl	8005ccc <lis2mdl_write_reg>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295
 8005a16:	e01f      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f103 0020 	add.w	r0, r3, #32
 8005a1e:	893b      	ldrh	r3, [r7, #8]
 8005a20:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	f000 f939 	bl	8005c9c <lis2mdl_read_reg>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295
 8005a34:	e010      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f103 0020 	add.w	r0, r3, #32
 8005a3c:	f107 0220 	add.w	r2, r7, #32
 8005a40:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005a44:	2301      	movs	r3, #1
 8005a46:	f000 f941 	bl	8005ccc <lis2mdl_write_reg>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8005a50:	f04f 33ff 	mov.w	r3, #4294967295
 8005a54:	e000      	b.n	8005a58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3730      	adds	r7, #48	@ 0x30
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08c      	sub	sp, #48	@ 0x30
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	72fb      	strb	r3, [r7, #11]
 8005a70:	4613      	mov	r3, r2
 8005a72:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005a7a:	2340      	movs	r3, #64	@ 0x40
 8005a7c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005a86:	233c      	movs	r3, #60	@ 0x3c
 8005a88:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005a8a:	2315      	movs	r3, #21
 8005a8c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005a90:	2316      	movs	r3, #22
 8005a92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005a96:	2317      	movs	r3, #23
 8005a98:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8005aa0:	2314      	movs	r3, #20
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005aa6:	2344      	movs	r3, #68	@ 0x44
 8005aa8:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005aaa:	2339      	movs	r3, #57	@ 0x39
 8005aac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8005ab0:	2380      	movs	r3, #128	@ 0x80
 8005ab2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005ab6:	2329      	movs	r3, #41	@ 0x29
 8005ab8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005abc:	231e      	movs	r3, #30
 8005abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005ac8:	2310      	movs	r3, #16
 8005aca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005ad4:	2340      	movs	r3, #64	@ 0x40
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005ada:	230e      	movs	r3, #14
 8005adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f103 0020 	add.w	r0, r3, #32
 8005ae6:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005aea:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005aee:	2301      	movs	r3, #1
 8005af0:	f000 f8ec 	bl	8005ccc <lis2mdl_write_reg>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	e0c9      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f103 0020 	add.w	r0, r3, #32
 8005b06:	f107 021f 	add.w	r2, r7, #31
 8005b0a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f000 f8dc 	bl	8005ccc <lis2mdl_write_reg>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1e:	e0b9      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f103 0020 	add.w	r0, r3, #32
 8005b26:	f107 020b 	add.w	r2, r7, #11
 8005b2a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f000 f8cc 	bl	8005ccc <lis2mdl_write_reg>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3e:	e0a9      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f103 0020 	add.w	r0, r3, #32
 8005b46:	f107 021e 	add.w	r2, r7, #30
 8005b4a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f000 f8bc 	bl	8005ccc <lis2mdl_write_reg>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	e099      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f103 0020 	add.w	r0, r3, #32
 8005b66:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	f000 f8ad 	bl	8005ccc <lis2mdl_write_reg>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005b78:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7c:	e08a      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f103 0020 	add.w	r0, r3, #32
 8005b84:	f107 021d 	add.w	r2, r7, #29
 8005b88:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f000 f89d 	bl	8005ccc <lis2mdl_write_reg>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9c:	e07a      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f103 0020 	add.w	r0, r3, #32
 8005ba4:	f107 0220 	add.w	r2, r7, #32
 8005ba8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005bac:	2301      	movs	r3, #1
 8005bae:	f000 f88d 	bl	8005ccc <lis2mdl_write_reg>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbc:	e06a      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f103 0020 	add.w	r0, r3, #32
 8005bc4:	f107 021c 	add.w	r2, r7, #28
 8005bc8:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f000 f865 	bl	8005c9c <lis2mdl_read_reg>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bdc:	e05a      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005bde:	7f3b      	ldrb	r3, [r7, #28]
 8005be0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d102      	bne.n	8005bee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005be8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bec:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f103 0020 	add.w	r0, r3, #32
 8005bf4:	f107 021c 	add.w	r2, r7, #28
 8005bf8:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f000 f865 	bl	8005ccc <lis2mdl_write_reg>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0c:	e042      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f103 0020 	add.w	r0, r3, #32
 8005c14:	f107 0214 	add.w	r2, r7, #20
 8005c18:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8005c1c:	2306      	movs	r3, #6
 8005c1e:	f000 f83d 	bl	8005c9c <lis2mdl_read_reg>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2c:	e032      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f103 0020 	add.w	r0, r3, #32
 8005c34:	f107 021b 	add.w	r2, r7, #27
 8005c38:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f000 f82d 	bl	8005c9c <lis2mdl_read_reg>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8005c48:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4c:	e022      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005c4e:	7efa      	ldrb	r2, [r7, #27]
 8005c50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c54:	4013      	ands	r3, r2
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d1e6      	bne.n	8005c2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f103 0020 	add.w	r0, r3, #32
 8005c66:	f107 021b 	add.w	r2, r7, #27
 8005c6a:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f000 f814 	bl	8005c9c <lis2mdl_read_reg>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7e:	e009      	b.n	8005c94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005c80:	7efa      	ldrb	r2, [r7, #27]
 8005c82:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c86:	4013      	ands	r3, r2
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d1e6      	bne.n	8005c60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3730      	adds	r7, #48	@ 0x30
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	607a      	str	r2, [r7, #4]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	460b      	mov	r3, r1
 8005caa:	72fb      	strb	r3, [r7, #11]
 8005cac:	4613      	mov	r3, r2
 8005cae:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685c      	ldr	r4, [r3, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68d8      	ldr	r0, [r3, #12]
 8005cb8:	893b      	ldrh	r3, [r7, #8]
 8005cba:	7af9      	ldrb	r1, [r7, #11]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	47a0      	blx	r4
 8005cc0:	6178      	str	r0, [r7, #20]

  return ret;
 8005cc2:	697b      	ldr	r3, [r7, #20]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd90      	pop	{r4, r7, pc}

08005ccc <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	460b      	mov	r3, r1
 8005cda:	72fb      	strb	r3, [r7, #11]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681c      	ldr	r4, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68d8      	ldr	r0, [r3, #12]
 8005ce8:	893b      	ldrh	r3, [r7, #8]
 8005cea:	7af9      	ldrb	r1, [r7, #11]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	47a0      	blx	r4
 8005cf0:	6178      	str	r0, [r7, #20]

  return ret;
 8005cf2:	697b      	ldr	r3, [r7, #20]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd90      	pop	{r4, r7, pc}

08005cfc <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d08:	f107 0208 	add.w	r2, r7, #8
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	2160      	movs	r1, #96	@ 0x60
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff ffc3 	bl	8005c9c <lis2mdl_read_reg>
 8005d16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	7a3b      	ldrb	r3, [r7, #8]
 8005d28:	f362 0301 	bfi	r3, r2, #0, #2
 8005d2c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d2e:	f107 0208 	add.w	r2, r7, #8
 8005d32:	2301      	movs	r3, #1
 8005d34:	2160      	movs	r1, #96	@ 0x60
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ffc8 	bl	8005ccc <lis2mdl_write_reg>
 8005d3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d54:	f107 0208 	add.w	r2, r7, #8
 8005d58:	2301      	movs	r3, #1
 8005d5a:	2160      	movs	r1, #96	@ 0x60
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff ff9d 	bl	8005c9c <lis2mdl_read_reg>
 8005d62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10f      	bne.n	8005d8a <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	7a3b      	ldrb	r3, [r7, #8]
 8005d74:	f362 0383 	bfi	r3, r2, #2, #2
 8005d78:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d7a:	f107 0208 	add.w	r2, r7, #8
 8005d7e:	2301      	movs	r3, #1
 8005d80:	2160      	movs	r1, #96	@ 0x60
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff ffa2 	bl	8005ccc <lis2mdl_write_reg>
 8005d88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d9e:	f107 0208 	add.w	r2, r7, #8
 8005da2:	2301      	movs	r3, #1
 8005da4:	2160      	movs	r1, #96	@ 0x60
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff ff78 	bl	8005c9c <lis2mdl_read_reg>
 8005dac:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005dae:	7a3b      	ldrb	r3, [r7, #8]
 8005db0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d81a      	bhi.n	8005df0 <lis2mdl_data_rate_get+0x5c>
 8005dba:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <lis2mdl_data_rate_get+0x2c>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005dd1 	.word	0x08005dd1
 8005dc4:	08005dd9 	.word	0x08005dd9
 8005dc8:	08005de1 	.word	0x08005de1
 8005dcc:	08005de9 	.word	0x08005de9
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
      break;
 8005dd6:	e00f      	b.n	8005df8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
      break;
 8005dde:	e00b      	b.n	8005df8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2202      	movs	r2, #2
 8005de4:	701a      	strb	r2, [r3, #0]
      break;
 8005de6:	e007      	b.n	8005df8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2203      	movs	r2, #3
 8005dec:	701a      	strb	r2, [r3, #0]
      break;
 8005dee:	e003      	b.n	8005df8 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
      break;
 8005df6:	bf00      	nop
  }

  return ret;
 8005df8:	68fb      	ldr	r3, [r7, #12]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop

08005e04 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e10:	f107 0208 	add.w	r2, r7, #8
 8005e14:	2301      	movs	r3, #1
 8005e16:	2162      	movs	r1, #98	@ 0x62
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff3f 	bl	8005c9c <lis2mdl_read_reg>
 8005e1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10f      	bne.n	8005e46 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	7a3b      	ldrb	r3, [r7, #8]
 8005e30:	f362 1304 	bfi	r3, r2, #4, #1
 8005e34:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e36:	f107 0208 	add.w	r2, r7, #8
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	2162      	movs	r1, #98	@ 0x62
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7ff ff44 	bl	8005ccc <lis2mdl_write_reg>
 8005e44:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e46:	68fb      	ldr	r3, [r7, #12]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005e5a:	f107 020c 	add.w	r2, r7, #12
 8005e5e:	2306      	movs	r3, #6
 8005e60:	2168      	movs	r1, #104	@ 0x68
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ff1a 	bl	8005c9c <lis2mdl_read_reg>
 8005e68:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005e6a:	7b7b      	ldrb	r3, [r7, #13]
 8005e6c:	b21a      	sxth	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	7b3a      	ldrb	r2, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	b21a      	sxth	r2, r3
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005e8a:	7bfa      	ldrb	r2, [r7, #15]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	3302      	adds	r3, #2
 8005e90:	b212      	sxth	r2, r2
 8005e92:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	3302      	adds	r3, #2
 8005e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	7bba      	ldrb	r2, [r7, #14]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	3302      	adds	r3, #2
 8005eac:	b212      	sxth	r2, r2
 8005eae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005eb0:	7c7a      	ldrb	r2, [r7, #17]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	b212      	sxth	r2, r2
 8005eb8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	7c3a      	ldrb	r2, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	b212      	sxth	r2, r2
 8005ed4:	801a      	strh	r2, [r3, #0]

  return ret;
 8005ed6:	697b      	ldr	r3, [r7, #20]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005eea:	2301      	movs	r3, #1
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	214f      	movs	r1, #79	@ 0x4f
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fed3 	bl	8005c9c <lis2mdl_read_reg>
 8005ef6:	60f8      	str	r0, [r7, #12]

  return ret;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f0e:	f107 0208 	add.w	r2, r7, #8
 8005f12:	2301      	movs	r3, #1
 8005f14:	2162      	movs	r1, #98	@ 0x62
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fec0 	bl	8005c9c <lis2mdl_read_reg>
 8005f1c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10f      	bne.n	8005f44 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	7a3b      	ldrb	r3, [r7, #8]
 8005f2e:	f362 0341 	bfi	r3, r2, #1, #1
 8005f32:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f34:	f107 0208 	add.w	r2, r7, #8
 8005f38:	2301      	movs	r3, #1
 8005f3a:	2162      	movs	r1, #98	@ 0x62
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff fec5 	bl	8005ccc <lis2mdl_write_reg>
 8005f42:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f44:	68fb      	ldr	r3, [r7, #12]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f5a:	f107 0208 	add.w	r2, r7, #8
 8005f5e:	2301      	movs	r3, #1
 8005f60:	2162      	movs	r1, #98	@ 0x62
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fe9a 	bl	8005c9c <lis2mdl_read_reg>
 8005f68:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10f      	bne.n	8005f90 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	7a3b      	ldrb	r3, [r7, #8]
 8005f7a:	f362 1345 	bfi	r3, r2, #5, #1
 8005f7e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f80:	f107 0208 	add.w	r2, r7, #8
 8005f84:	2301      	movs	r3, #1
 8005f86:	2162      	movs	r1, #98	@ 0x62
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fe9f 	bl	8005ccc <lis2mdl_write_reg>
 8005f8e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f90:	68fb      	ldr	r3, [r7, #12]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d103      	bne.n	8005fb8 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e051      	b.n	800605c <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	7b1a      	ldrb	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8006068 <LPS22HH_RegisterBusIO+0xcc>)
 8005ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800606c <LPS22HH_RegisterBusIO+0xd0>)
 8005ffa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d103      	bne.n	800601a <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e020      	b.n	800605c <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4798      	blx	r3
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e016      	b.n	800605c <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d112      	bne.n	800605c <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10d      	bne.n	800605c <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8006040:	2301      	movs	r3, #1
 8006042:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	461a      	mov	r2, r3
 8006048:	2110      	movs	r1, #16
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f9db 	bl	8006406 <LPS22HH_Write_Reg>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8006056:	f04f 33ff 	mov.w	r3, #4294967295
 800605a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800605c:	68fb      	ldr	r3, [r7, #12]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	08006713 	.word	0x08006713
 800606c:	08006749 	.word	0x08006749

08006070 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800607e:	2b00      	cmp	r3, #0
 8006080:	d108      	bne.n	8006094 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 faf8 	bl	8006678 <LPS22HH_Initialize>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 800608e:	f04f 33ff 	mov.w	r3, #4294967295
 8006092:	e004      	b.n	800609e <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d111      	bne.n	80060dc <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f87d 	bl	80061b8 <LPS22HH_PRESS_Disable>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 80060c4:	f04f 33ff 	mov.w	r3, #4294967295
 80060c8:	e00d      	b.n	80060e6 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f919 	bl	8006302 <LPS22HH_TEMP_Disable>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	e004      	b.n	80060e6 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3320      	adds	r3, #32
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fcfd 	bl	8006afe <lps22hh_device_id_get>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 800610a:	f04f 33ff 	mov.w	r3, #4294967295
 800610e:	e000      	b.n	8006112 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2200      	movs	r2, #0
 800612a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2201      	movs	r2, #1
 8006130:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2200      	movs	r2, #0
 800613c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2200      	movs	r2, #0
 8006142:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	4a07      	ldr	r2, [pc, #28]	@ (800616c <LPS22HH_GetCapabilities+0x50>)
 8006150:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	4a05      	ldr	r2, [pc, #20]	@ (800616c <LPS22HH_GetCapabilities+0x50>)
 8006156:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr
 800616c:	43480000 	.word	0x43480000

08006170 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e014      	b.n	80061b0 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f103 0220 	add.w	r2, r3, #32
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f000 fb71 	bl	800687c <lps22hh_data_rate_set>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80061a0:	f04f 33ff 	mov.w	r3, #4294967295
 80061a4:	e004      	b.n	80061b0 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e024      	b.n	8006218 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d11a      	bne.n	800620e <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f103 0220 	add.w	r2, r3, #32
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3333      	adds	r3, #51	@ 0x33
 80061e2:	4619      	mov	r1, r3
 80061e4:	4610      	mov	r0, r2
 80061e6:	f000 fb97 	bl	8006918 <lps22hh_data_rate_get>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295
 80061f4:	e010      	b.n	8006218 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3320      	adds	r3, #32
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fb3d 	bl	800687c <lps22hh_data_rate_set>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006208:	f04f 33ff 	mov.w	r3, #4294967295
 800620c:	e004      	b.n	8006218 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f905 	bl	800643c <LPS22HH_GetOutputDataRate>
 8006232:	4603      	mov	r3, r0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800624c:	2b01      	cmp	r3, #1
 800624e:	d105      	bne.n	800625c <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f956 	bl	8006504 <LPS22HH_SetOutputDataRate_When_Enabled>
 8006258:	4603      	mov	r3, r0
 800625a:	e004      	b.n	8006266 <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9ba 	bl	80065d8 <LPS22HH_SetOutputDataRate_When_Disabled>
 8006264:	4603      	mov	r3, r0
  }
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8006278:	f107 030c 	add.w	r3, r7, #12
 800627c:	2204      	movs	r2, #4
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f009 fcfb 	bl	800fc7c <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3320      	adds	r3, #32
 800628a:	f107 020c 	add.w	r2, r7, #12
 800628e:	4611      	mov	r1, r2
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fbe9 	bl	8006a68 <lps22hh_pressure_raw_get>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800629c:	f04f 33ff 	mov.w	r3, #4294967295
 80062a0:	e007      	b.n	80062b2 <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fa9a 	bl	80067de <lps22hh_from_lsb_to_hpa>
 80062aa:	4602      	mov	r2, r0
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	e014      	b.n	80062fa <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f103 0220 	add.w	r2, r3, #32
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f000 facc 	bl	800687c <lps22hh_data_rate_set>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295
 80062ee:	e004      	b.n	80062fa <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e024      	b.n	8006362 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800631e:	2b00      	cmp	r3, #0
 8006320:	d11a      	bne.n	8006358 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f103 0220 	add.w	r2, r3, #32
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3333      	adds	r3, #51	@ 0x33
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f000 faf2 	bl	8006918 <lps22hh_data_rate_get>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800633a:	f04f 33ff 	mov.w	r3, #4294967295
 800633e:	e010      	b.n	8006362 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3320      	adds	r3, #32
 8006344:	2100      	movs	r1, #0
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fa98 	bl	800687c <lps22hh_data_rate_set>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
 8006356:	e004      	b.n	8006362 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f860 	bl	800643c <LPS22HH_GetOutputDataRate>
 800637c:	4603      	mov	r3, r0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f8b1 	bl	8006504 <LPS22HH_SetOutputDataRate_When_Enabled>
 80063a2:	4603      	mov	r3, r0
 80063a4:	e004      	b.n	80063b0 <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f915 	bl	80065d8 <LPS22HH_SetOutputDataRate_When_Disabled>
 80063ae:	4603      	mov	r3, r0
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80063c2:	f107 030c 	add.w	r3, r7, #12
 80063c6:	2202      	movs	r2, #2
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f009 fc56 	bl	800fc7c <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3320      	adds	r3, #32
 80063d4:	f107 020c 	add.w	r2, r7, #12
 80063d8:	4611      	mov	r1, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fb6d 	bl	8006aba <lps22hh_temperature_raw_get>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80063e6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ea:	e008      	b.n	80063fe <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80063ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fa07 	bl	8006804 <lps22hh_from_lsb_to_celsius>
 80063f6:	4602      	mov	r2, r0
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	70fb      	strb	r3, [r7, #3]
 8006412:	4613      	mov	r3, r2
 8006414:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f103 0020 	add.w	r0, r3, #32
 800641c:	1cba      	adds	r2, r7, #2
 800641e:	78f9      	ldrb	r1, [r7, #3]
 8006420:	2301      	movs	r3, #1
 8006422:	f000 f9c4 	bl	80067ae <lps22hh_write_reg>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
 8006430:	e000      	b.n	8006434 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3320      	adds	r3, #32
 800644e:	f107 020b 	add.w	r2, r7, #11
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fa5f 	bl	8006918 <lps22hh_data_rate_get>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	e03d      	b.n	80064e2 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8006466:	7afb      	ldrb	r3, [r7, #11]
 8006468:	2b07      	cmp	r3, #7
 800646a:	d835      	bhi.n	80064d8 <LPS22HH_GetOutputDataRate+0x9c>
 800646c:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <LPS22HH_GetOutputDataRate+0x38>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	08006495 	.word	0x08006495
 8006478:	0800649f 	.word	0x0800649f
 800647c:	080064a9 	.word	0x080064a9
 8006480:	080064b1 	.word	0x080064b1
 8006484:	080064b9 	.word	0x080064b9
 8006488:	080064c1 	.word	0x080064c1
 800648c:	080064c9 	.word	0x080064c9
 8006490:	080064d1 	.word	0x080064d1
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
      break;
 800649c:	e020      	b.n	80064e0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80064a4:	601a      	str	r2, [r3, #0]
      break;
 80064a6:	e01b      	b.n	80064e0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	4a10      	ldr	r2, [pc, #64]	@ (80064ec <LPS22HH_GetOutputDataRate+0xb0>)
 80064ac:	601a      	str	r2, [r3, #0]
      break;
 80064ae:	e017      	b.n	80064e0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	4a0f      	ldr	r2, [pc, #60]	@ (80064f0 <LPS22HH_GetOutputDataRate+0xb4>)
 80064b4:	601a      	str	r2, [r3, #0]
      break;
 80064b6:	e013      	b.n	80064e0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	4a0e      	ldr	r2, [pc, #56]	@ (80064f4 <LPS22HH_GetOutputDataRate+0xb8>)
 80064bc:	601a      	str	r2, [r3, #0]
      break;
 80064be:	e00f      	b.n	80064e0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	4a0d      	ldr	r2, [pc, #52]	@ (80064f8 <LPS22HH_GetOutputDataRate+0xbc>)
 80064c4:	601a      	str	r2, [r3, #0]
      break;
 80064c6:	e00b      	b.n	80064e0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <LPS22HH_GetOutputDataRate+0xc0>)
 80064cc:	601a      	str	r2, [r3, #0]
      break;
 80064ce:	e007      	b.n	80064e0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006500 <LPS22HH_GetOutputDataRate+0xc4>)
 80064d4:	601a      	str	r2, [r3, #0]
      break;
 80064d6:	e003      	b.n	80064e0 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295
 80064dc:	60fb      	str	r3, [r7, #12]
      break;
 80064de:	bf00      	nop
  }

  return ret;
 80064e0:	68fb      	ldr	r3, [r7, #12]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	41200000 	.word	0x41200000
 80064f0:	41c80000 	.word	0x41c80000
 80064f4:	42480000 	.word	0x42480000
 80064f8:	42960000 	.word	0x42960000
 80064fc:	42c80000 	.word	0x42c80000
 8006500:	43480000 	.word	0x43480000

08006504 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800650e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006512:	6838      	ldr	r0, [r7, #0]
 8006514:	f7fa fdf6 	bl	8001104 <__aeabi_fcmple>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 800651e:	2301      	movs	r3, #1
 8006520:	e02d      	b.n	800657e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006522:	4928      	ldr	r1, [pc, #160]	@ (80065c4 <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 8006524:	6838      	ldr	r0, [r7, #0]
 8006526:	f7fa fded 	bl	8001104 <__aeabi_fcmple>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 8006530:	2302      	movs	r3, #2
 8006532:	e024      	b.n	800657e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006534:	4924      	ldr	r1, [pc, #144]	@ (80065c8 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 8006536:	6838      	ldr	r0, [r7, #0]
 8006538:	f7fa fde4 	bl	8001104 <__aeabi_fcmple>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 8006542:	2303      	movs	r3, #3
 8006544:	e01b      	b.n	800657e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006546:	4921      	ldr	r1, [pc, #132]	@ (80065cc <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 8006548:	6838      	ldr	r0, [r7, #0]
 800654a:	f7fa fddb 	bl	8001104 <__aeabi_fcmple>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 8006554:	2304      	movs	r3, #4
 8006556:	e012      	b.n	800657e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006558:	491d      	ldr	r1, [pc, #116]	@ (80065d0 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 800655a:	6838      	ldr	r0, [r7, #0]
 800655c:	f7fa fdd2 	bl	8001104 <__aeabi_fcmple>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 8006566:	2305      	movs	r3, #5
 8006568:	e009      	b.n	800657e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800656a:	491a      	ldr	r1, [pc, #104]	@ (80065d4 <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 800656c:	6838      	ldr	r0, [r7, #0]
 800656e:	f7fa fdc9 	bl	8001104 <__aeabi_fcmple>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 8006578:	2306      	movs	r3, #6
 800657a:	e000      	b.n	800657e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800657c:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800657e:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3320      	adds	r3, #32
 8006584:	7bfa      	ldrb	r2, [r7, #15]
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f000 f977 	bl	800687c <lps22hh_data_rate_set>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
 8006598:	e00f      	b.n	80065ba <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f103 0220 	add.w	r2, r3, #32
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3333      	adds	r3, #51	@ 0x33
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f000 f9b6 	bl	8006918 <lps22hh_data_rate_get>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	e000      	b.n	80065ba <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	41200000 	.word	0x41200000
 80065c8:	41c80000 	.word	0x41c80000
 80065cc:	42480000 	.word	0x42480000
 80065d0:	42960000 	.word	0x42960000
 80065d4:	42c80000 	.word	0x42c80000

080065d8 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80065e2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80065e6:	6838      	ldr	r0, [r7, #0]
 80065e8:	f7fa fd8c 	bl	8001104 <__aeabi_fcmple>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e02d      	b.n	8006652 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80065f6:	491b      	ldr	r1, [pc, #108]	@ (8006664 <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 80065f8:	6838      	ldr	r0, [r7, #0]
 80065fa:	f7fa fd83 	bl	8001104 <__aeabi_fcmple>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 8006604:	2302      	movs	r3, #2
 8006606:	e024      	b.n	8006652 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006608:	4917      	ldr	r1, [pc, #92]	@ (8006668 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 800660a:	6838      	ldr	r0, [r7, #0]
 800660c:	f7fa fd7a 	bl	8001104 <__aeabi_fcmple>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 8006616:	2303      	movs	r3, #3
 8006618:	e01b      	b.n	8006652 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800661a:	4914      	ldr	r1, [pc, #80]	@ (800666c <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 800661c:	6838      	ldr	r0, [r7, #0]
 800661e:	f7fa fd71 	bl	8001104 <__aeabi_fcmple>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 8006628:	2304      	movs	r3, #4
 800662a:	e012      	b.n	8006652 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800662c:	4910      	ldr	r1, [pc, #64]	@ (8006670 <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 800662e:	6838      	ldr	r0, [r7, #0]
 8006630:	f7fa fd68 	bl	8001104 <__aeabi_fcmple>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 800663a:	2305      	movs	r3, #5
 800663c:	e009      	b.n	8006652 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800663e:	490d      	ldr	r1, [pc, #52]	@ (8006674 <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 8006640:	6838      	ldr	r0, [r7, #0]
 8006642:	f7fa fd5f 	bl	8001104 <__aeabi_fcmple>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 800664c:	2306      	movs	r3, #6
 800664e:	e000      	b.n	8006652 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006650:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	41200000 	.word	0x41200000
 8006668:	41c80000 	.word	0x41c80000
 800666c:	42480000 	.word	0x42480000
 8006670:	42960000 	.word	0x42960000
 8006674:	42c80000 	.word	0x42c80000

08006678 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b03      	cmp	r3, #3
 8006686:	d00b      	beq.n	80066a0 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3320      	adds	r3, #32
 800668c:	2111      	movs	r1, #17
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fa92 	bl	8006bb8 <lps22hh_i3c_interface_set>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 800669a:	f04f 33ff 	mov.w	r3, #4294967295
 800669e:	e034      	b.n	800670a <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3320      	adds	r3, #32
 80066a4:	2110      	movs	r1, #16
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f8e8 	bl	800687c <lps22hh_data_rate_set>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295
 80066b6:	e028      	b.n	800670a <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3320      	adds	r3, #32
 80066bc:	2100      	movs	r1, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fa54 	bl	8006b6c <lps22hh_lp_bandwidth_set>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295
 80066ce:	e01c      	b.n	800670a <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3320      	adds	r3, #32
 80066d4:	2101      	movs	r1, #1
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 f8aa 	bl	8006830 <lps22hh_block_data_update_set>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 80066e2:	f04f 33ff 	mov.w	r3, #4294967295
 80066e6:	e010      	b.n	800670a <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3320      	adds	r3, #32
 80066ec:	2101      	movs	r1, #1
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fa16 	bl	8006b20 <lps22hh_auto_increment_set>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 80066fa:	f04f 33ff 	mov.w	r3, #4294967295
 80066fe:	e004      	b.n	800670a <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2203      	movs	r2, #3
 8006704:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006712:	b590      	push	{r4, r7, lr}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	461a      	mov	r2, r3
 800671e:	460b      	mov	r3, r1
 8006720:	72fb      	strb	r3, [r7, #11]
 8006722:	4613      	mov	r3, r2
 8006724:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	695c      	ldr	r4, [r3, #20]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	7b1b      	ldrb	r3, [r3, #12]
 8006732:	4618      	mov	r0, r3
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	b299      	uxth	r1, r3
 8006738:	893b      	ldrh	r3, [r7, #8]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	47a0      	blx	r4
 800673e:	4603      	mov	r3, r0
}
 8006740:	4618      	mov	r0, r3
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	bd90      	pop	{r4, r7, pc}

08006748 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006748:	b590      	push	{r4, r7, lr}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	461a      	mov	r2, r3
 8006754:	460b      	mov	r3, r1
 8006756:	72fb      	strb	r3, [r7, #11]
 8006758:	4613      	mov	r3, r2
 800675a:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	691c      	ldr	r4, [r3, #16]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	7b1b      	ldrb	r3, [r3, #12]
 8006768:	4618      	mov	r0, r3
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	b299      	uxth	r1, r3
 800676e:	893b      	ldrh	r3, [r7, #8]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	47a0      	blx	r4
 8006774:	4603      	mov	r3, r0
}
 8006776:	4618      	mov	r0, r3
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	bd90      	pop	{r4, r7, pc}

0800677e <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800677e:	b590      	push	{r4, r7, lr}
 8006780:	b087      	sub	sp, #28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	461a      	mov	r2, r3
 800678a:	460b      	mov	r3, r1
 800678c:	72fb      	strb	r3, [r7, #11]
 800678e:	4613      	mov	r3, r2
 8006790:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685c      	ldr	r4, [r3, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68d8      	ldr	r0, [r3, #12]
 800679a:	893b      	ldrh	r3, [r7, #8]
 800679c:	7af9      	ldrb	r1, [r7, #11]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	47a0      	blx	r4
 80067a2:	6178      	str	r0, [r7, #20]

  return ret;
 80067a4:	697b      	ldr	r3, [r7, #20]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd90      	pop	{r4, r7, pc}

080067ae <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80067ae:	b590      	push	{r4, r7, lr}
 80067b0:	b087      	sub	sp, #28
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	461a      	mov	r2, r3
 80067ba:	460b      	mov	r3, r1
 80067bc:	72fb      	strb	r3, [r7, #11]
 80067be:	4613      	mov	r3, r2
 80067c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681c      	ldr	r4, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68d8      	ldr	r0, [r3, #12]
 80067ca:	893b      	ldrh	r3, [r7, #8]
 80067cc:	7af9      	ldrb	r1, [r7, #11]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	47a0      	blx	r4
 80067d2:	6178      	str	r0, [r7, #20]

  return ret;
 80067d4:	697b      	ldr	r3, [r7, #20]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd90      	pop	{r4, r7, pc}

080067de <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fa fa8c 	bl	8000d04 <__aeabi_ui2f>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fa fb92 	bl	8000f1c <__aeabi_fdiv>
 80067f8:	4603      	mov	r3, r0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800680e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006812:	4618      	mov	r0, r3
 8006814:	f7fa fa7a 	bl	8000d0c <__aeabi_i2f>
 8006818:	4603      	mov	r3, r0
 800681a:	4904      	ldr	r1, [pc, #16]	@ (800682c <lps22hh_from_lsb_to_celsius+0x28>)
 800681c:	4618      	mov	r0, r3
 800681e:	f7fa fb7d 	bl	8000f1c <__aeabi_fdiv>
 8006822:	4603      	mov	r3, r0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	42c80000 	.word	0x42c80000

08006830 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800683c:	f107 0208 	add.w	r2, r7, #8
 8006840:	2301      	movs	r3, #1
 8006842:	2110      	movs	r1, #16
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff ff9a 	bl	800677e <lps22hh_read_reg>
 800684a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10f      	bne.n	8006872 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	7a3b      	ldrb	r3, [r7, #8]
 800685c:	f362 0341 	bfi	r3, r2, #1, #1
 8006860:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006862:	f107 0208 	add.w	r2, r7, #8
 8006866:	2301      	movs	r3, #1
 8006868:	2110      	movs	r1, #16
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff ff9f 	bl	80067ae <lps22hh_write_reg>
 8006870:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006888:	f107 0210 	add.w	r2, r7, #16
 800688c:	2301      	movs	r3, #1
 800688e:	2110      	movs	r1, #16
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff ff74 	bl	800677e <lps22hh_read_reg>
 8006896:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d107      	bne.n	80068ae <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800689e:	f107 020c 	add.w	r2, r7, #12
 80068a2:	2301      	movs	r3, #1
 80068a4:	2111      	movs	r1, #17
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ff69 	bl	800677e <lps22hh_read_reg>
 80068ac:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10f      	bne.n	80068d4 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	7c3b      	ldrb	r3, [r7, #16]
 80068be:	f362 1306 	bfi	r3, r2, #4, #3
 80068c2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80068c4:	f107 0210 	add.w	r2, r7, #16
 80068c8:	2301      	movs	r3, #1
 80068ca:	2110      	movs	r1, #16
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ff6e 	bl	80067ae <lps22hh_write_reg>
 80068d2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d119      	bne.n	800690e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	091b      	lsrs	r3, r3, #4
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	7b3b      	ldrb	r3, [r7, #12]
 80068e6:	f362 0341 	bfi	r3, r2, #1, #1
 80068ea:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	08db      	lsrs	r3, r3, #3
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	7b3b      	ldrb	r3, [r7, #12]
 80068f8:	f362 0300 	bfi	r3, r2, #0, #1
 80068fc:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80068fe:	f107 020c 	add.w	r2, r7, #12
 8006902:	2301      	movs	r3, #1
 8006904:	2111      	movs	r1, #17
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff ff51 	bl	80067ae <lps22hh_write_reg>
 800690c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800690e:	697b      	ldr	r3, [r7, #20]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006922:	f107 0210 	add.w	r2, r7, #16
 8006926:	2301      	movs	r3, #1
 8006928:	2110      	movs	r1, #16
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff ff27 	bl	800677e <lps22hh_read_reg>
 8006930:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d107      	bne.n	8006948 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006938:	f107 020c 	add.w	r2, r7, #12
 800693c:	2301      	movs	r3, #1
 800693e:	2111      	movs	r1, #17
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff ff1c 	bl	800677e <lps22hh_read_reg>
 8006946:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 8086 	bne.w	8006a5c <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006950:	f107 020c 	add.w	r2, r7, #12
 8006954:	2301      	movs	r3, #1
 8006956:	2111      	movs	r1, #17
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ff10 	bl	800677e <lps22hh_read_reg>
 800695e:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006960:	7b3b      	ldrb	r3, [r7, #12]
 8006962:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	011a      	lsls	r2, r3, #4
 800696a:	7b3b      	ldrb	r3, [r7, #12]
 800696c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8006976:	7c3a      	ldrb	r2, [r7, #16]
 8006978:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800697c:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800697e:	4413      	add	r3, r2
 8006980:	2b15      	cmp	r3, #21
 8006982:	d867      	bhi.n	8006a54 <lps22hh_data_rate_get+0x13c>
 8006984:	a201      	add	r2, pc, #4	@ (adr r2, 800698c <lps22hh_data_rate_get+0x74>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069e5 	.word	0x080069e5
 8006990:	080069f5 	.word	0x080069f5
 8006994:	080069fd 	.word	0x080069fd
 8006998:	08006a05 	.word	0x08006a05
 800699c:	08006a0d 	.word	0x08006a0d
 80069a0:	08006a15 	.word	0x08006a15
 80069a4:	08006a45 	.word	0x08006a45
 80069a8:	08006a4d 	.word	0x08006a4d
 80069ac:	080069ed 	.word	0x080069ed
 80069b0:	08006a55 	.word	0x08006a55
 80069b4:	08006a55 	.word	0x08006a55
 80069b8:	08006a55 	.word	0x08006a55
 80069bc:	08006a55 	.word	0x08006a55
 80069c0:	08006a55 	.word	0x08006a55
 80069c4:	08006a55 	.word	0x08006a55
 80069c8:	08006a55 	.word	0x08006a55
 80069cc:	08006a55 	.word	0x08006a55
 80069d0:	08006a1d 	.word	0x08006a1d
 80069d4:	08006a25 	.word	0x08006a25
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	08006a35 	.word	0x08006a35
 80069e0:	08006a3d 	.word	0x08006a3d
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
        break;
 80069ea:	e037      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2208      	movs	r2, #8
 80069f0:	701a      	strb	r2, [r3, #0]
        break;
 80069f2:	e033      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2201      	movs	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]
        break;
 80069fa:	e02f      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2202      	movs	r2, #2
 8006a00:	701a      	strb	r2, [r3, #0]
        break;
 8006a02:	e02b      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2203      	movs	r2, #3
 8006a08:	701a      	strb	r2, [r3, #0]
        break;
 8006a0a:	e027      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2204      	movs	r2, #4
 8006a10:	701a      	strb	r2, [r3, #0]
        break;
 8006a12:	e023      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2205      	movs	r2, #5
 8006a18:	701a      	strb	r2, [r3, #0]
        break;
 8006a1a:	e01f      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2211      	movs	r2, #17
 8006a20:	701a      	strb	r2, [r3, #0]
        break;
 8006a22:	e01b      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2212      	movs	r2, #18
 8006a28:	701a      	strb	r2, [r3, #0]
        break;
 8006a2a:	e017      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2213      	movs	r2, #19
 8006a30:	701a      	strb	r2, [r3, #0]
        break;
 8006a32:	e013      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2214      	movs	r2, #20
 8006a38:	701a      	strb	r2, [r3, #0]
        break;
 8006a3a:	e00f      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2215      	movs	r2, #21
 8006a40:	701a      	strb	r2, [r3, #0]
        break;
 8006a42:	e00b      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2206      	movs	r2, #6
 8006a48:	701a      	strb	r2, [r3, #0]
        break;
 8006a4a:	e007      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2207      	movs	r2, #7
 8006a50:	701a      	strb	r2, [r3, #0]
        break;
 8006a52:	e003      	b.n	8006a5c <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]
        break;
 8006a5a:	bf00      	nop
    }
  }

  return ret;
 8006a5c:	697b      	ldr	r3, [r7, #20]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop

08006a68 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006a72:	f107 0208 	add.w	r2, r7, #8
 8006a76:	2303      	movs	r3, #3
 8006a78:	2128      	movs	r1, #40	@ 0x28
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fe7f 	bl	800677e <lps22hh_read_reg>
 8006a80:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006a82:	7abb      	ldrb	r3, [r7, #10]
 8006a84:	461a      	mov	r2, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	7a7a      	ldrb	r2, [r7, #9]
 8006a92:	441a      	add	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	7a3a      	ldrb	r2, [r7, #8]
 8006aa0:	441a      	add	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	021a      	lsls	r2, r3, #8
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	601a      	str	r2, [r3, #0]

  return ret;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006ac4:	f107 0208 	add.w	r2, r7, #8
 8006ac8:	2302      	movs	r3, #2
 8006aca:	212b      	movs	r1, #43	@ 0x2b
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff fe56 	bl	800677e <lps22hh_read_reg>
 8006ad2:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006ad4:	7a7b      	ldrb	r3, [r7, #9]
 8006ad6:	b21a      	sxth	r2, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	7a3a      	ldrb	r2, [r7, #8]
 8006aea:	4413      	add	r3, r2
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	b21a      	sxth	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	801a      	strh	r2, [r3, #0]

  return ret;
 8006af4:	68fb      	ldr	r3, [r7, #12]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006b08:	2301      	movs	r3, #1
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	210f      	movs	r1, #15
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fe35 	bl	800677e <lps22hh_read_reg>
 8006b14:	60f8      	str	r0, [r7, #12]

  return ret;
 8006b16:	68fb      	ldr	r3, [r7, #12]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006b2c:	f107 0208 	add.w	r2, r7, #8
 8006b30:	2301      	movs	r3, #1
 8006b32:	2111      	movs	r1, #17
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff fe22 	bl	800677e <lps22hh_read_reg>
 8006b3a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10f      	bne.n	8006b62 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	7a3b      	ldrb	r3, [r7, #8]
 8006b4c:	f362 1304 	bfi	r3, r2, #4, #1
 8006b50:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006b52:	f107 0208 	add.w	r2, r7, #8
 8006b56:	2301      	movs	r3, #1
 8006b58:	2111      	movs	r1, #17
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff fe27 	bl	80067ae <lps22hh_write_reg>
 8006b60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b62:	68fb      	ldr	r3, [r7, #12]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006b78:	f107 0208 	add.w	r2, r7, #8
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	2110      	movs	r1, #16
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff fdfc 	bl	800677e <lps22hh_read_reg>
 8006b86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10f      	bne.n	8006bae <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	f003 0303 	and.w	r3, r3, #3
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	7a3b      	ldrb	r3, [r7, #8]
 8006b98:	f362 0383 	bfi	r3, r2, #2, #2
 8006b9c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006b9e:	f107 0208 	add.w	r2, r7, #8
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	2110      	movs	r1, #16
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fe01 	bl	80067ae <lps22hh_write_reg>
 8006bac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bae:	68fb      	ldr	r3, [r7, #12]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006bc4:	f107 0208 	add.w	r2, r7, #8
 8006bc8:	2301      	movs	r3, #1
 8006bca:	210e      	movs	r1, #14
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff fdd6 	bl	800677e <lps22hh_read_reg>
 8006bd2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d118      	bne.n	8006c0c <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	7a3b      	ldrb	r3, [r7, #8]
 8006be4:	f362 0341 	bfi	r3, r2, #1, #1
 8006be8:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	7a3b      	ldrb	r3, [r7, #8]
 8006bf6:	f362 13c7 	bfi	r3, r2, #7, #1
 8006bfa:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006bfc:	f107 0208 	add.w	r2, r7, #8
 8006c00:	2301      	movs	r3, #1
 8006c02:	210e      	movs	r1, #14
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff fdd2 	bl	80067ae <lps22hh_write_reg>
 8006c0a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8006c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e051      	b.n	8006cd8 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	7b1a      	ldrb	r2, [r3, #12]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695a      	ldr	r2, [r3, #20]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	699a      	ldr	r2, [r3, #24]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce4 <LSM6DSO_RegisterBusIO+0xcc>)
 8006c70:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a1c      	ldr	r2, [pc, #112]	@ (8006ce8 <LSM6DSO_RegisterBusIO+0xd0>)
 8006c76:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e020      	b.n	8006cd8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4798      	blx	r3
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8006ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e016      	b.n	8006cd8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d112      	bne.n	8006cd8 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10d      	bne.n	8006cd8 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	2112      	movs	r1, #18
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 ff55 	bl	8007b76 <LSM6DSO_Write_Reg>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	08007f91 	.word	0x08007f91
 8006ce8:	08007fc7 	.word	0x08007fc7

08006cec <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d00b      	beq.n	8006d14 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3320      	adds	r3, #32
 8006d00:	2180      	movs	r1, #128	@ 0x80
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 fe38 	bl	8008978 <lsm6dso_i3c_disable_set>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8006d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d12:	e060      	b.n	8006dd6 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3320      	adds	r3, #32
 8006d18:	2101      	movs	r1, #1
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 fe06 	bl	800892c <lsm6dso_auto_increment_set>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8006d26:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2a:	e054      	b.n	8006dd6 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3320      	adds	r3, #32
 8006d30:	2101      	movs	r1, #1
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 fd16 	bl	8008764 <lsm6dso_block_data_update_set>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8006d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d42:	e048      	b.n	8006dd6 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3320      	adds	r3, #32
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fe5c 	bl	8008a08 <lsm6dso_fifo_mode_set>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8006d56:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5a:	e03c      	b.n	8006dd6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2204      	movs	r2, #4
 8006d60:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3320      	adds	r3, #32
 8006d68:	2100      	movs	r1, #0
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 f9d4 	bl	8008118 <lsm6dso_xl_data_rate_set>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8006d76:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7a:	e02c      	b.n	8006dd6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3320      	adds	r3, #32
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 f96a 	bl	800805c <lsm6dso_xl_full_scale_set>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8006d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d92:	e020      	b.n	8006dd6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2204      	movs	r2, #4
 8006d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3320      	adds	r3, #32
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 fb82 	bl	80084ac <lsm6dso_gy_data_rate_set>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8006dae:	f04f 33ff 	mov.w	r3, #4294967295
 8006db2:	e010      	b.n	8006dd6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3320      	adds	r3, #32
 8006db8:	2106      	movs	r1, #6
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 fb0e 	bl	80083dc <lsm6dso_gy_full_scale_set>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8006dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dca:	e004      	b.n	8006dd6 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f888 	bl	8006efc <LSM6DSO_ACC_Disable>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8006df2:	f04f 33ff 	mov.w	r3, #4294967295
 8006df6:	e015      	b.n	8006e24 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fc28 	bl	800764e <LSM6DSO_GYRO_Disable>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	e00c      	b.n	8006e24 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3320      	adds	r3, #32
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 fd64 	bl	800890a <lsm6dso_device_id_get>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8006e48:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4c:	e000      	b.n	8006e50 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2200      	movs	r2, #0
 8006e72:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2200      	movs	r2, #0
 8006e78:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006e80:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2210      	movs	r2, #16
 8006e86:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	4a07      	ldr	r2, [pc, #28]	@ (8006eb0 <LSM6DSO_GetCapabilities+0x58>)
 8006e92:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	4a06      	ldr	r2, [pc, #24]	@ (8006eb0 <LSM6DSO_GetCapabilities+0x58>)
 8006e98:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	45d02000 	.word	0x45d02000

08006eb4 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d101      	bne.n	8006eca <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e014      	b.n	8006ef4 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f103 0220 	add.w	r2, r3, #32
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f001 f91d 	bl	8008118 <lsm6dso_xl_data_rate_set>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee8:	e004      	b.n	8006ef4 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e01f      	b.n	8006f52 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f103 0220 	add.w	r2, r3, #32
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3333      	adds	r3, #51	@ 0x33
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	f001 f9f4 	bl	800830c <lsm6dso_xl_data_rate_get>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8006f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2e:	e010      	b.n	8006f52 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3320      	adds	r3, #32
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 f8ee 	bl	8008118 <lsm6dso_xl_data_rate_set>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006f42:	f04f 33ff 	mov.w	r3, #4294967295
 8006f46:	e004      	b.n	8006f52 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3320      	adds	r3, #32
 8006f6e:	f107 020b 	add.w	r2, r7, #11
 8006f72:	4611      	mov	r1, r2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 f897 	bl	80080a8 <lsm6dso_xl_full_scale_get>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006f80:	f04f 33ff 	mov.w	r3, #4294967295
 8006f84:	e023      	b.n	8006fce <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006f86:	7afb      	ldrb	r3, [r7, #11]
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d81b      	bhi.n	8006fc4 <LSM6DSO_ACC_GetSensitivity+0x68>
 8006f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fa5 	.word	0x08006fa5
 8006f98:	08006fbd 	.word	0x08006fbd
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fb5 	.word	0x08006fb5
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8006fa8:	601a      	str	r2, [r3, #0]
      break;
 8006faa:	e00f      	b.n	8006fcc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	4a0b      	ldr	r2, [pc, #44]	@ (8006fdc <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006fb0:	601a      	str	r2, [r3, #0]
      break;
 8006fb2:	e00b      	b.n	8006fcc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8006fb8:	601a      	str	r2, [r3, #0]
      break;
 8006fba:	e007      	b.n	8006fcc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	4a09      	ldr	r2, [pc, #36]	@ (8006fe4 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006fc0:	601a      	str	r2, [r3, #0]
      break;
 8006fc2:	e003      	b.n	8006fcc <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc8:	60fb      	str	r3, [r7, #12]
      break;
 8006fca:	bf00      	nop
  }

  return ret;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	3d79db23 	.word	0x3d79db23
 8006fdc:	3df9db23 	.word	0x3df9db23
 8006fe0:	3e79db23 	.word	0x3e79db23
 8006fe4:	3ef9db23 	.word	0x3ef9db23

08006fe8 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3320      	adds	r3, #32
 8006ffa:	f107 020b 	add.w	r2, r7, #11
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f983 	bl	800830c <lsm6dso_xl_data_rate_get>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800700c:	f04f 33ff 	mov.w	r3, #4294967295
 8007010:	e054      	b.n	80070bc <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	2b0b      	cmp	r3, #11
 8007016:	d84c      	bhi.n	80070b2 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8007018:	a201      	add	r2, pc, #4	@ (adr r2, 8007020 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	08007051 	.word	0x08007051
 8007024:	08007063 	.word	0x08007063
 8007028:	0800706b 	.word	0x0800706b
 800702c:	08007073 	.word	0x08007073
 8007030:	0800707b 	.word	0x0800707b
 8007034:	08007083 	.word	0x08007083
 8007038:	0800708b 	.word	0x0800708b
 800703c:	08007093 	.word	0x08007093
 8007040:	0800709b 	.word	0x0800709b
 8007044:	080070a3 	.word	0x080070a3
 8007048:	080070ab 	.word	0x080070ab
 800704c:	0800705b 	.word	0x0800705b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
      break;
 8007058:	e02f      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	4a19      	ldr	r2, [pc, #100]	@ (80070c4 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800705e:	601a      	str	r2, [r3, #0]
      break;
 8007060:	e02b      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	4a18      	ldr	r2, [pc, #96]	@ (80070c8 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8007066:	601a      	str	r2, [r3, #0]
      break;
 8007068:	e027      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	4a17      	ldr	r2, [pc, #92]	@ (80070cc <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800706e:	601a      	str	r2, [r3, #0]
      break;
 8007070:	e023      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	4a16      	ldr	r2, [pc, #88]	@ (80070d0 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8007076:	601a      	str	r2, [r3, #0]
      break;
 8007078:	e01f      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	4a15      	ldr	r2, [pc, #84]	@ (80070d4 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800707e:	601a      	str	r2, [r3, #0]
      break;
 8007080:	e01b      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	4a14      	ldr	r2, [pc, #80]	@ (80070d8 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8007086:	601a      	str	r2, [r3, #0]
      break;
 8007088:	e017      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	4a13      	ldr	r2, [pc, #76]	@ (80070dc <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800708e:	601a      	str	r2, [r3, #0]
      break;
 8007090:	e013      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	4a12      	ldr	r2, [pc, #72]	@ (80070e0 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8007096:	601a      	str	r2, [r3, #0]
      break;
 8007098:	e00f      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	4a11      	ldr	r2, [pc, #68]	@ (80070e4 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800709e:	601a      	str	r2, [r3, #0]
      break;
 80070a0:	e00b      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	4a10      	ldr	r2, [pc, #64]	@ (80070e8 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80070a6:	601a      	str	r2, [r3, #0]
      break;
 80070a8:	e007      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	4a0f      	ldr	r2, [pc, #60]	@ (80070ec <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80070ae:	601a      	str	r2, [r3, #0]
      break;
 80070b0:	e003      	b.n	80070ba <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
 80070b6:	60fb      	str	r3, [r7, #12]
      break;
 80070b8:	bf00      	nop
  }

  return ret;
 80070ba:	68fb      	ldr	r3, [r7, #12]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	3fcccccd 	.word	0x3fcccccd
 80070c8:	41480000 	.word	0x41480000
 80070cc:	41d00000 	.word	0x41d00000
 80070d0:	42500000 	.word	0x42500000
 80070d4:	42d00000 	.word	0x42d00000
 80070d8:	43500000 	.word	0x43500000
 80070dc:	43d08000 	.word	0x43d08000
 80070e0:	44504000 	.word	0x44504000
 80070e4:	44d06000 	.word	0x44d06000
 80070e8:	45505000 	.word	0x45505000
 80070ec:	45d05800 	.word	0x45d05800

080070f0 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80070fa:	2200      	movs	r2, #0
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f806 	bl	8007110 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8007104:	4603      	mov	r3, r0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08c      	sub	sp, #48	@ 0x30
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	2b02      	cmp	r3, #2
 800712a:	f000 80e6 	beq.w	80072fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ea>
 800712e:	2b02      	cmp	r3, #2
 8007130:	f300 815d 	bgt.w	80073ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e>
 8007138:	2b01      	cmp	r3, #1
 800713a:	d072      	beq.n	8007222 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 800713c:	e157      	b.n	80073ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f103 0020 	add.w	r0, r3, #32
 8007144:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8007148:	2301      	movs	r3, #1
 800714a:	2114      	movs	r1, #20
 800714c:	f000 ff56 	bl	8007ffc <lsm6dso_read_reg>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4c>
      {
        return LSM6DSO_ERROR;
 8007156:	f04f 33ff 	mov.w	r3, #4294967295
 800715a:	e164      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 800715c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007160:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d025      	beq.n	80071b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007170:	2b01      	cmp	r3, #1
 8007172:	d10b      	bne.n	800718c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3320      	adds	r3, #32
 8007178:	2100      	movs	r1, #0
 800717a:	4618      	mov	r0, r3
 800717c:	f000 ffcc 	bl	8008118 <lsm6dso_xl_data_rate_set>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          {
            return LSM6DSO_ERROR;
 8007186:	f04f 33ff 	mov.w	r3, #4294967295
 800718a:	e14c      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 800718c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007190:	f36f 13c7 	bfc	r3, #7, #1
 8007194:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f103 0020 	add.w	r0, r3, #32
 800719e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80071a2:	2301      	movs	r3, #1
 80071a4:	2114      	movs	r1, #20
 80071a6:	f000 ff41 	bl	800802c <lsm6dso_write_reg>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
        {
          return LSM6DSO_ERROR;
 80071b0:	f04f 33ff 	mov.w	r3, #4294967295
 80071b4:	e137      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f103 0020 	add.w	r0, r3, #32
 80071bc:	f107 0220 	add.w	r2, r7, #32
 80071c0:	2301      	movs	r3, #1
 80071c2:	2115      	movs	r1, #21
 80071c4:	f000 ff1a 	bl	8007ffc <lsm6dso_read_reg>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc4>
      {
        return LSM6DSO_ERROR;
 80071ce:	f04f 33ff 	mov.w	r3, #4294967295
 80071d2:	e128      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 80071d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d014      	beq.n	800720c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
      {
        val2.xl_hm_mode = 0U;
 80071e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071e6:	f36f 1304 	bfc	r3, #4, #1
 80071ea:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f103 0020 	add.w	r0, r3, #32
 80071f4:	f107 0220 	add.w	r2, r7, #32
 80071f8:	2301      	movs	r3, #1
 80071fa:	2115      	movs	r1, #21
 80071fc:	f000 ff16 	bl	800802c <lsm6dso_write_reg>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
        {
          return LSM6DSO_ERROR;
 8007206:	f04f 33ff 	mov.w	r3, #4294967295
 800720a:	e10c      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800720c:	4988      	ldr	r1, [pc, #544]	@ (8007430 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800720e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007210:	f7f9 ff6e 	bl	80010f0 <__aeabi_fcmplt>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d100      	bne.n	800721c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 800721a:	e0ec      	b.n	80073f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 12.5f;
 800721c:	4b84      	ldr	r3, [pc, #528]	@ (8007430 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800721e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007220:	e0e9      	b.n	80073f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f103 0020 	add.w	r0, r3, #32
 8007228:	f107 021c 	add.w	r2, r7, #28
 800722c:	2301      	movs	r3, #1
 800722e:	2114      	movs	r1, #20
 8007230:	f000 fee4 	bl	8007ffc <lsm6dso_read_reg>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	e0f2      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 8007240:	7f3b      	ldrb	r3, [r7, #28]
 8007242:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d023      	beq.n	8007294 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007252:	2b01      	cmp	r3, #1
 8007254:	d10b      	bne.n	800726e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3320      	adds	r3, #32
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f000 ff5b 	bl	8008118 <lsm6dso_xl_data_rate_set>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 8007268:	f04f 33ff 	mov.w	r3, #4294967295
 800726c:	e0db      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 800726e:	7f3b      	ldrb	r3, [r7, #28]
 8007270:	f36f 13c7 	bfc	r3, #7, #1
 8007274:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f103 0020 	add.w	r0, r3, #32
 800727c:	f107 021c 	add.w	r2, r7, #28
 8007280:	2301      	movs	r3, #1
 8007282:	2114      	movs	r1, #20
 8007284:	f000 fed2 	bl	800802c <lsm6dso_write_reg>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
 8007292:	e0c8      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f103 0020 	add.w	r0, r3, #32
 800729a:	f107 0218 	add.w	r2, r7, #24
 800729e:	2301      	movs	r3, #1
 80072a0:	2115      	movs	r1, #21
 80072a2:	f000 feab 	bl	8007ffc <lsm6dso_read_reg>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 80072ac:	f04f 33ff 	mov.w	r3, #4294967295
 80072b0:	e0b9      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode == 0U)
 80072b2:	7e3b      	ldrb	r3, [r7, #24]
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d112      	bne.n	80072e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 80072be:	7e3b      	ldrb	r3, [r7, #24]
 80072c0:	f043 0310 	orr.w	r3, r3, #16
 80072c4:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f103 0020 	add.w	r0, r3, #32
 80072cc:	f107 0218 	add.w	r2, r7, #24
 80072d0:	2301      	movs	r3, #1
 80072d2:	2115      	movs	r1, #21
 80072d4:	f000 feaa 	bl	800802c <lsm6dso_write_reg>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 80072de:	f04f 33ff 	mov.w	r3, #4294967295
 80072e2:	e0a0      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80072e4:	4953      	ldr	r1, [pc, #332]	@ (8007434 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80072e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072e8:	f7f9 ff20 	bl	800112c <__aeabi_fcmpgt>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d100      	bne.n	80072f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e4>
      {
        newOdr = 208.0f;
      }
      break;
 80072f2:	e080      	b.n	80073f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 80072f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007434 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80072f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072f8:	e07d      	b.n	80073f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f103 0020 	add.w	r0, r3, #32
 8007300:	f107 0210 	add.w	r2, r7, #16
 8007304:	2301      	movs	r3, #1
 8007306:	2115      	movs	r1, #21
 8007308:	f000 fe78 	bl	8007ffc <lsm6dso_read_reg>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      {
        return LSM6DSO_ERROR;
 8007312:	f04f 33ff 	mov.w	r3, #4294967295
 8007316:	e086      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 8007318:	7c3b      	ldrb	r3, [r7, #16]
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d012      	beq.n	800734a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
      {
        val2.xl_hm_mode = 0U;
 8007324:	7c3b      	ldrb	r3, [r7, #16]
 8007326:	f36f 1304 	bfc	r3, #4, #1
 800732a:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f103 0020 	add.w	r0, r3, #32
 8007332:	f107 0210 	add.w	r2, r7, #16
 8007336:	2301      	movs	r3, #1
 8007338:	2115      	movs	r1, #21
 800733a:	f000 fe77 	bl	800802c <lsm6dso_write_reg>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
        {
          return LSM6DSO_ERROR;
 8007344:	f04f 33ff 	mov.w	r3, #4294967295
 8007348:	e06d      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007350:	2b01      	cmp	r3, #1
 8007352:	d108      	bne.n	8007366 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f97a 	bl	800764e <LSM6DSO_GYRO_Disable>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
        {
          return LSM6DSO_ERROR;
 8007360:	f04f 33ff 	mov.w	r3, #4294967295
 8007364:	e05f      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f103 0020 	add.w	r0, r3, #32
 800736c:	f107 0214 	add.w	r2, r7, #20
 8007370:	2301      	movs	r3, #1
 8007372:	2114      	movs	r1, #20
 8007374:	f000 fe42 	bl	8007ffc <lsm6dso_read_reg>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x274>
      {
        return LSM6DSO_ERROR;
 800737e:	f04f 33ff 	mov.w	r3, #4294967295
 8007382:	e050      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en == 0U)
 8007384:	7d3b      	ldrb	r3, [r7, #20]
 8007386:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d123      	bne.n	80073d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007396:	2b01      	cmp	r3, #1
 8007398:	d10b      	bne.n	80073b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3320      	adds	r3, #32
 800739e:	2100      	movs	r1, #0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 feb9 	bl	8008118 <lsm6dso_xl_data_rate_set>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
          {
            return LSM6DSO_ERROR;
 80073ac:	f04f 33ff 	mov.w	r3, #4294967295
 80073b0:	e039      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 1U;
 80073b2:	7d3b      	ldrb	r3, [r7, #20]
 80073b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b8:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f103 0020 	add.w	r0, r3, #32
 80073c0:	f107 0214 	add.w	r2, r7, #20
 80073c4:	2301      	movs	r3, #1
 80073c6:	2114      	movs	r1, #20
 80073c8:	f000 fe30 	bl	800802c <lsm6dso_write_reg>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
        {
          return LSM6DSO_ERROR;
 80073d2:	f04f 33ff 	mov.w	r3, #4294967295
 80073d6:	e026      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80073d8:	4916      	ldr	r1, [pc, #88]	@ (8007434 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80073da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073dc:	f7f9 fea6 	bl	800112c <__aeabi_fcmpgt>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d100      	bne.n	80073e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      {
        newOdr = 208.0f;
      }
      break;
 80073e6:	e006      	b.n	80073f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 80073e8:	4b12      	ldr	r3, [pc, #72]	@ (8007434 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 80073ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073ec:	e003      	b.n	80073f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    }
    default:
      ret = LSM6DSO_ERROR;
 80073ee:	f04f 33ff 	mov.w	r3, #4294967295
 80073f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80073f4:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80073f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fc:	d102      	bne.n	8007404 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
  {
    return LSM6DSO_ERROR;
 80073fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007402:	e010      	b.n	8007426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
  }

  if (pObj->acc_is_enabled == 1U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800740a:	2b01      	cmp	r3, #1
 800740c:	d105      	bne.n	800741a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800740e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fbcb 	bl	8007bac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8007416:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007418:	e004      	b.n	8007424 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800741a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fc4d 	bl	8007cbc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8007422:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8007424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007426:	4618      	mov	r0, r3
 8007428:	3730      	adds	r7, #48	@ 0x30
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	41480000 	.word	0x41480000
 8007434:	43500000 	.word	0x43500000

08007438 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3320      	adds	r3, #32
 800744a:	f107 020b 	add.w	r2, r7, #11
 800744e:	4611      	mov	r1, r2
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fe29 	bl	80080a8 <lsm6dso_xl_full_scale_get>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800745c:	f04f 33ff 	mov.w	r3, #4294967295
 8007460:	e023      	b.n	80074aa <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	2b03      	cmp	r3, #3
 8007466:	d81b      	bhi.n	80074a0 <LSM6DSO_ACC_GetFullScale+0x68>
 8007468:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <LSM6DSO_ACC_GetFullScale+0x38>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007481 	.word	0x08007481
 8007474:	08007499 	.word	0x08007499
 8007478:	08007489 	.word	0x08007489
 800747c:	08007491 	.word	0x08007491
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2202      	movs	r2, #2
 8007484:	601a      	str	r2, [r3, #0]
      break;
 8007486:	e00f      	b.n	80074a8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2204      	movs	r2, #4
 800748c:	601a      	str	r2, [r3, #0]
      break;
 800748e:	e00b      	b.n	80074a8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2208      	movs	r2, #8
 8007494:	601a      	str	r2, [r3, #0]
      break;
 8007496:	e007      	b.n	80074a8 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2210      	movs	r2, #16
 800749c:	601a      	str	r2, [r3, #0]
      break;
 800749e:	e003      	b.n	80074a8 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	60fb      	str	r3, [r7, #12]
      break;
 80074a6:	bf00      	nop
  }

  return ret;
 80074a8:	68fb      	ldr	r3, [r7, #12]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop

080074b4 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	dd0b      	ble.n	80074dc <LSM6DSO_ACC_SetFullScale+0x28>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	dd06      	ble.n	80074d8 <LSM6DSO_ACC_SetFullScale+0x24>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	dc01      	bgt.n	80074d4 <LSM6DSO_ACC_SetFullScale+0x20>
 80074d0:	2303      	movs	r3, #3
 80074d2:	e004      	b.n	80074de <LSM6DSO_ACC_SetFullScale+0x2a>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e002      	b.n	80074de <LSM6DSO_ACC_SetFullScale+0x2a>
 80074d8:	2302      	movs	r3, #2
 80074da:	e000      	b.n	80074de <LSM6DSO_ACC_SetFullScale+0x2a>
 80074dc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80074de:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3320      	adds	r3, #32
 80074e4:	7bfa      	ldrb	r2, [r7, #15]
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fdb7 	bl	800805c <lsm6dso_xl_full_scale_set>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	e000      	b.n	80074fc <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3320      	adds	r3, #32
 8007512:	f107 0208 	add.w	r2, r7, #8
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f001 f991 	bl	8008840 <lsm6dso_acceleration_raw_get>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007524:	f04f 33ff 	mov.w	r3, #4294967295
 8007528:	e00c      	b.n	8007544 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800752a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007532:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800753a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3320      	adds	r3, #32
 8007560:	f107 0210 	add.w	r2, r7, #16
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f001 f96a 	bl	8008840 <lsm6dso_acceleration_raw_get>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8007572:	f04f 33ff 	mov.w	r3, #4294967295
 8007576:	e042      	b.n	80075fe <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007578:	f107 030c 	add.w	r3, r7, #12
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fcec 	bl	8006f5c <LSM6DSO_ACC_GetSensitivity>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800758a:	f04f 33ff 	mov.w	r3, #4294967295
 800758e:	e036      	b.n	80075fe <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007590:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007594:	4618      	mov	r0, r3
 8007596:	f7f9 fbb9 	bl	8000d0c <__aeabi_i2f>
 800759a:	4602      	mov	r2, r0
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f7f9 fc07 	bl	8000db4 <__aeabi_fmul>
 80075a6:	4603      	mov	r3, r0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7f9 fdc9 	bl	8001140 <__aeabi_f2iz>
 80075ae:	4602      	mov	r2, r0
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80075b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7f9 fba7 	bl	8000d0c <__aeabi_i2f>
 80075be:	4602      	mov	r2, r0
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4619      	mov	r1, r3
 80075c4:	4610      	mov	r0, r2
 80075c6:	f7f9 fbf5 	bl	8000db4 <__aeabi_fmul>
 80075ca:	4603      	mov	r3, r0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7f9 fdb7 	bl	8001140 <__aeabi_f2iz>
 80075d2:	4602      	mov	r2, r0
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80075d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f9 fb95 	bl	8000d0c <__aeabi_i2f>
 80075e2:	4602      	mov	r2, r0
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4619      	mov	r1, r3
 80075e8:	4610      	mov	r0, r2
 80075ea:	f7f9 fbe3 	bl	8000db4 <__aeabi_fmul>
 80075ee:	4603      	mov	r3, r0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7f9 fda5 	bl	8001140 <__aeabi_f2iz>
 80075f6:	4602      	mov	r2, r0
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b082      	sub	sp, #8
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e014      	b.n	8007646 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f103 0220 	add.w	r2, r3, #32
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f000 ff3e 	bl	80084ac <lsm6dso_gy_data_rate_set>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8007636:	f04f 33ff 	mov.w	r3, #4294967295
 800763a:	e004      	b.n	8007646 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e01f      	b.n	80076a4 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f103 0220 	add.w	r2, r3, #32
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3334      	adds	r3, #52	@ 0x34
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f001 f815 	bl	80086a0 <lsm6dso_gy_data_rate_get>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800767c:	f04f 33ff 	mov.w	r3, #4294967295
 8007680:	e010      	b.n	80076a4 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3320      	adds	r3, #32
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f000 ff0f 	bl	80084ac <lsm6dso_gy_data_rate_set>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8007694:	f04f 33ff 	mov.w	r3, #4294967295
 8007698:	e004      	b.n	80076a4 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3320      	adds	r3, #32
 80076be:	f107 020b 	add.w	r2, r7, #11
 80076c2:	4611      	mov	r1, r2
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 feaf 	bl	8008428 <lsm6dso_gy_full_scale_get>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80076d0:	f04f 33ff 	mov.w	r3, #4294967295
 80076d4:	e02d      	b.n	8007732 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	2b06      	cmp	r3, #6
 80076da:	d825      	bhi.n	8007728 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80076dc:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	08007709 	.word	0x08007709
 80076e8:	08007701 	.word	0x08007701
 80076ec:	08007711 	.word	0x08007711
 80076f0:	08007729 	.word	0x08007729
 80076f4:	08007719 	.word	0x08007719
 80076f8:	08007729 	.word	0x08007729
 80076fc:	08007721 	.word	0x08007721
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	4a0e      	ldr	r2, [pc, #56]	@ (800773c <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8007704:	601a      	str	r2, [r3, #0]
      break;
 8007706:	e013      	b.n	8007730 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	4a0d      	ldr	r2, [pc, #52]	@ (8007740 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 800770c:	601a      	str	r2, [r3, #0]
      break;
 800770e:	e00f      	b.n	8007730 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	4a0c      	ldr	r2, [pc, #48]	@ (8007744 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8007714:	601a      	str	r2, [r3, #0]
      break;
 8007716:	e00b      	b.n	8007730 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	4a0b      	ldr	r2, [pc, #44]	@ (8007748 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 800771c:	601a      	str	r2, [r3, #0]
      break;
 800771e:	e007      	b.n	8007730 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	4a0a      	ldr	r2, [pc, #40]	@ (800774c <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8007724:	601a      	str	r2, [r3, #0]
      break;
 8007726:	e003      	b.n	8007730 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8007728:	f04f 33ff 	mov.w	r3, #4294967295
 800772c:	60fb      	str	r3, [r7, #12]
      break;
 800772e:	bf00      	nop
  }

  return ret;
 8007730:	68fb      	ldr	r3, [r7, #12]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	408c0000 	.word	0x408c0000
 8007740:	410c0000 	.word	0x410c0000
 8007744:	418c0000 	.word	0x418c0000
 8007748:	420c0000 	.word	0x420c0000
 800774c:	428c0000 	.word	0x428c0000

08007750 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3320      	adds	r3, #32
 8007762:	f107 020b 	add.w	r2, r7, #11
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f000 ff99 	bl	80086a0 <lsm6dso_gy_data_rate_get>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8007774:	f04f 33ff 	mov.w	r3, #4294967295
 8007778:	e04e      	b.n	8007818 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800777a:	7afb      	ldrb	r3, [r7, #11]
 800777c:	2b0a      	cmp	r3, #10
 800777e:	d846      	bhi.n	800780e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8007780:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	080077b5 	.word	0x080077b5
 800778c:	080077bf 	.word	0x080077bf
 8007790:	080077c7 	.word	0x080077c7
 8007794:	080077cf 	.word	0x080077cf
 8007798:	080077d7 	.word	0x080077d7
 800779c:	080077df 	.word	0x080077df
 80077a0:	080077e7 	.word	0x080077e7
 80077a4:	080077ef 	.word	0x080077ef
 80077a8:	080077f7 	.word	0x080077f7
 80077ac:	080077ff 	.word	0x080077ff
 80077b0:	08007807 	.word	0x08007807
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
      break;
 80077bc:	e02b      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	4a17      	ldr	r2, [pc, #92]	@ (8007820 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80077c2:	601a      	str	r2, [r3, #0]
      break;
 80077c4:	e027      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	4a16      	ldr	r2, [pc, #88]	@ (8007824 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80077ca:	601a      	str	r2, [r3, #0]
      break;
 80077cc:	e023      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	4a15      	ldr	r2, [pc, #84]	@ (8007828 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80077d2:	601a      	str	r2, [r3, #0]
      break;
 80077d4:	e01f      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	4a14      	ldr	r2, [pc, #80]	@ (800782c <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 80077da:	601a      	str	r2, [r3, #0]
      break;
 80077dc:	e01b      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	4a13      	ldr	r2, [pc, #76]	@ (8007830 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80077e2:	601a      	str	r2, [r3, #0]
      break;
 80077e4:	e017      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	4a12      	ldr	r2, [pc, #72]	@ (8007834 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80077ea:	601a      	str	r2, [r3, #0]
      break;
 80077ec:	e013      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	4a11      	ldr	r2, [pc, #68]	@ (8007838 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80077f2:	601a      	str	r2, [r3, #0]
      break;
 80077f4:	e00f      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	4a10      	ldr	r2, [pc, #64]	@ (800783c <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80077fa:	601a      	str	r2, [r3, #0]
      break;
 80077fc:	e00b      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	4a0f      	ldr	r2, [pc, #60]	@ (8007840 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8007802:	601a      	str	r2, [r3, #0]
      break;
 8007804:	e007      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	4a0e      	ldr	r2, [pc, #56]	@ (8007844 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800780a:	601a      	str	r2, [r3, #0]
      break;
 800780c:	e003      	b.n	8007816 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	60fb      	str	r3, [r7, #12]
      break;
 8007814:	bf00      	nop
  }

  return ret;
 8007816:	68fb      	ldr	r3, [r7, #12]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	41480000 	.word	0x41480000
 8007824:	41d00000 	.word	0x41d00000
 8007828:	42500000 	.word	0x42500000
 800782c:	42d00000 	.word	0x42d00000
 8007830:	43500000 	.word	0x43500000
 8007834:	43d08000 	.word	0x43d08000
 8007838:	44504000 	.word	0x44504000
 800783c:	44d06000 	.word	0x44d06000
 8007840:	45505000 	.word	0x45505000
 8007844:	45d05800 	.word	0x45d05800

08007848 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8007852:	2200      	movs	r2, #0
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f806 	bl	8007868 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 800785c:	4603      	mov	r3, r0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	4613      	mov	r3, r2
 8007874:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x22>
 8007884:	2b01      	cmp	r3, #1
 8007886:	d028      	beq.n	80078da <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x72>
 8007888:	e05a      	b.n	8007940 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f103 0020 	add.w	r0, r3, #32
 8007890:	f107 0214 	add.w	r2, r7, #20
 8007894:	2301      	movs	r3, #1
 8007896:	2116      	movs	r1, #22
 8007898:	f000 fbb0 	bl	8007ffc <lsm6dso_read_reg>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x40>
      {
        return LSM6DSO_ERROR;
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295
 80078a6:	e068      	b.n	800797a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode != 0U)
 80078a8:	7d3b      	ldrb	r3, [r7, #20]
 80078aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d049      	beq.n	8007948 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
      {
        val1.g_hm_mode = 0U;
 80078b4:	7d3b      	ldrb	r3, [r7, #20]
 80078b6:	f36f 13c7 	bfc	r3, #7, #1
 80078ba:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f103 0020 	add.w	r0, r3, #32
 80078c2:	f107 0214 	add.w	r2, r7, #20
 80078c6:	2301      	movs	r3, #1
 80078c8:	2116      	movs	r1, #22
 80078ca:	f000 fbaf 	bl	800802c <lsm6dso_write_reg>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d039      	beq.n	8007948 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
        {
          return LSM6DSO_ERROR;
 80078d4:	f04f 33ff 	mov.w	r3, #4294967295
 80078d8:	e04f      	b.n	800797a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f103 0020 	add.w	r0, r3, #32
 80078e0:	f107 0210 	add.w	r2, r7, #16
 80078e4:	2301      	movs	r3, #1
 80078e6:	2116      	movs	r1, #22
 80078e8:	f000 fb88 	bl	8007ffc <lsm6dso_read_reg>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x90>
      {
        return LSM6DSO_ERROR;
 80078f2:	f04f 33ff 	mov.w	r3, #4294967295
 80078f6:	e040      	b.n	800797a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode == 0U)
 80078f8:	7c3b      	ldrb	r3, [r7, #16]
 80078fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d112      	bne.n	800792a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
      {
        val1.g_hm_mode = 1U;
 8007904:	7c3b      	ldrb	r3, [r7, #16]
 8007906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800790a:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f103 0020 	add.w	r0, r3, #32
 8007912:	f107 0210 	add.w	r2, r7, #16
 8007916:	2301      	movs	r3, #1
 8007918:	2116      	movs	r1, #22
 800791a:	f000 fb87 	bl	800802c <lsm6dso_write_reg>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
        {
          return LSM6DSO_ERROR;
 8007924:	f04f 33ff 	mov.w	r3, #4294967295
 8007928:	e027      	b.n	800797a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800792a:	4916      	ldr	r1, [pc, #88]	@ (8007984 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 800792c:	69b8      	ldr	r0, [r7, #24]
 800792e:	f7f9 fbfd 	bl	800112c <__aeabi_fcmpgt>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d100      	bne.n	800793a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd2>
      {
        newOdr = 208.0f;
      }
      break;
 8007938:	e007      	b.n	800794a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
        newOdr = 208.0f;
 800793a:	4b12      	ldr	r3, [pc, #72]	@ (8007984 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	e004      	b.n	800794a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
    }
    default:
      ret = LSM6DSO_ERROR;
 8007940:	f04f 33ff 	mov.w	r3, #4294967295
 8007944:	61fb      	str	r3, [r7, #28]
      break;
 8007946:	e000      	b.n	800794a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
      break;
 8007948:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007950:	d102      	bne.n	8007958 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf0>
  {
    return LSM6DSO_ERROR;
 8007952:	f04f 33ff 	mov.w	r3, #4294967295
 8007956:	e010      	b.n	800797a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
  }

  if (pObj->gyro_is_enabled == 1U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800795e:	2b01      	cmp	r3, #1
 8007960:	d105      	bne.n	800796e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x106>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8007962:	69b9      	ldr	r1, [r7, #24]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fa25 	bl	8007db4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800796a:	61f8      	str	r0, [r7, #28]
 800796c:	e004      	b.n	8007978 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x110>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800796e:	69b9      	ldr	r1, [r7, #24]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fa9b 	bl	8007eac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8007976:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8007978:	69fb      	ldr	r3, [r7, #28]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3720      	adds	r7, #32
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	43500000 	.word	0x43500000

08007988 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3320      	adds	r3, #32
 800799a:	f107 020b 	add.w	r2, r7, #11
 800799e:	4611      	mov	r1, r2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fd41 	bl	8008428 <lsm6dso_gy_full_scale_get>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80079ac:	f04f 33ff 	mov.w	r3, #4294967295
 80079b0:	e030      	b.n	8007a14 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80079b2:	7afb      	ldrb	r3, [r7, #11]
 80079b4:	2b06      	cmp	r3, #6
 80079b6:	d828      	bhi.n	8007a0a <LSM6DSO_GYRO_GetFullScale+0x82>
 80079b8:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079dd 	.word	0x080079dd
 80079c8:	080079ed 	.word	0x080079ed
 80079cc:	08007a0b 	.word	0x08007a0b
 80079d0:	080079f7 	.word	0x080079f7
 80079d4:	08007a0b 	.word	0x08007a0b
 80079d8:	08007a01 	.word	0x08007a01
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	227d      	movs	r2, #125	@ 0x7d
 80079e0:	601a      	str	r2, [r3, #0]
      break;
 80079e2:	e016      	b.n	8007a12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	22fa      	movs	r2, #250	@ 0xfa
 80079e8:	601a      	str	r2, [r3, #0]
      break;
 80079ea:	e012      	b.n	8007a12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80079f2:	601a      	str	r2, [r3, #0]
      break;
 80079f4:	e00d      	b.n	8007a12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80079fc:	601a      	str	r2, [r3, #0]
      break;
 80079fe:	e008      	b.n	8007a12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007a06:	601a      	str	r2, [r3, #0]
      break;
 8007a08:	e003      	b.n	8007a12 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8007a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0e:	60fb      	str	r3, [r7, #12]
      break;
 8007a10:	bf00      	nop
  }

  return ret;
 8007a12:	68fb      	ldr	r3, [r7, #12]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b7d      	cmp	r3, #125	@ 0x7d
 8007a2a:	dd12      	ble.n	8007a52 <LSM6DSO_GYRO_SetFullScale+0x36>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2bfa      	cmp	r3, #250	@ 0xfa
 8007a30:	dd0d      	ble.n	8007a4e <LSM6DSO_GYRO_SetFullScale+0x32>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007a38:	dd07      	ble.n	8007a4a <LSM6DSO_GYRO_SetFullScale+0x2e>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a40:	dc01      	bgt.n	8007a46 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8007a42:	2304      	movs	r3, #4
 8007a44:	e006      	b.n	8007a54 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a46:	2306      	movs	r3, #6
 8007a48:	e004      	b.n	8007a54 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e002      	b.n	8007a54 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e000      	b.n	8007a54 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007a52:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8007a54:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3320      	adds	r3, #32
 8007a5a:	7bfa      	ldrb	r2, [r7, #15]
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fcbc 	bl	80083dc <lsm6dso_gy_full_scale_set>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	e000      	b.n	8007a72 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3320      	adds	r3, #32
 8007a88:	f107 0208 	add.w	r2, r7, #8
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fe8e 	bl	80087b0 <lsm6dso_angular_rate_raw_get>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9e:	e00c      	b.n	8007aba <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007aa0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007aa8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007ab0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b086      	sub	sp, #24
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3320      	adds	r3, #32
 8007ad0:	f107 0210 	add.w	r2, r7, #16
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 fe6a 	bl	80087b0 <lsm6dso_angular_rate_raw_get>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae6:	e042      	b.n	8007b6e <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007ae8:	f107 030c 	add.w	r3, r7, #12
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fddc 	bl	80076ac <LSM6DSO_GYRO_GetSensitivity>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8007afa:	f04f 33ff 	mov.w	r3, #4294967295
 8007afe:	e036      	b.n	8007b6e <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007b00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7f9 f901 	bl	8000d0c <__aeabi_i2f>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4610      	mov	r0, r2
 8007b12:	f7f9 f94f 	bl	8000db4 <__aeabi_fmul>
 8007b16:	4603      	mov	r3, r0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7f9 fb11 	bl	8001140 <__aeabi_f2iz>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007b24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7f9 f8ef 	bl	8000d0c <__aeabi_i2f>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4619      	mov	r1, r3
 8007b34:	4610      	mov	r0, r2
 8007b36:	f7f9 f93d 	bl	8000db4 <__aeabi_fmul>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7f9 faff 	bl	8001140 <__aeabi_f2iz>
 8007b42:	4602      	mov	r2, r0
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007b48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7f9 f8dd 	bl	8000d0c <__aeabi_i2f>
 8007b52:	4602      	mov	r2, r0
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4619      	mov	r1, r3
 8007b58:	4610      	mov	r0, r2
 8007b5a:	f7f9 f92b 	bl	8000db4 <__aeabi_fmul>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7f9 faed 	bl	8001140 <__aeabi_f2iz>
 8007b66:	4602      	mov	r2, r0
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
 8007b82:	4613      	mov	r3, r2
 8007b84:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f103 0020 	add.w	r0, r3, #32
 8007b8c:	1cba      	adds	r2, r7, #2
 8007b8e:	78f9      	ldrb	r1, [r7, #3]
 8007b90:	2301      	movs	r3, #1
 8007b92:	f000 fa4b 	bl	800802c <lsm6dso_write_reg>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba0:	e000      	b.n	8007ba4 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007bb6:	4937      	ldr	r1, [pc, #220]	@ (8007c94 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8007bb8:	6838      	ldr	r0, [r7, #0]
 8007bba:	f7f9 faa3 	bl	8001104 <__aeabi_fcmple>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x1c>
 8007bc4:	230b      	movs	r3, #11
 8007bc6:	e051      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007bc8:	4933      	ldr	r1, [pc, #204]	@ (8007c98 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xec>)
 8007bca:	6838      	ldr	r0, [r7, #0]
 8007bcc:	f7f9 fa9a 	bl	8001104 <__aeabi_fcmple>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x2e>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e048      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007bda:	4930      	ldr	r1, [pc, #192]	@ (8007c9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8007bdc:	6838      	ldr	r0, [r7, #0]
 8007bde:	f7f9 fa91 	bl	8001104 <__aeabi_fcmple>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x40>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e03f      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007bec:	492c      	ldr	r1, [pc, #176]	@ (8007ca0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 8007bee:	6838      	ldr	r0, [r7, #0]
 8007bf0:	f7f9 fa88 	bl	8001104 <__aeabi_fcmple>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x52>
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e036      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007bfe:	4929      	ldr	r1, [pc, #164]	@ (8007ca4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 8007c00:	6838      	ldr	r0, [r7, #0]
 8007c02:	f7f9 fa7f 	bl	8001104 <__aeabi_fcmple>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	e02d      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007c10:	4925      	ldr	r1, [pc, #148]	@ (8007ca8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 8007c12:	6838      	ldr	r0, [r7, #0]
 8007c14:	f7f9 fa76 	bl	8001104 <__aeabi_fcmple>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x76>
 8007c1e:	2305      	movs	r3, #5
 8007c20:	e024      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007c22:	4922      	ldr	r1, [pc, #136]	@ (8007cac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x100>)
 8007c24:	6838      	ldr	r0, [r7, #0]
 8007c26:	f7f9 fa6d 	bl	8001104 <__aeabi_fcmple>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x88>
 8007c30:	2306      	movs	r3, #6
 8007c32:	e01b      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007c34:	491e      	ldr	r1, [pc, #120]	@ (8007cb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x104>)
 8007c36:	6838      	ldr	r0, [r7, #0]
 8007c38:	f7f9 fa64 	bl	8001104 <__aeabi_fcmple>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9a>
 8007c42:	2307      	movs	r3, #7
 8007c44:	e012      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007c46:	491b      	ldr	r1, [pc, #108]	@ (8007cb4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>)
 8007c48:	6838      	ldr	r0, [r7, #0]
 8007c4a:	f7f9 fa5b 	bl	8001104 <__aeabi_fcmple>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8007c54:	2308      	movs	r3, #8
 8007c56:	e009      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007c58:	4917      	ldr	r1, [pc, #92]	@ (8007cb8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x10c>)
 8007c5a:	6838      	ldr	r0, [r7, #0]
 8007c5c:	f7f9 fa52 	bl	8001104 <__aeabi_fcmple>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbe>
 8007c66:	2309      	movs	r3, #9
 8007c68:	e000      	b.n	8007c6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007c6a:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007c6c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3320      	adds	r3, #32
 8007c72:	7bfa      	ldrb	r2, [r7, #15]
 8007c74:	4611      	mov	r1, r2
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fa4e 	bl	8008118 <lsm6dso_xl_data_rate_set>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>
  {
    return LSM6DSO_ERROR;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	e000      	b.n	8007c8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xde>
  }

  return LSM6DSO_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	3fcccccd 	.word	0x3fcccccd
 8007c98:	41480000 	.word	0x41480000
 8007c9c:	41d00000 	.word	0x41d00000
 8007ca0:	42500000 	.word	0x42500000
 8007ca4:	42d00000 	.word	0x42d00000
 8007ca8:	43500000 	.word	0x43500000
 8007cac:	43d08000 	.word	0x43d08000
 8007cb0:	44504000 	.word	0x44504000
 8007cb4:	44d06000 	.word	0x44d06000
 8007cb8:	45505000 	.word	0x45505000

08007cbc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007cc6:	4931      	ldr	r1, [pc, #196]	@ (8007d8c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8007cc8:	6838      	ldr	r0, [r7, #0]
 8007cca:	f7f9 fa1b 	bl	8001104 <__aeabi_fcmple>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x1c>
 8007cd4:	230b      	movs	r3, #11
 8007cd6:	e051      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007cd8:	492d      	ldr	r1, [pc, #180]	@ (8007d90 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8007cda:	6838      	ldr	r0, [r7, #0]
 8007cdc:	f7f9 fa12 	bl	8001104 <__aeabi_fcmple>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e048      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007cea:	492a      	ldr	r1, [pc, #168]	@ (8007d94 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	f7f9 fa09 	bl	8001104 <__aeabi_fcmple>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x40>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e03f      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007cfc:	4926      	ldr	r1, [pc, #152]	@ (8007d98 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8007cfe:	6838      	ldr	r0, [r7, #0]
 8007d00:	f7f9 fa00 	bl	8001104 <__aeabi_fcmple>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x52>
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e036      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007d0e:	4923      	ldr	r1, [pc, #140]	@ (8007d9c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8007d10:	6838      	ldr	r0, [r7, #0]
 8007d12:	f7f9 f9f7 	bl	8001104 <__aeabi_fcmple>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	e02d      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007d20:	491f      	ldr	r1, [pc, #124]	@ (8007da0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8007d22:	6838      	ldr	r0, [r7, #0]
 8007d24:	f7f9 f9ee 	bl	8001104 <__aeabi_fcmple>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x76>
 8007d2e:	2305      	movs	r3, #5
 8007d30:	e024      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007d32:	491c      	ldr	r1, [pc, #112]	@ (8007da4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>)
 8007d34:	6838      	ldr	r0, [r7, #0]
 8007d36:	f7f9 f9e5 	bl	8001104 <__aeabi_fcmple>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x88>
 8007d40:	2306      	movs	r3, #6
 8007d42:	e01b      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007d44:	4918      	ldr	r1, [pc, #96]	@ (8007da8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8007d46:	6838      	ldr	r0, [r7, #0]
 8007d48:	f7f9 f9dc 	bl	8001104 <__aeabi_fcmple>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8007d52:	2307      	movs	r3, #7
 8007d54:	e012      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007d56:	4915      	ldr	r1, [pc, #84]	@ (8007dac <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8007d58:	6838      	ldr	r0, [r7, #0]
 8007d5a:	f7f9 f9d3 	bl	8001104 <__aeabi_fcmple>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8007d64:	2308      	movs	r3, #8
 8007d66:	e009      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007d68:	4911      	ldr	r1, [pc, #68]	@ (8007db0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8007d6a:	6838      	ldr	r0, [r7, #0]
 8007d6c:	f7f9 f9ca 	bl	8001104 <__aeabi_fcmple>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8007d76:	2309      	movs	r3, #9
 8007d78:	e000      	b.n	8007d7c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007d7a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	3fcccccd 	.word	0x3fcccccd
 8007d90:	41480000 	.word	0x41480000
 8007d94:	41d00000 	.word	0x41d00000
 8007d98:	42500000 	.word	0x42500000
 8007d9c:	42d00000 	.word	0x42d00000
 8007da0:	43500000 	.word	0x43500000
 8007da4:	43d08000 	.word	0x43d08000
 8007da8:	44504000 	.word	0x44504000
 8007dac:	44d06000 	.word	0x44d06000
 8007db0:	45505000 	.word	0x45505000

08007db4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007dbe:	4932      	ldr	r1, [pc, #200]	@ (8007e88 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 8007dc0:	6838      	ldr	r0, [r7, #0]
 8007dc2:	f7f9 f99f 	bl	8001104 <__aeabi_fcmple>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x1c>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e048      	b.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007dd0:	492e      	ldr	r1, [pc, #184]	@ (8007e8c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 8007dd2:	6838      	ldr	r0, [r7, #0]
 8007dd4:	f7f9 f996 	bl	8001104 <__aeabi_fcmple>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x2e>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e03f      	b.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007de2:	492b      	ldr	r1, [pc, #172]	@ (8007e90 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8007de4:	6838      	ldr	r0, [r7, #0]
 8007de6:	f7f9 f98d 	bl	8001104 <__aeabi_fcmple>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x40>
 8007df0:	2303      	movs	r3, #3
 8007df2:	e036      	b.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007df4:	4927      	ldr	r1, [pc, #156]	@ (8007e94 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8007df6:	6838      	ldr	r0, [r7, #0]
 8007df8:	f7f9 f984 	bl	8001104 <__aeabi_fcmple>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8007e02:	2304      	movs	r3, #4
 8007e04:	e02d      	b.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007e06:	4924      	ldr	r1, [pc, #144]	@ (8007e98 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8007e08:	6838      	ldr	r0, [r7, #0]
 8007e0a:	f7f9 f97b 	bl	8001104 <__aeabi_fcmple>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8007e14:	2305      	movs	r3, #5
 8007e16:	e024      	b.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007e18:	4920      	ldr	r1, [pc, #128]	@ (8007e9c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 8007e1a:	6838      	ldr	r0, [r7, #0]
 8007e1c:	f7f9 f972 	bl	8001104 <__aeabi_fcmple>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x76>
 8007e26:	2306      	movs	r3, #6
 8007e28:	e01b      	b.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007e2a:	491d      	ldr	r1, [pc, #116]	@ (8007ea0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xec>)
 8007e2c:	6838      	ldr	r0, [r7, #0]
 8007e2e:	f7f9 f969 	bl	8001104 <__aeabi_fcmple>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x88>
 8007e38:	2307      	movs	r3, #7
 8007e3a:	e012      	b.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007e3c:	4919      	ldr	r1, [pc, #100]	@ (8007ea4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>)
 8007e3e:	6838      	ldr	r0, [r7, #0]
 8007e40:	f7f9 f960 	bl	8001104 <__aeabi_fcmple>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 8007e4a:	2308      	movs	r3, #8
 8007e4c:	e009      	b.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007e4e:	4916      	ldr	r1, [pc, #88]	@ (8007ea8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf4>)
 8007e50:	6838      	ldr	r0, [r7, #0]
 8007e52:	f7f9 f957 	bl	8001104 <__aeabi_fcmple>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8007e5c:	2309      	movs	r3, #9
 8007e5e:	e000      	b.n	8007e62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007e60:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007e62:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3320      	adds	r3, #32
 8007e68:	7bfa      	ldrb	r2, [r7, #15]
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fb1d 	bl	80084ac <lsm6dso_gy_data_rate_set>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xca>
  {
    return LSM6DSO_ERROR;
 8007e78:	f04f 33ff 	mov.w	r3, #4294967295
 8007e7c:	e000      	b.n	8007e80 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>
  }

  return LSM6DSO_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	41480000 	.word	0x41480000
 8007e8c:	41d00000 	.word	0x41d00000
 8007e90:	42500000 	.word	0x42500000
 8007e94:	42d00000 	.word	0x42d00000
 8007e98:	43500000 	.word	0x43500000
 8007e9c:	43d08000 	.word	0x43d08000
 8007ea0:	44504000 	.word	0x44504000
 8007ea4:	44d06000 	.word	0x44d06000
 8007ea8:	45505000 	.word	0x45505000

08007eac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007eb6:	492d      	ldr	r1, [pc, #180]	@ (8007f6c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 8007eb8:	6838      	ldr	r0, [r7, #0]
 8007eba:	f7f9 f923 	bl	8001104 <__aeabi_fcmple>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x1c>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e048      	b.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007ec8:	4929      	ldr	r1, [pc, #164]	@ (8007f70 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 8007eca:	6838      	ldr	r0, [r7, #0]
 8007ecc:	f7f9 f91a 	bl	8001104 <__aeabi_fcmple>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x2e>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e03f      	b.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007eda:	4926      	ldr	r1, [pc, #152]	@ (8007f74 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 8007edc:	6838      	ldr	r0, [r7, #0]
 8007ede:	f7f9 f911 	bl	8001104 <__aeabi_fcmple>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x40>
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e036      	b.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007eec:	4922      	ldr	r1, [pc, #136]	@ (8007f78 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 8007eee:	6838      	ldr	r0, [r7, #0]
 8007ef0:	f7f9 f908 	bl	8001104 <__aeabi_fcmple>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x52>
 8007efa:	2304      	movs	r3, #4
 8007efc:	e02d      	b.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007efe:	491f      	ldr	r1, [pc, #124]	@ (8007f7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd0>)
 8007f00:	6838      	ldr	r0, [r7, #0]
 8007f02:	f7f9 f8ff 	bl	8001104 <__aeabi_fcmple>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007f0c:	2305      	movs	r3, #5
 8007f0e:	e024      	b.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007f10:	491b      	ldr	r1, [pc, #108]	@ (8007f80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>)
 8007f12:	6838      	ldr	r0, [r7, #0]
 8007f14:	f7f9 f8f6 	bl	8001104 <__aeabi_fcmple>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x76>
 8007f1e:	2306      	movs	r3, #6
 8007f20:	e01b      	b.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007f22:	4918      	ldr	r1, [pc, #96]	@ (8007f84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd8>)
 8007f24:	6838      	ldr	r0, [r7, #0]
 8007f26:	f7f9 f8ed 	bl	8001104 <__aeabi_fcmple>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8007f30:	2307      	movs	r3, #7
 8007f32:	e012      	b.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007f34:	4914      	ldr	r1, [pc, #80]	@ (8007f88 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xdc>)
 8007f36:	6838      	ldr	r0, [r7, #0]
 8007f38:	f7f9 f8e4 	bl	8001104 <__aeabi_fcmple>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 8007f42:	2308      	movs	r3, #8
 8007f44:	e009      	b.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007f46:	4911      	ldr	r1, [pc, #68]	@ (8007f8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe0>)
 8007f48:	6838      	ldr	r0, [r7, #0]
 8007f4a:	f7f9 f8db 	bl	8001104 <__aeabi_fcmple>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8007f54:	2309      	movs	r3, #9
 8007f56:	e000      	b.n	8007f5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007f58:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	41480000 	.word	0x41480000
 8007f70:	41d00000 	.word	0x41d00000
 8007f74:	42500000 	.word	0x42500000
 8007f78:	42d00000 	.word	0x42d00000
 8007f7c:	43500000 	.word	0x43500000
 8007f80:	43d08000 	.word	0x43d08000
 8007f84:	44504000 	.word	0x44504000
 8007f88:	44d06000 	.word	0x44d06000
 8007f8c:	45505000 	.word	0x45505000

08007f90 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007f90:	b590      	push	{r4, r7, lr}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	607a      	str	r2, [r7, #4]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	72fb      	strb	r3, [r7, #11]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	695c      	ldr	r4, [r3, #20]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	7b1b      	ldrb	r3, [r3, #12]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	b299      	uxth	r1, r3
 8007fb6:	893b      	ldrh	r3, [r7, #8]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	47a0      	blx	r4
 8007fbc:	4603      	mov	r3, r0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	371c      	adds	r7, #28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd90      	pop	{r4, r7, pc}

08007fc6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007fc6:	b590      	push	{r4, r7, lr}
 8007fc8:	b087      	sub	sp, #28
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	72fb      	strb	r3, [r7, #11]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	691c      	ldr	r4, [r3, #16]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	7b1b      	ldrb	r3, [r3, #12]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	b299      	uxth	r1, r3
 8007fec:	893b      	ldrh	r3, [r7, #8]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	47a0      	blx	r4
 8007ff2:	4603      	mov	r3, r0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	371c      	adds	r7, #28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd90      	pop	{r4, r7, pc}

08007ffc <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	607a      	str	r2, [r7, #4]
 8008006:	461a      	mov	r2, r3
 8008008:	460b      	mov	r3, r1
 800800a:	72fb      	strb	r3, [r7, #11]
 800800c:	4613      	mov	r3, r2
 800800e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	685c      	ldr	r4, [r3, #4]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	68d8      	ldr	r0, [r3, #12]
 8008018:	893b      	ldrh	r3, [r7, #8]
 800801a:	7af9      	ldrb	r1, [r7, #11]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	47a0      	blx	r4
 8008020:	6178      	str	r0, [r7, #20]

  return ret;
 8008022:	697b      	ldr	r3, [r7, #20]
}
 8008024:	4618      	mov	r0, r3
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	bd90      	pop	{r4, r7, pc}

0800802c <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	607a      	str	r2, [r7, #4]
 8008036:	461a      	mov	r2, r3
 8008038:	460b      	mov	r3, r1
 800803a:	72fb      	strb	r3, [r7, #11]
 800803c:	4613      	mov	r3, r2
 800803e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681c      	ldr	r4, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	68d8      	ldr	r0, [r3, #12]
 8008048:	893b      	ldrh	r3, [r7, #8]
 800804a:	7af9      	ldrb	r1, [r7, #11]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	47a0      	blx	r4
 8008050:	6178      	str	r0, [r7, #20]

  return ret;
 8008052:	697b      	ldr	r3, [r7, #20]
}
 8008054:	4618      	mov	r0, r3
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	bd90      	pop	{r4, r7, pc}

0800805c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008068:	f107 0208 	add.w	r2, r7, #8
 800806c:	2301      	movs	r3, #1
 800806e:	2110      	movs	r1, #16
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff ffc3 	bl	8007ffc <lsm6dso_read_reg>
 8008076:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10f      	bne.n	800809e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	f003 0303 	and.w	r3, r3, #3
 8008084:	b2da      	uxtb	r2, r3
 8008086:	7a3b      	ldrb	r3, [r7, #8]
 8008088:	f362 0383 	bfi	r3, r2, #2, #2
 800808c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800808e:	f107 0208 	add.w	r2, r7, #8
 8008092:	2301      	movs	r3, #1
 8008094:	2110      	movs	r1, #16
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff ffc8 	bl	800802c <lsm6dso_write_reg>
 800809c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800809e:	68fb      	ldr	r3, [r7, #12]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80080b2:	f107 0208 	add.w	r2, r7, #8
 80080b6:	2301      	movs	r3, #1
 80080b8:	2110      	movs	r1, #16
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff ff9e 	bl	8007ffc <lsm6dso_read_reg>
 80080c0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80080c2:	7a3b      	ldrb	r3, [r7, #8]
 80080c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d81a      	bhi.n	8008104 <lsm6dso_xl_full_scale_get+0x5c>
 80080ce:	a201      	add	r2, pc, #4	@ (adr r2, 80080d4 <lsm6dso_xl_full_scale_get+0x2c>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	080080ed 	.word	0x080080ed
 80080dc:	080080f5 	.word	0x080080f5
 80080e0:	080080fd 	.word	0x080080fd
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2200      	movs	r2, #0
 80080e8:	701a      	strb	r2, [r3, #0]
      break;
 80080ea:	e00f      	b.n	800810c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2201      	movs	r2, #1
 80080f0:	701a      	strb	r2, [r3, #0]
      break;
 80080f2:	e00b      	b.n	800810c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2202      	movs	r2, #2
 80080f8:	701a      	strb	r2, [r3, #0]
      break;
 80080fa:	e007      	b.n	800810c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2203      	movs	r2, #3
 8008100:	701a      	strb	r2, [r3, #0]
      break;
 8008102:	e003      	b.n	800810c <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2200      	movs	r2, #0
 8008108:	701a      	strb	r2, [r3, #0]
      break;
 800810a:	bf00      	nop
  }

  return ret;
 800810c:	68fb      	ldr	r3, [r7, #12]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop

08008118 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fc90 	bl	8008a54 <lsm6dso_fsm_enable_get>
 8008134:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <lsm6dso_xl_data_rate_set+0x28>
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	e0e0      	b.n	8008302 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008140:	7b3b      	ldrb	r3, [r7, #12]
 8008142:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008146:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8008148:	7b3b      	ldrb	r3, [r7, #12]
 800814a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800814e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008150:	4313      	orrs	r3, r2
 8008152:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008154:	7b3b      	ldrb	r3, [r7, #12]
 8008156:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800815a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800815c:	4313      	orrs	r3, r2
 800815e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008160:	7b3b      	ldrb	r3, [r7, #12]
 8008162:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008166:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008168:	4313      	orrs	r3, r2
 800816a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800816c:	7b3b      	ldrb	r3, [r7, #12]
 800816e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008172:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008174:	4313      	orrs	r3, r2
 8008176:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008178:	7b3b      	ldrb	r3, [r7, #12]
 800817a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800817e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008180:	4313      	orrs	r3, r2
 8008182:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008184:	7b3b      	ldrb	r3, [r7, #12]
 8008186:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800818a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800818c:	4313      	orrs	r3, r2
 800818e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008190:	7b3b      	ldrb	r3, [r7, #12]
 8008192:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008196:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008198:	4313      	orrs	r3, r2
 800819a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800819c:	7b7b      	ldrb	r3, [r7, #13]
 800819e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80081a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80081a4:	4313      	orrs	r3, r2
 80081a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80081a8:	7b7b      	ldrb	r3, [r7, #13]
 80081aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80081ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80081b0:	4313      	orrs	r3, r2
 80081b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80081b4:	7b7b      	ldrb	r3, [r7, #13]
 80081b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80081ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80081bc:	4313      	orrs	r3, r2
 80081be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80081c0:	7b7b      	ldrb	r3, [r7, #13]
 80081c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80081c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80081c8:	4313      	orrs	r3, r2
 80081ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80081cc:	7b7b      	ldrb	r3, [r7, #13]
 80081ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80081d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80081d4:	4313      	orrs	r3, r2
 80081d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80081d8:	7b7b      	ldrb	r3, [r7, #13]
 80081da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80081de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80081e0:	4313      	orrs	r3, r2
 80081e2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80081e4:	7b7b      	ldrb	r3, [r7, #13]
 80081e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80081ea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80081ec:	4313      	orrs	r3, r2
 80081ee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80081f0:	7b7b      	ldrb	r3, [r7, #13]
 80081f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80081f6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80081f8:	4313      	orrs	r3, r2
 80081fa:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d164      	bne.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008200:	f107 030b 	add.w	r3, r7, #11
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fc46 	bl	8008a98 <lsm6dso_fsm_data_rate_get>
 800820c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <lsm6dso_xl_data_rate_set+0x100>
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	e074      	b.n	8008302 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	2b03      	cmp	r3, #3
 800821c:	d852      	bhi.n	80082c4 <lsm6dso_xl_data_rate_set+0x1ac>
 800821e:	a201      	add	r2, pc, #4	@ (adr r2, 8008224 <lsm6dso_xl_data_rate_set+0x10c>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	08008235 	.word	0x08008235
 8008228:	08008247 	.word	0x08008247
 800822c:	08008265 	.word	0x08008265
 8008230:	0800828f 	.word	0x0800828f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d102      	bne.n	8008240 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800823e:	e044      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	75fb      	strb	r3, [r7, #23]
        break;
 8008244:	e041      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 800824c:	2302      	movs	r3, #2
 800824e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8008250:	e03b      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d102      	bne.n	800825e <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8008258:	2302      	movs	r3, #2
 800825a:	75fb      	strb	r3, [r7, #23]
        break;
 800825c:	e035      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	75fb      	strb	r3, [r7, #23]
        break;
 8008262:	e032      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d102      	bne.n	8008270 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800826a:	2303      	movs	r3, #3
 800826c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800826e:	e02c      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d102      	bne.n	800827c <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008276:	2303      	movs	r3, #3
 8008278:	75fb      	strb	r3, [r7, #23]
        break;
 800827a:	e026      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d102      	bne.n	8008288 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8008282:	2303      	movs	r3, #3
 8008284:	75fb      	strb	r3, [r7, #23]
        break;
 8008286:	e020      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	75fb      	strb	r3, [r7, #23]
        break;
 800828c:	e01d      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d102      	bne.n	800829a <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8008294:	2304      	movs	r3, #4
 8008296:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8008298:	e017      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d102      	bne.n	80082a6 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80082a0:	2304      	movs	r3, #4
 80082a2:	75fb      	strb	r3, [r7, #23]
        break;
 80082a4:	e011      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80082a6:	78fb      	ldrb	r3, [r7, #3]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d102      	bne.n	80082b2 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80082ac:	2304      	movs	r3, #4
 80082ae:	75fb      	strb	r3, [r7, #23]
        break;
 80082b0:	e00b      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80082b2:	78fb      	ldrb	r3, [r7, #3]
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d102      	bne.n	80082be <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80082b8:	2304      	movs	r3, #4
 80082ba:	75fb      	strb	r3, [r7, #23]
        break;
 80082bc:	e005      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	75fb      	strb	r3, [r7, #23]
        break;
 80082c2:	e002      	b.n	80082ca <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	75fb      	strb	r3, [r7, #23]
        break;
 80082c8:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80082ca:	f107 0208 	add.w	r2, r7, #8
 80082ce:	2301      	movs	r3, #1
 80082d0:	2110      	movs	r1, #16
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fe92 	bl	8007ffc <lsm6dso_read_reg>
 80082d8:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	7a3b      	ldrb	r3, [r7, #8]
 80082e4:	f362 1307 	bfi	r3, r2, #4, #4
 80082e8:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80082ea:	f107 0208 	add.w	r2, r7, #8
 80082ee:	2301      	movs	r3, #1
 80082f0:	2110      	movs	r1, #16
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fe9a 	bl	800802c <lsm6dso_write_reg>
 80082f8:	4602      	mov	r2, r0
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	4413      	add	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]

  return ret;
 8008300:	693b      	ldr	r3, [r7, #16]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop

0800830c <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8008316:	f107 0208 	add.w	r2, r7, #8
 800831a:	2301      	movs	r3, #1
 800831c:	2110      	movs	r1, #16
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fe6c 	bl	8007ffc <lsm6dso_read_reg>
 8008324:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8008326:	7a3b      	ldrb	r3, [r7, #8]
 8008328:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b0b      	cmp	r3, #11
 8008330:	d84a      	bhi.n	80083c8 <lsm6dso_xl_data_rate_get+0xbc>
 8008332:	a201      	add	r2, pc, #4	@ (adr r2, 8008338 <lsm6dso_xl_data_rate_get+0x2c>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	08008369 	.word	0x08008369
 800833c:	08008371 	.word	0x08008371
 8008340:	08008379 	.word	0x08008379
 8008344:	08008381 	.word	0x08008381
 8008348:	08008389 	.word	0x08008389
 800834c:	08008391 	.word	0x08008391
 8008350:	08008399 	.word	0x08008399
 8008354:	080083a1 	.word	0x080083a1
 8008358:	080083a9 	.word	0x080083a9
 800835c:	080083b1 	.word	0x080083b1
 8008360:	080083b9 	.word	0x080083b9
 8008364:	080083c1 	.word	0x080083c1
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
      break;
 800836e:	e02f      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2201      	movs	r2, #1
 8008374:	701a      	strb	r2, [r3, #0]
      break;
 8008376:	e02b      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2202      	movs	r2, #2
 800837c:	701a      	strb	r2, [r3, #0]
      break;
 800837e:	e027      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2203      	movs	r2, #3
 8008384:	701a      	strb	r2, [r3, #0]
      break;
 8008386:	e023      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2204      	movs	r2, #4
 800838c:	701a      	strb	r2, [r3, #0]
      break;
 800838e:	e01f      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2205      	movs	r2, #5
 8008394:	701a      	strb	r2, [r3, #0]
      break;
 8008396:	e01b      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2206      	movs	r2, #6
 800839c:	701a      	strb	r2, [r3, #0]
      break;
 800839e:	e017      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2207      	movs	r2, #7
 80083a4:	701a      	strb	r2, [r3, #0]
      break;
 80083a6:	e013      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2208      	movs	r2, #8
 80083ac:	701a      	strb	r2, [r3, #0]
      break;
 80083ae:	e00f      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2209      	movs	r2, #9
 80083b4:	701a      	strb	r2, [r3, #0]
      break;
 80083b6:	e00b      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	220a      	movs	r2, #10
 80083bc:	701a      	strb	r2, [r3, #0]
      break;
 80083be:	e007      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	220b      	movs	r2, #11
 80083c4:	701a      	strb	r2, [r3, #0]
      break;
 80083c6:	e003      	b.n	80083d0 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	701a      	strb	r2, [r3, #0]
      break;
 80083ce:	bf00      	nop
  }

  return ret;
 80083d0:	68fb      	ldr	r3, [r7, #12]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop

080083dc <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80083e8:	f107 0208 	add.w	r2, r7, #8
 80083ec:	2301      	movs	r3, #1
 80083ee:	2111      	movs	r1, #17
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7ff fe03 	bl	8007ffc <lsm6dso_read_reg>
 80083f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10f      	bne.n	800841e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	f003 0307 	and.w	r3, r3, #7
 8008404:	b2da      	uxtb	r2, r3
 8008406:	7a3b      	ldrb	r3, [r7, #8]
 8008408:	f362 0343 	bfi	r3, r2, #1, #3
 800840c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800840e:	f107 0208 	add.w	r2, r7, #8
 8008412:	2301      	movs	r3, #1
 8008414:	2111      	movs	r1, #17
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff fe08 	bl	800802c <lsm6dso_write_reg>
 800841c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800841e:	68fb      	ldr	r3, [r7, #12]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008432:	f107 0208 	add.w	r2, r7, #8
 8008436:	2301      	movs	r3, #1
 8008438:	2111      	movs	r1, #17
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7ff fdde 	bl	8007ffc <lsm6dso_read_reg>
 8008440:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8008442:	7a3b      	ldrb	r3, [r7, #8]
 8008444:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b06      	cmp	r3, #6
 800844c:	d824      	bhi.n	8008498 <lsm6dso_gy_full_scale_get+0x70>
 800844e:	a201      	add	r2, pc, #4	@ (adr r2, 8008454 <lsm6dso_gy_full_scale_get+0x2c>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008471 	.word	0x08008471
 8008458:	08008479 	.word	0x08008479
 800845c:	08008481 	.word	0x08008481
 8008460:	08008499 	.word	0x08008499
 8008464:	08008489 	.word	0x08008489
 8008468:	08008499 	.word	0x08008499
 800846c:	08008491 	.word	0x08008491
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
      break;
 8008476:	e013      	b.n	80084a0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2201      	movs	r2, #1
 800847c:	701a      	strb	r2, [r3, #0]
      break;
 800847e:	e00f      	b.n	80084a0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2202      	movs	r2, #2
 8008484:	701a      	strb	r2, [r3, #0]
      break;
 8008486:	e00b      	b.n	80084a0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2204      	movs	r2, #4
 800848c:	701a      	strb	r2, [r3, #0]
      break;
 800848e:	e007      	b.n	80084a0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2206      	movs	r2, #6
 8008494:	701a      	strb	r2, [r3, #0]
      break;
 8008496:	e003      	b.n	80084a0 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
      break;
 800849e:	bf00      	nop
  }

  return ret;
 80084a0:	68fb      	ldr	r3, [r7, #12]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop

080084ac <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80084bc:	f107 030c 	add.w	r3, r7, #12
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fac6 	bl	8008a54 <lsm6dso_fsm_enable_get>
 80084c8:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <lsm6dso_gy_data_rate_set+0x28>
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	e0e0      	b.n	8008696 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80084d4:	7b3b      	ldrb	r3, [r7, #12]
 80084d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80084da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80084dc:	7b3b      	ldrb	r3, [r7, #12]
 80084de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80084e2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80084e4:	4313      	orrs	r3, r2
 80084e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80084e8:	7b3b      	ldrb	r3, [r7, #12]
 80084ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80084ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80084f0:	4313      	orrs	r3, r2
 80084f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80084f4:	7b3b      	ldrb	r3, [r7, #12]
 80084f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80084fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80084fc:	4313      	orrs	r3, r2
 80084fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008500:	7b3b      	ldrb	r3, [r7, #12]
 8008502:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008506:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008508:	4313      	orrs	r3, r2
 800850a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800850c:	7b3b      	ldrb	r3, [r7, #12]
 800850e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008512:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008514:	4313      	orrs	r3, r2
 8008516:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008518:	7b3b      	ldrb	r3, [r7, #12]
 800851a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800851e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008520:	4313      	orrs	r3, r2
 8008522:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008524:	7b3b      	ldrb	r3, [r7, #12]
 8008526:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800852a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800852c:	4313      	orrs	r3, r2
 800852e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008530:	7b7b      	ldrb	r3, [r7, #13]
 8008532:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008536:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8008538:	4313      	orrs	r3, r2
 800853a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800853c:	7b7b      	ldrb	r3, [r7, #13]
 800853e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008542:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8008544:	4313      	orrs	r3, r2
 8008546:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8008548:	7b7b      	ldrb	r3, [r7, #13]
 800854a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800854e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8008550:	4313      	orrs	r3, r2
 8008552:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008554:	7b7b      	ldrb	r3, [r7, #13]
 8008556:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800855a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800855c:	4313      	orrs	r3, r2
 800855e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008560:	7b7b      	ldrb	r3, [r7, #13]
 8008562:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008566:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8008568:	4313      	orrs	r3, r2
 800856a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800856c:	7b7b      	ldrb	r3, [r7, #13]
 800856e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008572:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8008574:	4313      	orrs	r3, r2
 8008576:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8008578:	7b7b      	ldrb	r3, [r7, #13]
 800857a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800857e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8008580:	4313      	orrs	r3, r2
 8008582:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008584:	7b7b      	ldrb	r3, [r7, #13]
 8008586:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800858a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800858c:	4313      	orrs	r3, r2
 800858e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008590:	2b01      	cmp	r3, #1
 8008592:	d164      	bne.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008594:	f107 030b 	add.w	r3, r7, #11
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fa7c 	bl	8008a98 <lsm6dso_fsm_data_rate_get>
 80085a0:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <lsm6dso_gy_data_rate_set+0x100>
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	e074      	b.n	8008696 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 80085ac:	7afb      	ldrb	r3, [r7, #11]
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d852      	bhi.n	8008658 <lsm6dso_gy_data_rate_set+0x1ac>
 80085b2:	a201      	add	r2, pc, #4	@ (adr r2, 80085b8 <lsm6dso_gy_data_rate_set+0x10c>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	080085c9 	.word	0x080085c9
 80085bc:	080085db 	.word	0x080085db
 80085c0:	080085f9 	.word	0x080085f9
 80085c4:	08008623 	.word	0x08008623
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80085ce:	2301      	movs	r3, #1
 80085d0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80085d2:	e044      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	75fb      	strb	r3, [r7, #23]
        break;
 80085d8:	e041      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80085e0:	2302      	movs	r3, #2
 80085e2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80085e4:	e03b      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d102      	bne.n	80085f2 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80085ec:	2302      	movs	r3, #2
 80085ee:	75fb      	strb	r3, [r7, #23]
        break;
 80085f0:	e035      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	75fb      	strb	r3, [r7, #23]
        break;
 80085f6:	e032      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d102      	bne.n	8008604 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80085fe:	2303      	movs	r3, #3
 8008600:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8008602:	e02c      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d102      	bne.n	8008610 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800860a:	2303      	movs	r3, #3
 800860c:	75fb      	strb	r3, [r7, #23]
        break;
 800860e:	e026      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d102      	bne.n	800861c <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
        break;
 800861a:	e020      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	75fb      	strb	r3, [r7, #23]
        break;
 8008620:	e01d      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008628:	2304      	movs	r3, #4
 800862a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800862c:	e017      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d102      	bne.n	800863a <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008634:	2304      	movs	r3, #4
 8008636:	75fb      	strb	r3, [r7, #23]
        break;
 8008638:	e011      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	2b02      	cmp	r3, #2
 800863e:	d102      	bne.n	8008646 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8008640:	2304      	movs	r3, #4
 8008642:	75fb      	strb	r3, [r7, #23]
        break;
 8008644:	e00b      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	2b03      	cmp	r3, #3
 800864a:	d102      	bne.n	8008652 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800864c:	2304      	movs	r3, #4
 800864e:	75fb      	strb	r3, [r7, #23]
        break;
 8008650:	e005      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	75fb      	strb	r3, [r7, #23]
        break;
 8008656:	e002      	b.n	800865e <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	75fb      	strb	r3, [r7, #23]
        break;
 800865c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800865e:	f107 0208 	add.w	r2, r7, #8
 8008662:	2301      	movs	r3, #1
 8008664:	2111      	movs	r1, #17
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff fcc8 	bl	8007ffc <lsm6dso_read_reg>
 800866c:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	b2da      	uxtb	r2, r3
 8008676:	7a3b      	ldrb	r3, [r7, #8]
 8008678:	f362 1307 	bfi	r3, r2, #4, #4
 800867c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800867e:	f107 0208 	add.w	r2, r7, #8
 8008682:	2301      	movs	r3, #1
 8008684:	2111      	movs	r1, #17
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff fcd0 	bl	800802c <lsm6dso_write_reg>
 800868c:	4602      	mov	r2, r0
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	4413      	add	r3, r2
 8008692:	613b      	str	r3, [r7, #16]

  return ret;
 8008694:	693b      	ldr	r3, [r7, #16]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop

080086a0 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80086aa:	f107 0208 	add.w	r2, r7, #8
 80086ae:	2301      	movs	r3, #1
 80086b0:	2111      	movs	r1, #17
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff fca2 	bl	8007ffc <lsm6dso_read_reg>
 80086b8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80086ba:	7a3b      	ldrb	r3, [r7, #8]
 80086bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b0a      	cmp	r3, #10
 80086c4:	d844      	bhi.n	8008750 <lsm6dso_gy_data_rate_get+0xb0>
 80086c6:	a201      	add	r2, pc, #4	@ (adr r2, 80086cc <lsm6dso_gy_data_rate_get+0x2c>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	080086f9 	.word	0x080086f9
 80086d0:	08008701 	.word	0x08008701
 80086d4:	08008709 	.word	0x08008709
 80086d8:	08008711 	.word	0x08008711
 80086dc:	08008719 	.word	0x08008719
 80086e0:	08008721 	.word	0x08008721
 80086e4:	08008729 	.word	0x08008729
 80086e8:	08008731 	.word	0x08008731
 80086ec:	08008739 	.word	0x08008739
 80086f0:	08008741 	.word	0x08008741
 80086f4:	08008749 	.word	0x08008749
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2200      	movs	r2, #0
 80086fc:	701a      	strb	r2, [r3, #0]
      break;
 80086fe:	e02b      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2201      	movs	r2, #1
 8008704:	701a      	strb	r2, [r3, #0]
      break;
 8008706:	e027      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2202      	movs	r2, #2
 800870c:	701a      	strb	r2, [r3, #0]
      break;
 800870e:	e023      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2203      	movs	r2, #3
 8008714:	701a      	strb	r2, [r3, #0]
      break;
 8008716:	e01f      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2204      	movs	r2, #4
 800871c:	701a      	strb	r2, [r3, #0]
      break;
 800871e:	e01b      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2205      	movs	r2, #5
 8008724:	701a      	strb	r2, [r3, #0]
      break;
 8008726:	e017      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2206      	movs	r2, #6
 800872c:	701a      	strb	r2, [r3, #0]
      break;
 800872e:	e013      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2207      	movs	r2, #7
 8008734:	701a      	strb	r2, [r3, #0]
      break;
 8008736:	e00f      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2208      	movs	r2, #8
 800873c:	701a      	strb	r2, [r3, #0]
      break;
 800873e:	e00b      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	2209      	movs	r2, #9
 8008744:	701a      	strb	r2, [r3, #0]
      break;
 8008746:	e007      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	220a      	movs	r2, #10
 800874c:	701a      	strb	r2, [r3, #0]
      break;
 800874e:	e003      	b.n	8008758 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	2200      	movs	r2, #0
 8008754:	701a      	strb	r2, [r3, #0]
      break;
 8008756:	bf00      	nop
  }

  return ret;
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop

08008764 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008770:	f107 0208 	add.w	r2, r7, #8
 8008774:	2301      	movs	r3, #1
 8008776:	2112      	movs	r1, #18
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff fc3f 	bl	8007ffc <lsm6dso_read_reg>
 800877e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10f      	bne.n	80087a6 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	b2da      	uxtb	r2, r3
 800878e:	7a3b      	ldrb	r3, [r7, #8]
 8008790:	f362 1386 	bfi	r3, r2, #6, #1
 8008794:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008796:	f107 0208 	add.w	r2, r7, #8
 800879a:	2301      	movs	r3, #1
 800879c:	2112      	movs	r1, #18
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff fc44 	bl	800802c <lsm6dso_write_reg>
 80087a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80087a6:	68fb      	ldr	r3, [r7, #12]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80087ba:	f107 020c 	add.w	r2, r7, #12
 80087be:	2306      	movs	r3, #6
 80087c0:	2122      	movs	r1, #34	@ 0x22
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fc1a 	bl	8007ffc <lsm6dso_read_reg>
 80087c8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80087ca:	7b7b      	ldrb	r3, [r7, #13]
 80087cc:	b21a      	sxth	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087d8:	b29b      	uxth	r3, r3
 80087da:	021b      	lsls	r3, r3, #8
 80087dc:	b29b      	uxth	r3, r3
 80087de:	7b3a      	ldrb	r2, [r7, #12]
 80087e0:	4413      	add	r3, r2
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	b21a      	sxth	r2, r3
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80087ea:	7bfa      	ldrb	r2, [r7, #15]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	3302      	adds	r3, #2
 80087f0:	b212      	sxth	r2, r2
 80087f2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	3302      	adds	r3, #2
 80087f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	b29b      	uxth	r3, r3
 8008802:	7bba      	ldrb	r2, [r7, #14]
 8008804:	4413      	add	r3, r2
 8008806:	b29a      	uxth	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	3302      	adds	r3, #2
 800880c:	b212      	sxth	r2, r2
 800880e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008810:	7c7a      	ldrb	r2, [r7, #17]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	3304      	adds	r3, #4
 8008816:	b212      	sxth	r2, r2
 8008818:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	3304      	adds	r3, #4
 800881e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008822:	b29b      	uxth	r3, r3
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	b29b      	uxth	r3, r3
 8008828:	7c3a      	ldrb	r2, [r7, #16]
 800882a:	4413      	add	r3, r2
 800882c:	b29a      	uxth	r2, r3
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	3304      	adds	r3, #4
 8008832:	b212      	sxth	r2, r2
 8008834:	801a      	strh	r2, [r3, #0]

  return ret;
 8008836:	697b      	ldr	r3, [r7, #20]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800884a:	f107 020c 	add.w	r2, r7, #12
 800884e:	2306      	movs	r3, #6
 8008850:	2128      	movs	r1, #40	@ 0x28
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff fbd2 	bl	8007ffc <lsm6dso_read_reg>
 8008858:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800885a:	7b7b      	ldrb	r3, [r7, #13]
 800885c:	b21a      	sxth	r2, r3
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008868:	b29b      	uxth	r3, r3
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	b29b      	uxth	r3, r3
 800886e:	7b3a      	ldrb	r2, [r7, #12]
 8008870:	4413      	add	r3, r2
 8008872:	b29b      	uxth	r3, r3
 8008874:	b21a      	sxth	r2, r3
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800887a:	7bfa      	ldrb	r2, [r7, #15]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	3302      	adds	r3, #2
 8008880:	b212      	sxth	r2, r2
 8008882:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	3302      	adds	r3, #2
 8008888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800888c:	b29b      	uxth	r3, r3
 800888e:	021b      	lsls	r3, r3, #8
 8008890:	b29b      	uxth	r3, r3
 8008892:	7bba      	ldrb	r2, [r7, #14]
 8008894:	4413      	add	r3, r2
 8008896:	b29a      	uxth	r2, r3
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	3302      	adds	r3, #2
 800889c:	b212      	sxth	r2, r2
 800889e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80088a0:	7c7a      	ldrb	r2, [r7, #17]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	3304      	adds	r3, #4
 80088a6:	b212      	sxth	r2, r2
 80088a8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	3304      	adds	r3, #4
 80088ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	7c3a      	ldrb	r2, [r7, #16]
 80088ba:	4413      	add	r3, r2
 80088bc:	b29a      	uxth	r2, r3
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	3304      	adds	r3, #4
 80088c2:	b212      	sxth	r2, r2
 80088c4:	801a      	strh	r2, [r3, #0]

  return ret;
 80088c6:	697b      	ldr	r3, [r7, #20]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80088dc:	2300      	movs	r3, #0
 80088de:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	f003 0303 	and.w	r3, r3, #3
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	7a3b      	ldrb	r3, [r7, #8]
 80088ea:	f362 1387 	bfi	r3, r2, #6, #2
 80088ee:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80088f0:	f107 0208 	add.w	r2, r7, #8
 80088f4:	2301      	movs	r3, #1
 80088f6:	2101      	movs	r1, #1
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff fb97 	bl	800802c <lsm6dso_write_reg>
 80088fe:	60f8      	str	r0, [r7, #12]

  return ret;
 8008900:	68fb      	ldr	r3, [r7, #12]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8008914:	2301      	movs	r3, #1
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	210f      	movs	r1, #15
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fb6e 	bl	8007ffc <lsm6dso_read_reg>
 8008920:	60f8      	str	r0, [r7, #12]

  return ret;
 8008922:	68fb      	ldr	r3, [r7, #12]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008938:	f107 0208 	add.w	r2, r7, #8
 800893c:	2301      	movs	r3, #1
 800893e:	2112      	movs	r1, #18
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff fb5b 	bl	8007ffc <lsm6dso_read_reg>
 8008946:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10f      	bne.n	800896e <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	b2da      	uxtb	r2, r3
 8008956:	7a3b      	ldrb	r3, [r7, #8]
 8008958:	f362 0382 	bfi	r3, r2, #2, #1
 800895c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800895e:	f107 0208 	add.w	r2, r7, #8
 8008962:	2301      	movs	r3, #1
 8008964:	2112      	movs	r1, #18
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff fb60 	bl	800802c <lsm6dso_write_reg>
 800896c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800896e:	68fb      	ldr	r3, [r7, #12]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008984:	f107 020c 	add.w	r2, r7, #12
 8008988:	2301      	movs	r3, #1
 800898a:	2118      	movs	r1, #24
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff fb35 	bl	8007ffc <lsm6dso_read_reg>
 8008992:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	09db      	lsrs	r3, r3, #7
 8008998:	b2db      	uxtb	r3, r3
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	7b3b      	ldrb	r3, [r7, #12]
 80089a2:	f362 0341 	bfi	r3, r2, #1, #1
 80089a6:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80089a8:	f107 020c 	add.w	r2, r7, #12
 80089ac:	2301      	movs	r3, #1
 80089ae:	2118      	movs	r1, #24
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff fb3b 	bl	800802c <lsm6dso_write_reg>
 80089b6:	4602      	mov	r2, r0
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4413      	add	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <lsm6dso_i3c_disable_set+0x50>
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	e01b      	b.n	8008a00 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80089c8:	f107 0210 	add.w	r2, r7, #16
 80089cc:	2301      	movs	r3, #1
 80089ce:	2162      	movs	r1, #98	@ 0x62
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff fb13 	bl	8007ffc <lsm6dso_read_reg>
 80089d6:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	7c3b      	ldrb	r3, [r7, #16]
 80089e2:	f362 03c4 	bfi	r3, r2, #3, #2
 80089e6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80089e8:	f107 0210 	add.w	r2, r7, #16
 80089ec:	2301      	movs	r3, #1
 80089ee:	2162      	movs	r1, #98	@ 0x62
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fb1b 	bl	800802c <lsm6dso_write_reg>
 80089f6:	4602      	mov	r2, r0
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	4413      	add	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]

  return ret;
 80089fe:	697b      	ldr	r3, [r7, #20]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3718      	adds	r7, #24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008a14:	f107 0208 	add.w	r2, r7, #8
 8008a18:	2301      	movs	r3, #1
 8008a1a:	210a      	movs	r1, #10
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff faed 	bl	8007ffc <lsm6dso_read_reg>
 8008a22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10f      	bne.n	8008a4a <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	7a3b      	ldrb	r3, [r7, #8]
 8008a34:	f362 0302 	bfi	r3, r2, #0, #3
 8008a38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008a3a:	f107 0208 	add.w	r2, r7, #8
 8008a3e:	2301      	movs	r3, #1
 8008a40:	210a      	movs	r1, #10
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7ff faf2 	bl	800802c <lsm6dso_write_reg>
 8008a48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008a5e:	2102      	movs	r1, #2
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff ff35 	bl	80088d0 <lsm6dso_mem_bank_set>
 8008a66:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8008a68:	2302      	movs	r3, #2
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	2146      	movs	r1, #70	@ 0x46
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fac4 	bl	8007ffc <lsm6dso_read_reg>
 8008a74:	4602      	mov	r2, r0
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff ff26 	bl	80088d0 <lsm6dso_mem_bank_set>
 8008a84:	4602      	mov	r2, r0
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]

  return ret;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
	...

08008a98 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8008aa2:	2102      	movs	r1, #2
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff ff13 	bl	80088d0 <lsm6dso_mem_bank_set>
 8008aaa:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <lsm6dso_fsm_data_rate_get+0x1e>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	e03a      	b.n	8008b2c <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8008ab6:	f107 0208 	add.w	r2, r7, #8
 8008aba:	2301      	movs	r3, #1
 8008abc:	215f      	movs	r1, #95	@ 0x5f
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff fa9c 	bl	8007ffc <lsm6dso_read_reg>
 8008ac4:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d125      	bne.n	8008b18 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8008acc:	7a3b      	ldrb	r3, [r7, #8]
 8008ace:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d81b      	bhi.n	8008b10 <lsm6dso_fsm_data_rate_get+0x78>
 8008ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae0 <lsm6dso_fsm_data_rate_get+0x48>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008af9 	.word	0x08008af9
 8008ae8:	08008b01 	.word	0x08008b01
 8008aec:	08008b09 	.word	0x08008b09
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
      break;
 8008af6:	e010      	b.n	8008b1a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2201      	movs	r2, #1
 8008afc:	701a      	strb	r2, [r3, #0]
      break;
 8008afe:	e00c      	b.n	8008b1a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2202      	movs	r2, #2
 8008b04:	701a      	strb	r2, [r3, #0]
      break;
 8008b06:	e008      	b.n	8008b1a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	701a      	strb	r2, [r3, #0]
      break;
 8008b0e:	e004      	b.n	8008b1a <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2200      	movs	r2, #0
 8008b14:	701a      	strb	r2, [r3, #0]
      break;
 8008b16:	e000      	b.n	8008b1a <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8008b18:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff fed7 	bl	80088d0 <lsm6dso_mem_bank_set>
 8008b22:	4602      	mov	r2, r0
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]

  return ret;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d103      	bne.n	8008b4c <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8008b44:	f04f 33ff 	mov.w	r3, #4294967295
 8008b48:	60fb      	str	r3, [r7, #12]
 8008b4a:	e034      	b.n	8008bb6 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	7b1a      	ldrb	r2, [r3, #12]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	695a      	ldr	r2, [r3, #20]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	699a      	ldr	r2, [r3, #24]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a0e      	ldr	r2, [pc, #56]	@ (8008bc0 <STTS751_RegisterBusIO+0x8c>)
 8008b88:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8008bc4 <STTS751_RegisterBusIO+0x90>)
 8008b8e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	69da      	ldr	r2, [r3, #28]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
 8008bae:	e002      	b.n	8008bb6 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8008bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	0800902d 	.word	0x0800902d
 8008bc4:	0800909b 	.word	0x0800909b

08008bc8 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d127      	bne.n	8008c2a <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3320      	adds	r3, #32
 8008bde:	2101      	movs	r1, #1
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fc39 	bl	8009458 <stts751_pin_event_route_set>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8008bec:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf0:	e020      	b.n	8008c34 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008bf8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3320      	adds	r3, #32
 8008bfe:	2103      	movs	r1, #3
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 fb9d 	bl	8009340 <stts751_resolution_set>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8008c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c10:	e010      	b.n	8008c34 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	3320      	adds	r3, #32
 8008c16:	2180      	movs	r1, #128	@ 0x80
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 faba 	bl	8009192 <stts751_temp_data_rate_set>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8008c24:	f04f 33ff 	mov.w	r3, #4294967295
 8008c28:	e004      	b.n	8008c34 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d108      	bne.n	8008c60 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f874 	bl	8008d3c <STTS751_TEMP_Disable>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8008c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5e:	e004      	b.n	8008c6a <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3320      	adds	r3, #32
 8008c80:	f107 020c 	add.w	r2, r7, #12
 8008c84:	4611      	mov	r1, r2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fc0c 	bl	80094a4 <stts751_device_id_get>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8008c92:	f04f 33ff 	mov.w	r3, #4294967295
 8008c96:	e003      	b.n	8008ca0 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8008c98:	7b7a      	ldrb	r2, [r7, #13]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	f04f 0200 	mov.w	r2, #0
 8008cd6:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 8008cde:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f04f 0200 	mov.w	r2, #0
 8008cee:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr

08008cfc <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d101      	bne.n	8008d12 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e010      	b.n	8008d34 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f8b5 	bl	8008e88 <STTS751_TEMP_SetOutputDataRate>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 8008d24:	f04f 33ff 	mov.w	r3, #4294967295
 8008d28:	e004      	b.n	8008d34 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e01c      	b.n	8008d8c <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3334      	adds	r3, #52	@ 0x34
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f81b 	bl	8008d94 <STTS751_TEMP_GetOutputDataRate>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8008d64:	f04f 33ff 	mov.w	r3, #4294967295
 8008d68:	e010      	b.n	8008d8c <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3320      	adds	r3, #32
 8008d6e:	2180      	movs	r1, #128	@ 0x80
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fa0e 	bl	8009192 <stts751_temp_data_rate_set>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8008d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d80:	e004      	b.n	8008d8c <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3320      	adds	r3, #32
 8008da6:	f107 020b 	add.w	r2, r7, #11
 8008daa:	4611      	mov	r1, r2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 fa47 	bl	8009240 <stts751_temp_data_rate_get>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8008db8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dbc:	e060      	b.n	8008e80 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	2b90      	cmp	r3, #144	@ 0x90
 8008dc2:	d021      	beq.n	8008e08 <STTS751_TEMP_GetOutputDataRate+0x74>
 8008dc4:	2b90      	cmp	r3, #144	@ 0x90
 8008dc6:	dc56      	bgt.n	8008e76 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008dc8:	2b09      	cmp	r3, #9
 8008dca:	dc1b      	bgt.n	8008e04 <STTS751_TEMP_GetOutputDataRate+0x70>
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	db52      	blt.n	8008e76 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008dd0:	2b09      	cmp	r3, #9
 8008dd2:	d850      	bhi.n	8008e76 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ddc <STTS751_TEMP_GetOutputDataRate+0x48>)
 8008dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dda:	bf00      	nop
 8008ddc:	08008e13 	.word	0x08008e13
 8008de0:	08008e1d 	.word	0x08008e1d
 8008de4:	08008e27 	.word	0x08008e27
 8008de8:	08008e31 	.word	0x08008e31
 8008dec:	08008e3b 	.word	0x08008e3b
 8008df0:	08008e45 	.word	0x08008e45
 8008df4:	08008e4f 	.word	0x08008e4f
 8008df8:	08008e59 	.word	0x08008e59
 8008dfc:	08008e63 	.word	0x08008e63
 8008e00:	08008e6d 	.word	0x08008e6d
 8008e04:	2b80      	cmp	r3, #128	@ 0x80
 8008e06:	d136      	bne.n	8008e76 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
      break;
 8008e10:	e035      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 8008e18:	601a      	str	r2, [r3, #0]
      break;
 8008e1a:	e030      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 8008e22:	601a      	str	r2, [r3, #0]
      break;
 8008e24:	e02b      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8008e2c:	601a      	str	r2, [r3, #0]
      break;
 8008e2e:	e026      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8008e36:	601a      	str	r2, [r3, #0]
      break;
 8008e38:	e021      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008e40:	601a      	str	r2, [r3, #0]
      break;
 8008e42:	e01c      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008e4a:	601a      	str	r2, [r3, #0]
      break;
 8008e4c:	e017      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8008e54:	601a      	str	r2, [r3, #0]
      break;
 8008e56:	e012      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8008e5e:	601a      	str	r2, [r3, #0]
      break;
 8008e60:	e00d      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8008e68:	601a      	str	r2, [r3, #0]
      break;
 8008e6a:	e008      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 8008e72:	601a      	str	r2, [r3, #0]
      break;
 8008e74:	e003      	b.n	8008e7e <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295
 8008e7a:	60fb      	str	r3, [r7, #12]
      break;
 8008e7c:	bf00      	nop
  }

  return ret;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3320      	adds	r3, #32
 8008e96:	f107 020e 	add.w	r2, r7, #14
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fa75 	bl	800938c <stts751_resolution_get>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eac:	e09a      	b.n	8008fe4 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8008eae:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8008eb2:	6838      	ldr	r0, [r7, #0]
 8008eb4:	f7f8 f912 	bl	80010dc <__aeabi_fcmpeq>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00e      	beq.n	8008edc <STTS751_TEMP_SetOutputDataRate+0x54>
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d10b      	bne.n	8008edc <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3320      	adds	r3, #32
 8008ec8:	2101      	movs	r1, #1
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 fa38 	bl	8009340 <stts751_resolution_set>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 8008ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eda:	e083      	b.n	8008fe4 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8008edc:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8008ee0:	6838      	ldr	r0, [r7, #0]
 8008ee2:	f7f8 f8fb 	bl	80010dc <__aeabi_fcmpeq>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d011      	beq.n	8008f10 <STTS751_TEMP_SetOutputDataRate+0x88>
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d002      	beq.n	8008ef8 <STTS751_TEMP_SetOutputDataRate+0x70>
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d10b      	bne.n	8008f10 <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3320      	adds	r3, #32
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fa1e 	bl	8009340 <stts751_resolution_set>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 8008f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0e:	e069      	b.n	8008fe4 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8008f10:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008f14:	6838      	ldr	r0, [r7, #0]
 8008f16:	f7f8 f8f5 	bl	8001104 <__aeabi_fcmple>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <STTS751_TEMP_SetOutputDataRate+0x9c>
 8008f20:	2300      	movs	r3, #0
 8008f22:	e050      	b.n	8008fc6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008f24:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8008f28:	6838      	ldr	r0, [r7, #0]
 8008f2a:	f7f8 f8eb 	bl	8001104 <__aeabi_fcmple>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <STTS751_TEMP_SetOutputDataRate+0xb0>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e046      	b.n	8008fc6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008f38:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8008f3c:	6838      	ldr	r0, [r7, #0]
 8008f3e:	f7f8 f8e1 	bl	8001104 <__aeabi_fcmple>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <STTS751_TEMP_SetOutputDataRate+0xc4>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e03c      	b.n	8008fc6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008f4c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008f50:	6838      	ldr	r0, [r7, #0]
 8008f52:	f7f8 f8d7 	bl	8001104 <__aeabi_fcmple>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <STTS751_TEMP_SetOutputDataRate+0xd8>
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e032      	b.n	8008fc6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008f60:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008f64:	6838      	ldr	r0, [r7, #0]
 8008f66:	f7f8 f8cd 	bl	8001104 <__aeabi_fcmple>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <STTS751_TEMP_SetOutputDataRate+0xec>
 8008f70:	2304      	movs	r3, #4
 8008f72:	e028      	b.n	8008fc6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008f74:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008f78:	6838      	ldr	r0, [r7, #0]
 8008f7a:	f7f8 f8c3 	bl	8001104 <__aeabi_fcmple>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <STTS751_TEMP_SetOutputDataRate+0x100>
 8008f84:	2305      	movs	r3, #5
 8008f86:	e01e      	b.n	8008fc6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008f88:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8008f8c:	6838      	ldr	r0, [r7, #0]
 8008f8e:	f7f8 f8b9 	bl	8001104 <__aeabi_fcmple>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <STTS751_TEMP_SetOutputDataRate+0x114>
 8008f98:	2306      	movs	r3, #6
 8008f9a:	e014      	b.n	8008fc6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008f9c:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8008fa0:	6838      	ldr	r0, [r7, #0]
 8008fa2:	f7f8 f8af 	bl	8001104 <__aeabi_fcmple>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <STTS751_TEMP_SetOutputDataRate+0x128>
 8008fac:	2307      	movs	r3, #7
 8008fae:	e00a      	b.n	8008fc6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008fb0:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8008fb4:	6838      	ldr	r0, [r7, #0]
 8008fb6:	f7f8 f8a5 	bl	8001104 <__aeabi_fcmple>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <STTS751_TEMP_SetOutputDataRate+0x13c>
 8008fc0:	2308      	movs	r3, #8
 8008fc2:	e000      	b.n	8008fc6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008fc4:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8008fc6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	3320      	adds	r3, #32
 8008fcc:	7bfa      	ldrb	r2, [r7, #15]
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f8de 	bl	8009192 <stts751_temp_data_rate_set>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 8008fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe0:	e000      	b.n	8008fe4 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3320      	adds	r3, #32
 8008ffa:	f107 020e 	add.w	r2, r7, #14
 8008ffe:	4611      	mov	r1, r2
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f9fb 	bl	80093fc <stts751_temperature_raw_get>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 800900c:	f04f 33ff 	mov.w	r3, #4294967295
 8009010:	e008      	b.n	8009024 <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8009012:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f8a6 	bl	8009168 <stts751_from_lsb_to_celsius>
 800901c:	4602      	mov	r2, r0
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800902c:	b590      	push	{r4, r7, lr}
 800902e:	b089      	sub	sp, #36	@ 0x24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	607a      	str	r2, [r7, #4]
 8009036:	461a      	mov	r2, r3
 8009038:	460b      	mov	r3, r1
 800903a:	72fb      	strb	r3, [r7, #11]
 800903c:	4613      	mov	r3, r2
 800903e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d11f      	bne.n	8009090 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8009050:	2300      	movs	r3, #0
 8009052:	83fb      	strh	r3, [r7, #30]
 8009054:	e018      	b.n	8009088 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	695c      	ldr	r4, [r3, #20]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	7b1b      	ldrb	r3, [r3, #12]
 800905e:	4618      	mov	r0, r3
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	b29a      	uxth	r2, r3
 8009064:	8bfb      	ldrh	r3, [r7, #30]
 8009066:	4413      	add	r3, r2
 8009068:	b299      	uxth	r1, r3
 800906a:	8bfb      	ldrh	r3, [r7, #30]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	441a      	add	r2, r3
 8009070:	2301      	movs	r3, #1
 8009072:	47a0      	blx	r4
 8009074:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 800907c:	f04f 33ff 	mov.w	r3, #4294967295
 8009080:	e007      	b.n	8009092 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8009082:	8bfb      	ldrh	r3, [r7, #30]
 8009084:	3301      	adds	r3, #1
 8009086:	83fb      	strh	r3, [r7, #30]
 8009088:	8bfa      	ldrh	r2, [r7, #30]
 800908a:	893b      	ldrh	r3, [r7, #8]
 800908c:	429a      	cmp	r2, r3
 800908e:	d3e2      	bcc.n	8009056 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8009090:	69bb      	ldr	r3, [r7, #24]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3724      	adds	r7, #36	@ 0x24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd90      	pop	{r4, r7, pc}

0800909a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800909a:	b590      	push	{r4, r7, lr}
 800909c:	b089      	sub	sp, #36	@ 0x24
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	461a      	mov	r2, r3
 80090a6:	460b      	mov	r3, r1
 80090a8:	72fb      	strb	r3, [r7, #11]
 80090aa:	4613      	mov	r3, r2
 80090ac:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d11f      	bne.n	80090fe <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80090be:	2300      	movs	r3, #0
 80090c0:	83fb      	strh	r3, [r7, #30]
 80090c2:	e018      	b.n	80090f6 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	691c      	ldr	r4, [r3, #16]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	7b1b      	ldrb	r3, [r3, #12]
 80090cc:	4618      	mov	r0, r3
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	8bfb      	ldrh	r3, [r7, #30]
 80090d4:	4413      	add	r3, r2
 80090d6:	b299      	uxth	r1, r3
 80090d8:	8bfb      	ldrh	r3, [r7, #30]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	441a      	add	r2, r3
 80090de:	2301      	movs	r3, #1
 80090e0:	47a0      	blx	r4
 80090e2:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 80090ea:	f04f 33ff 	mov.w	r3, #4294967295
 80090ee:	e007      	b.n	8009100 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80090f0:	8bfb      	ldrh	r3, [r7, #30]
 80090f2:	3301      	adds	r3, #1
 80090f4:	83fb      	strh	r3, [r7, #30]
 80090f6:	8bfa      	ldrh	r2, [r7, #30]
 80090f8:	893b      	ldrh	r3, [r7, #8]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d3e2      	bcc.n	80090c4 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 80090fe:	69bb      	ldr	r3, [r7, #24]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3724      	adds	r7, #36	@ 0x24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd90      	pop	{r4, r7, pc}

08009108 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	607a      	str	r2, [r7, #4]
 8009112:	461a      	mov	r2, r3
 8009114:	460b      	mov	r3, r1
 8009116:	72fb      	strb	r3, [r7, #11]
 8009118:	4613      	mov	r3, r2
 800911a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	685c      	ldr	r4, [r3, #4]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68d8      	ldr	r0, [r3, #12]
 8009124:	893b      	ldrh	r3, [r7, #8]
 8009126:	7af9      	ldrb	r1, [r7, #11]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	47a0      	blx	r4
 800912c:	6178      	str	r0, [r7, #20]

  return ret;
 800912e:	697b      	ldr	r3, [r7, #20]
}
 8009130:	4618      	mov	r0, r3
 8009132:	371c      	adds	r7, #28
 8009134:	46bd      	mov	sp, r7
 8009136:	bd90      	pop	{r4, r7, pc}

08009138 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8009138:	b590      	push	{r4, r7, lr}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	607a      	str	r2, [r7, #4]
 8009142:	461a      	mov	r2, r3
 8009144:	460b      	mov	r3, r1
 8009146:	72fb      	strb	r3, [r7, #11]
 8009148:	4613      	mov	r3, r2
 800914a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681c      	ldr	r4, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	68d8      	ldr	r0, [r3, #12]
 8009154:	893b      	ldrh	r3, [r7, #8]
 8009156:	7af9      	ldrb	r1, [r7, #11]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	47a0      	blx	r4
 800915c:	6178      	str	r0, [r7, #20]

  return ret;
 800915e:	697b      	ldr	r3, [r7, #20]
}
 8009160:	4618      	mov	r0, r3
 8009162:	371c      	adds	r7, #28
 8009164:	46bd      	mov	sp, r7
 8009166:	bd90      	pop	{r4, r7, pc}

08009168 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8009172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009176:	4618      	mov	r0, r3
 8009178:	f7f7 fdc8 	bl	8000d0c <__aeabi_i2f>
 800917c:	4603      	mov	r3, r0
 800917e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8009182:	4618      	mov	r0, r3
 8009184:	f7f7 feca 	bl	8000f1c <__aeabi_fdiv>
 8009188:	4603      	mov	r3, r0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b086      	sub	sp, #24
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800919e:	23aa      	movs	r3, #170	@ 0xaa
 80091a0:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80091a2:	f107 020c 	add.w	r2, r7, #12
 80091a6:	2301      	movs	r3, #1
 80091a8:	2104      	movs	r1, #4
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff ffac 	bl	8009108 <stts751_read_reg>
 80091b0:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10f      	bne.n	80091d8 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	7b3b      	ldrb	r3, [r7, #12]
 80091c2:	f362 0303 	bfi	r3, r2, #0, #4
 80091c6:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80091c8:	f107 020c 	add.w	r2, r7, #12
 80091cc:	2301      	movs	r3, #1
 80091ce:	2104      	movs	r1, #4
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff ffb1 	bl	8009138 <stts751_write_reg>
 80091d6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d107      	bne.n	80091ee <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80091de:	f107 0210 	add.w	r2, r7, #16
 80091e2:	2301      	movs	r3, #1
 80091e4:	2103      	movs	r1, #3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff ff8e 	bl	8009108 <stts751_read_reg>
 80091ec:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d111      	bne.n	8009218 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	09db      	lsrs	r3, r3, #7
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	7c3b      	ldrb	r3, [r7, #16]
 8009202:	f362 1386 	bfi	r3, r2, #6, #1
 8009206:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8009208:	f107 0210 	add.w	r2, r7, #16
 800920c:	2301      	movs	r3, #1
 800920e:	2103      	movs	r1, #3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff ff91 	bl	8009138 <stts751_write_reg>
 8009216:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <stts751_temp_data_rate_set+0xa2>
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	2b90      	cmp	r3, #144	@ 0x90
 8009222:	d107      	bne.n	8009234 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8009224:	f107 020b 	add.w	r2, r7, #11
 8009228:	2301      	movs	r3, #1
 800922a:	210f      	movs	r1, #15
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff ff83 	bl	8009138 <stts751_write_reg>
 8009232:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8009234:	697b      	ldr	r3, [r7, #20]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800924a:	f107 0210 	add.w	r2, r7, #16
 800924e:	2301      	movs	r3, #1
 8009250:	2104      	movs	r1, #4
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff ff58 	bl	8009108 <stts751_read_reg>
 8009258:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d107      	bne.n	8009270 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8009260:	f107 020c 	add.w	r2, r7, #12
 8009264:	2301      	movs	r3, #1
 8009266:	2103      	movs	r1, #3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff ff4d 	bl	8009108 <stts751_read_reg>
 800926e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8009270:	7b3b      	ldrb	r3, [r7, #12]
 8009272:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009276:	b2db      	uxtb	r3, r3
 8009278:	01db      	lsls	r3, r3, #7
 800927a:	7c3a      	ldrb	r2, [r7, #16]
 800927c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8009280:	b2d2      	uxtb	r2, r2
 8009282:	4413      	add	r3, r2
 8009284:	2b90      	cmp	r3, #144	@ 0x90
 8009286:	d025      	beq.n	80092d4 <stts751_temp_data_rate_get+0x94>
 8009288:	2b90      	cmp	r3, #144	@ 0x90
 800928a:	dc4f      	bgt.n	800932c <stts751_temp_data_rate_get+0xec>
 800928c:	2b09      	cmp	r3, #9
 800928e:	dc1b      	bgt.n	80092c8 <stts751_temp_data_rate_get+0x88>
 8009290:	2b00      	cmp	r3, #0
 8009292:	db4b      	blt.n	800932c <stts751_temp_data_rate_get+0xec>
 8009294:	2b09      	cmp	r3, #9
 8009296:	d849      	bhi.n	800932c <stts751_temp_data_rate_get+0xec>
 8009298:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <stts751_temp_data_rate_get+0x60>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	080092dd 	.word	0x080092dd
 80092a4:	080092e5 	.word	0x080092e5
 80092a8:	080092ed 	.word	0x080092ed
 80092ac:	080092f5 	.word	0x080092f5
 80092b0:	080092fd 	.word	0x080092fd
 80092b4:	08009305 	.word	0x08009305
 80092b8:	0800930d 	.word	0x0800930d
 80092bc:	08009315 	.word	0x08009315
 80092c0:	0800931d 	.word	0x0800931d
 80092c4:	08009325 	.word	0x08009325
 80092c8:	2b80      	cmp	r3, #128	@ 0x80
 80092ca:	d12f      	bne.n	800932c <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2280      	movs	r2, #128	@ 0x80
 80092d0:	701a      	strb	r2, [r3, #0]
      break;
 80092d2:	e02f      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2290      	movs	r2, #144	@ 0x90
 80092d8:	701a      	strb	r2, [r3, #0]
      break;
 80092da:	e02b      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]
      break;
 80092e2:	e027      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2201      	movs	r2, #1
 80092e8:	701a      	strb	r2, [r3, #0]
      break;
 80092ea:	e023      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2202      	movs	r2, #2
 80092f0:	701a      	strb	r2, [r3, #0]
      break;
 80092f2:	e01f      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2203      	movs	r2, #3
 80092f8:	701a      	strb	r2, [r3, #0]
      break;
 80092fa:	e01b      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2204      	movs	r2, #4
 8009300:	701a      	strb	r2, [r3, #0]
      break;
 8009302:	e017      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2205      	movs	r2, #5
 8009308:	701a      	strb	r2, [r3, #0]
      break;
 800930a:	e013      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2206      	movs	r2, #6
 8009310:	701a      	strb	r2, [r3, #0]
      break;
 8009312:	e00f      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2207      	movs	r2, #7
 8009318:	701a      	strb	r2, [r3, #0]
      break;
 800931a:	e00b      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2208      	movs	r2, #8
 8009320:	701a      	strb	r2, [r3, #0]
      break;
 8009322:	e007      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2209      	movs	r2, #9
 8009328:	701a      	strb	r2, [r3, #0]
      break;
 800932a:	e003      	b.n	8009334 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	2280      	movs	r2, #128	@ 0x80
 8009330:	701a      	strb	r2, [r3, #0]
      break;
 8009332:	bf00      	nop
  }

  return ret;
 8009334:	697b      	ldr	r3, [r7, #20]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop

08009340 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800934c:	f107 0208 	add.w	r2, r7, #8
 8009350:	2301      	movs	r3, #1
 8009352:	2103      	movs	r1, #3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7ff fed7 	bl	8009108 <stts751_read_reg>
 800935a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10f      	bne.n	8009382 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	b2da      	uxtb	r2, r3
 800936a:	7a3b      	ldrb	r3, [r7, #8]
 800936c:	f362 0383 	bfi	r3, r2, #2, #2
 8009370:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009372:	f107 0208 	add.w	r2, r7, #8
 8009376:	2301      	movs	r3, #1
 8009378:	2103      	movs	r1, #3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fedc 	bl	8009138 <stts751_write_reg>
 8009380:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009382:	68fb      	ldr	r3, [r7, #12]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8009396:	f107 0208 	add.w	r2, r7, #8
 800939a:	2301      	movs	r3, #1
 800939c:	2103      	movs	r1, #3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff feb2 	bl	8009108 <stts751_read_reg>
 80093a4:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 80093a6:	7a3b      	ldrb	r3, [r7, #8]
 80093a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d81a      	bhi.n	80093e8 <stts751_resolution_get+0x5c>
 80093b2:	a201      	add	r2, pc, #4	@ (adr r2, 80093b8 <stts751_resolution_get+0x2c>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093d1 	.word	0x080093d1
 80093bc:	080093d9 	.word	0x080093d9
 80093c0:	080093c9 	.word	0x080093c9
 80093c4:	080093e1 	.word	0x080093e1
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2202      	movs	r2, #2
 80093cc:	701a      	strb	r2, [r3, #0]
      break;
 80093ce:	e00f      	b.n	80093f0 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]
      break;
 80093d6:	e00b      	b.n	80093f0 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2201      	movs	r2, #1
 80093dc:	701a      	strb	r2, [r3, #0]
      break;
 80093de:	e007      	b.n	80093f0 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	2203      	movs	r2, #3
 80093e4:	701a      	strb	r2, [r3, #0]
      break;
 80093e6:	e003      	b.n	80093f0 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2202      	movs	r2, #2
 80093ec:	701a      	strb	r2, [r3, #0]
      break;
 80093ee:	bf00      	nop
  }

  return ret;
 80093f0:	68fb      	ldr	r3, [r7, #12]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop

080093fc <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8009406:	f107 0308 	add.w	r3, r7, #8
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	2301      	movs	r3, #1
 800940e:	2100      	movs	r1, #0
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff fe79 	bl	8009108 <stts751_read_reg>
 8009416:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d117      	bne.n	800944e <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 800941e:	f107 0208 	add.w	r2, r7, #8
 8009422:	2301      	movs	r3, #1
 8009424:	2102      	movs	r1, #2
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7ff fe6e 	bl	8009108 <stts751_read_reg>
 800942c:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 800942e:	7a7b      	ldrb	r3, [r7, #9]
 8009430:	b21a      	sxth	r2, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800943c:	b29b      	uxth	r3, r3
 800943e:	021b      	lsls	r3, r3, #8
 8009440:	b29b      	uxth	r3, r3
 8009442:	7a3a      	ldrb	r2, [r7, #8]
 8009444:	4413      	add	r3, r2
 8009446:	b29b      	uxth	r3, r3
 8009448:	b21a      	sxth	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800944e:	68fb      	ldr	r3, [r7, #12]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8009464:	f107 0208 	add.w	r2, r7, #8
 8009468:	2301      	movs	r3, #1
 800946a:	2103      	movs	r1, #3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff fe4b 	bl	8009108 <stts751_read_reg>
 8009472:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10f      	bne.n	800949a <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	b2da      	uxtb	r2, r3
 8009482:	7a3b      	ldrb	r3, [r7, #8]
 8009484:	f362 13c7 	bfi	r3, r2, #7, #1
 8009488:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800948a:	f107 0208 	add.w	r2, r7, #8
 800948e:	2301      	movs	r3, #1
 8009490:	2103      	movs	r1, #3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff fe50 	bl	8009138 <stts751_write_reg>
 8009498:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800949a:	68fb      	ldr	r3, [r7, #12]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	2301      	movs	r3, #1
 80094b2:	21fd      	movs	r1, #253	@ 0xfd
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff fe27 	bl	8009108 <stts751_read_reg>
 80094ba:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d107      	bne.n	80094d2 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	2301      	movs	r3, #1
 80094c8:	21fe      	movs	r1, #254	@ 0xfe
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff fe1c 	bl	8009108 <stts751_read_reg>
 80094d0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d107      	bne.n	80094e8 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	1c9a      	adds	r2, r3, #2
 80094dc:	2301      	movs	r3, #1
 80094de:	21ff      	movs	r1, #255	@ 0xff
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff fe11 	bl	8009108 <stts751_read_reg>
 80094e6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 80094e8:	68fb      	ldr	r3, [r7, #12]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08c      	sub	sp, #48	@ 0x30
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80094fe:	2300      	movs	r3, #0
 8009500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8009502:	2301      	movs	r3, #1
 8009504:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d07c      	beq.n	800960a <IKS01A3_ENV_SENSOR_Init+0x116>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b02      	cmp	r3, #2
 8009514:	f200 80b2 	bhi.w	800967c <IKS01A3_ENV_SENSOR_Init+0x188>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <IKS01A3_ENV_SENSOR_Init+0x32>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d039      	beq.n	8009598 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8009524:	e0aa      	b.n	800967c <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8009526:	6838      	ldr	r0, [r7, #0]
 8009528:	f000 f934 	bl	8009794 <HTS221_0_Probe>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8009532:	f04f 33ff 	mov.w	r3, #4294967295
 8009536:	e0df      	b.n	80096f8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009538:	4a71      	ldr	r2, [pc, #452]	@ (8009700 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	4970      	ldr	r1, [pc, #448]	@ (8009704 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800954a:	f107 0108 	add.w	r1, r7, #8
 800954e:	4610      	mov	r0, r2
 8009550:	4798      	blx	r3
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009558:	f06f 0306 	mvn.w	r3, #6
 800955c:	e0cc      	b.n	80096f8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800955e:	7a3b      	ldrb	r3, [r7, #8]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d103      	bne.n	800956c <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	f043 0301 	orr.w	r3, r3, #1
 800956a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800956c:	7abb      	ldrb	r3, [r7, #10]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d103      	bne.n	800957a <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	f043 0304 	orr.w	r3, r3, #4
 8009578:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800957a:	7a7b      	ldrb	r3, [r7, #9]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d103      	bne.n	8009588 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	f043 0302 	orr.w	r3, r3, #2
 8009586:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8009588:	7afb      	ldrb	r3, [r7, #11]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d17a      	bne.n	8009684 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	f043 0308 	orr.w	r3, r3, #8
 8009594:	623b      	str	r3, [r7, #32]
      }
      break;
 8009596:	e075      	b.n	8009684 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8009598:	6838      	ldr	r0, [r7, #0]
 800959a:	f000 f9c5 	bl	8009928 <LPS22HH_0_Probe>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 80095a4:	f04f 33ff 	mov.w	r3, #4294967295
 80095a8:	e0a6      	b.n	80096f8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80095aa:	4a55      	ldr	r2, [pc, #340]	@ (8009700 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	4953      	ldr	r1, [pc, #332]	@ (8009704 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80095bc:	f107 0108 	add.w	r1, r7, #8
 80095c0:	4610      	mov	r0, r2
 80095c2:	4798      	blx	r3
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80095ca:	f06f 0306 	mvn.w	r3, #6
 80095ce:	e093      	b.n	80096f8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80095d0:	7a3b      	ldrb	r3, [r7, #8]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d103      	bne.n	80095de <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	f043 0301 	orr.w	r3, r3, #1
 80095dc:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80095de:	7abb      	ldrb	r3, [r7, #10]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d103      	bne.n	80095ec <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	f043 0304 	orr.w	r3, r3, #4
 80095ea:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80095ec:	7a7b      	ldrb	r3, [r7, #9]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d103      	bne.n	80095fa <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	f043 0302 	orr.w	r3, r3, #2
 80095f8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80095fa:	7afb      	ldrb	r3, [r7, #11]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d143      	bne.n	8009688 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	f043 0308 	orr.w	r3, r3, #8
 8009606:	623b      	str	r3, [r7, #32]
      }
      break;
 8009608:	e03e      	b.n	8009688 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800960a:	6838      	ldr	r0, [r7, #0]
 800960c:	f000 fa58 	bl	8009ac0 <STTS751_0_Probe>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8009616:	f04f 33ff 	mov.w	r3, #4294967295
 800961a:	e06d      	b.n	80096f8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800961c:	4a38      	ldr	r2, [pc, #224]	@ (8009700 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	4937      	ldr	r1, [pc, #220]	@ (8009704 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800962e:	f107 0108 	add.w	r1, r7, #8
 8009632:	4610      	mov	r0, r2
 8009634:	4798      	blx	r3
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800963c:	f06f 0306 	mvn.w	r3, #6
 8009640:	e05a      	b.n	80096f8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8009642:	7a3b      	ldrb	r3, [r7, #8]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d103      	bne.n	8009650 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	f043 0301 	orr.w	r3, r3, #1
 800964e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8009650:	7abb      	ldrb	r3, [r7, #10]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d103      	bne.n	800965e <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	f043 0304 	orr.w	r3, r3, #4
 800965c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800965e:	7a7b      	ldrb	r3, [r7, #9]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d103      	bne.n	800966c <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	f043 0302 	orr.w	r3, r3, #2
 800966a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800966c:	7afb      	ldrb	r3, [r7, #11]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d10c      	bne.n	800968c <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	f043 0308 	orr.w	r3, r3, #8
 8009678:	623b      	str	r3, [r7, #32]
      }
      break;
 800967a:	e007      	b.n	800968c <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800967c:	f06f 0301 	mvn.w	r3, #1
 8009680:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8009682:	e004      	b.n	800968e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8009684:	bf00      	nop
 8009686:	e002      	b.n	800968e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8009688:	bf00      	nop
 800968a:	e000      	b.n	800968e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800968c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800968e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8009694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009696:	e02f      	b.n	80096f8 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8009698:	2300      	movs	r3, #0
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
 800969c:	e028      	b.n	80096f0 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a2:	4013      	ands	r3, r2
 80096a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d11c      	bne.n	80096e4 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 80096aa:	6a3a      	ldr	r2, [r7, #32]
 80096ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ae:	4013      	ands	r3, r2
 80096b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d116      	bne.n	80096e4 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80096b6:	4a14      	ldr	r2, [pc, #80]	@ (8009708 <IKS01A3_ENV_SENSOR_Init+0x214>)
 80096b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096be:	4913      	ldr	r1, [pc, #76]	@ (800970c <IKS01A3_ENV_SENSOR_Init+0x218>)
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	0092      	lsls	r2, r2, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	490d      	ldr	r1, [pc, #52]	@ (8009704 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80096d4:	4610      	mov	r0, r2
 80096d6:	4798      	blx	r3
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80096de:	f06f 0304 	mvn.w	r3, #4
 80096e2:	e009      	b.n	80096f8 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	3301      	adds	r3, #1
 80096ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80096f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d9d3      	bls.n	800969e <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 80096f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3730      	adds	r7, #48	@ 0x30
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	200005d0 	.word	0x200005d0
 8009704:	20000594 	.word	0x20000594
 8009708:	20000158 	.word	0x20000158
 800970c:	200005a0 	.word	0x200005a0

08009710 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b02      	cmp	r3, #2
 8009720:	d903      	bls.n	800972a <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009722:	f06f 0301 	mvn.w	r3, #1
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	e027      	b.n	800977a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800972a:	4a16      	ldr	r2, [pc, #88]	@ (8009784 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	4013      	ands	r3, r2
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	429a      	cmp	r2, r3
 800973a:	d11b      	bne.n	8009774 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800973c:	4a12      	ldr	r2, [pc, #72]	@ (8009788 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009744:	4911      	ldr	r1, [pc, #68]	@ (800978c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	0092      	lsls	r2, r2, #2
 800974a:	4413      	add	r3, r2
 800974c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	490f      	ldr	r1, [pc, #60]	@ (8009790 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009766:	f06f 0304 	mvn.w	r3, #4
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	e005      	b.n	800977a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	e002      	b.n	800977a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009774:	f06f 0301 	mvn.w	r3, #1
 8009778:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800977a:	697b      	ldr	r3, [r7, #20]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200005dc 	.word	0x200005dc
 8009788:	20000158 	.word	0x20000158
 800978c:	200005a0 	.word	0x200005a0
 8009790:	20000594 	.word	0x20000594

08009794 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b092      	sub	sp, #72	@ 0x48
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800979c:	2300      	movs	r3, #0
 800979e:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80097a0:	2300      	movs	r3, #0
 80097a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80097a4:	23bf      	movs	r3, #191	@ 0xbf
 80097a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80097aa:	4b51      	ldr	r3, [pc, #324]	@ (80098f0 <HTS221_0_Probe+0x15c>)
 80097ac:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80097ae:	4b51      	ldr	r3, [pc, #324]	@ (80098f4 <HTS221_0_Probe+0x160>)
 80097b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80097b2:	4b51      	ldr	r3, [pc, #324]	@ (80098f8 <HTS221_0_Probe+0x164>)
 80097b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80097b6:	4b51      	ldr	r3, [pc, #324]	@ (80098fc <HTS221_0_Probe+0x168>)
 80097b8:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80097ba:	4b51      	ldr	r3, [pc, #324]	@ (8009900 <HTS221_0_Probe+0x16c>)
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80097be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097c2:	4619      	mov	r1, r3
 80097c4:	484f      	ldr	r0, [pc, #316]	@ (8009904 <HTS221_0_Probe+0x170>)
 80097c6:	f7f9 fb77 	bl	8002eb8 <HTS221_RegisterBusIO>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80097d0:	f06f 0306 	mvn.w	r3, #6
 80097d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80097d6:	e085      	b.n	80098e4 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80097d8:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80097dc:	4619      	mov	r1, r3
 80097de:	4849      	ldr	r0, [pc, #292]	@ (8009904 <HTS221_0_Probe+0x170>)
 80097e0:	f7f9 fbf3 	bl	8002fca <HTS221_ReadID>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80097ea:	f06f 0306 	mvn.w	r3, #6
 80097ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80097f0:	e078      	b.n	80098e4 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 80097f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80097f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80097f8:	d003      	beq.n	8009802 <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80097fa:	f06f 0306 	mvn.w	r3, #6
 80097fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009800:	e070      	b.n	80098e4 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8009802:	f107 0308 	add.w	r3, r7, #8
 8009806:	4619      	mov	r1, r3
 8009808:	483e      	ldr	r0, [pc, #248]	@ (8009904 <HTS221_0_Probe+0x170>)
 800980a:	f7f9 fbf5 	bl	8002ff8 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800980e:	7a3b      	ldrb	r3, [r7, #8]
 8009810:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 8009812:	7a7b      	ldrb	r3, [r7, #9]
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8009818:	7abb      	ldrb	r3, [r7, #10]
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800981e:	7afb      	ldrb	r3, [r7, #11]
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8009824:	4a38      	ldr	r2, [pc, #224]	@ (8009908 <HTS221_0_Probe+0x174>)
 8009826:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8009828:	4b38      	ldr	r3, [pc, #224]	@ (800990c <HTS221_0_Probe+0x178>)
 800982a:	4a36      	ldr	r2, [pc, #216]	@ (8009904 <HTS221_0_Probe+0x170>)
 800982c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800982e:	4b38      	ldr	r3, [pc, #224]	@ (8009910 <HTS221_0_Probe+0x17c>)
 8009830:	4a38      	ldr	r2, [pc, #224]	@ (8009914 <HTS221_0_Probe+0x180>)
 8009832:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009836:	2b00      	cmp	r3, #0
 8009838:	d11d      	bne.n	8009876 <HTS221_0_Probe+0xe2>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d018      	beq.n	8009876 <HTS221_0_Probe+0xe2>
 8009844:	7a3b      	ldrb	r3, [r7, #8]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d115      	bne.n	8009876 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800984a:	4b33      	ldr	r3, [pc, #204]	@ (8009918 <HTS221_0_Probe+0x184>)
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	4a33      	ldr	r2, [pc, #204]	@ (800991c <HTS221_0_Probe+0x188>)
 8009850:	4933      	ldr	r1, [pc, #204]	@ (8009920 <HTS221_0_Probe+0x18c>)
 8009852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009856:	4b2e      	ldr	r3, [pc, #184]	@ (8009910 <HTS221_0_Probe+0x17c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a2b      	ldr	r2, [pc, #172]	@ (800990c <HTS221_0_Probe+0x178>)
 800985e:	6812      	ldr	r2, [r2, #0]
 8009860:	4610      	mov	r0, r2
 8009862:	4798      	blx	r3
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800986a:	f06f 0304 	mvn.w	r3, #4
 800986e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009870:	e001      	b.n	8009876 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009872:	2300      	movs	r3, #0
 8009874:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8009876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009878:	2b00      	cmp	r3, #0
 800987a:	d11d      	bne.n	80098b8 <HTS221_0_Probe+0x124>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f003 0304 	and.w	r3, r3, #4
 8009882:	2b00      	cmp	r3, #0
 8009884:	d018      	beq.n	80098b8 <HTS221_0_Probe+0x124>
 8009886:	7abb      	ldrb	r3, [r7, #10]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d115      	bne.n	80098b8 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800988c:	4b22      	ldr	r3, [pc, #136]	@ (8009918 <HTS221_0_Probe+0x184>)
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	4a22      	ldr	r2, [pc, #136]	@ (800991c <HTS221_0_Probe+0x188>)
 8009892:	4924      	ldr	r1, [pc, #144]	@ (8009924 <HTS221_0_Probe+0x190>)
 8009894:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009898:	4b1d      	ldr	r3, [pc, #116]	@ (8009910 <HTS221_0_Probe+0x17c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a1b      	ldr	r2, [pc, #108]	@ (800990c <HTS221_0_Probe+0x178>)
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	4610      	mov	r0, r2
 80098a4:	4798      	blx	r3
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80098ac:	f06f 0304 	mvn.w	r3, #4
 80098b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098b2:	e001      	b.n	80098b8 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80098b4:	2300      	movs	r3, #0
 80098b6:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80098b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d107      	bne.n	80098ce <HTS221_0_Probe+0x13a>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f003 0302 	and.w	r3, r3, #2
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80098c8:	f06f 0304 	mvn.w	r3, #4
 80098cc:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80098ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d107      	bne.n	80098e4 <HTS221_0_Probe+0x150>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f003 0308 	and.w	r3, r3, #8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80098de:	f06f 0304 	mvn.w	r3, #4
 80098e2:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 80098e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3748      	adds	r7, #72	@ 0x48
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	08002a25 	.word	0x08002a25
 80098f4:	08002a89 	.word	0x08002a89
 80098f8:	08002b3d 	.word	0x08002b3d
 80098fc:	08002ad9 	.word	0x08002ad9
 8009900:	08002ba1 	.word	0x08002ba1
 8009904:	200005e8 	.word	0x200005e8
 8009908:	200005dc 	.word	0x200005dc
 800990c:	20000594 	.word	0x20000594
 8009910:	200005d0 	.word	0x200005d0
 8009914:	20000004 	.word	0x20000004
 8009918:	20000158 	.word	0x20000158
 800991c:	200005a0 	.word	0x200005a0
 8009920:	20000028 	.word	0x20000028
 8009924:	20000014 	.word	0x20000014

08009928 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b092      	sub	sp, #72	@ 0x48
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8009930:	2300      	movs	r3, #0
 8009932:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8009934:	2300      	movs	r3, #0
 8009936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8009938:	23bb      	movs	r3, #187	@ 0xbb
 800993a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800993e:	4b52      	ldr	r3, [pc, #328]	@ (8009a88 <LPS22HH_0_Probe+0x160>)
 8009940:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009942:	4b52      	ldr	r3, [pc, #328]	@ (8009a8c <LPS22HH_0_Probe+0x164>)
 8009944:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009946:	4b52      	ldr	r3, [pc, #328]	@ (8009a90 <LPS22HH_0_Probe+0x168>)
 8009948:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800994a:	4b52      	ldr	r3, [pc, #328]	@ (8009a94 <LPS22HH_0_Probe+0x16c>)
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800994e:	4b52      	ldr	r3, [pc, #328]	@ (8009a98 <LPS22HH_0_Probe+0x170>)
 8009950:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8009952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009956:	4619      	mov	r1, r3
 8009958:	4850      	ldr	r0, [pc, #320]	@ (8009a9c <LPS22HH_0_Probe+0x174>)
 800995a:	f7fc fb1f 	bl	8005f9c <LPS22HH_RegisterBusIO>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009964:	f06f 0306 	mvn.w	r3, #6
 8009968:	647b      	str	r3, [r7, #68]	@ 0x44
 800996a:	e087      	b.n	8009a7c <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800996c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8009970:	4619      	mov	r1, r3
 8009972:	484a      	ldr	r0, [pc, #296]	@ (8009a9c <LPS22HH_0_Probe+0x174>)
 8009974:	f7fc fbbb 	bl	80060ee <LPS22HH_ReadID>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800997e:	f06f 0306 	mvn.w	r3, #6
 8009982:	647b      	str	r3, [r7, #68]	@ 0x44
 8009984:	e07a      	b.n	8009a7c <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8009986:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800998a:	2bb3      	cmp	r3, #179	@ 0xb3
 800998c:	d003      	beq.n	8009996 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800998e:	f06f 0306 	mvn.w	r3, #6
 8009992:	647b      	str	r3, [r7, #68]	@ 0x44
 8009994:	e072      	b.n	8009a7c <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8009996:	f107 0308 	add.w	r3, r7, #8
 800999a:	4619      	mov	r1, r3
 800999c:	483f      	ldr	r0, [pc, #252]	@ (8009a9c <LPS22HH_0_Probe+0x174>)
 800999e:	f7fc fbbd 	bl	800611c <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 80099a2:	7a3b      	ldrb	r3, [r7, #8]
 80099a4:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 80099a6:	7a7b      	ldrb	r3, [r7, #9]
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 80099ac:	7abb      	ldrb	r3, [r7, #10]
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 80099b2:	7afb      	ldrb	r3, [r7, #11]
 80099b4:	00db      	lsls	r3, r3, #3
 80099b6:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 80099b8:	4a39      	ldr	r2, [pc, #228]	@ (8009aa0 <LPS22HH_0_Probe+0x178>)
 80099ba:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 80099bc:	4b39      	ldr	r3, [pc, #228]	@ (8009aa4 <LPS22HH_0_Probe+0x17c>)
 80099be:	4a37      	ldr	r2, [pc, #220]	@ (8009a9c <LPS22HH_0_Probe+0x174>)
 80099c0:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 80099c2:	4b39      	ldr	r3, [pc, #228]	@ (8009aa8 <LPS22HH_0_Probe+0x180>)
 80099c4:	4a39      	ldr	r2, [pc, #228]	@ (8009aac <LPS22HH_0_Probe+0x184>)
 80099c6:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80099c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d11e      	bne.n	8009a0c <LPS22HH_0_Probe+0xe4>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d019      	beq.n	8009a0c <LPS22HH_0_Probe+0xe4>
 80099d8:	7a3b      	ldrb	r3, [r7, #8]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d116      	bne.n	8009a0c <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 80099de:	4b34      	ldr	r3, [pc, #208]	@ (8009ab0 <LPS22HH_0_Probe+0x188>)
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	4a34      	ldr	r2, [pc, #208]	@ (8009ab4 <LPS22HH_0_Probe+0x18c>)
 80099e4:	3304      	adds	r3, #4
 80099e6:	4934      	ldr	r1, [pc, #208]	@ (8009ab8 <LPS22HH_0_Probe+0x190>)
 80099e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80099ec:	4b2e      	ldr	r3, [pc, #184]	@ (8009aa8 <LPS22HH_0_Probe+0x180>)
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a2c      	ldr	r2, [pc, #176]	@ (8009aa4 <LPS22HH_0_Probe+0x17c>)
 80099f4:	6852      	ldr	r2, [r2, #4]
 80099f6:	4610      	mov	r0, r2
 80099f8:	4798      	blx	r3
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d003      	beq.n	8009a08 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a00:	f06f 0304 	mvn.w	r3, #4
 8009a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a06:	e001      	b.n	8009a0c <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8009a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d11e      	bne.n	8009a50 <LPS22HH_0_Probe+0x128>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f003 0302 	and.w	r3, r3, #2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d019      	beq.n	8009a50 <LPS22HH_0_Probe+0x128>
 8009a1c:	7a7b      	ldrb	r3, [r7, #9]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d116      	bne.n	8009a50 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8009a22:	4b23      	ldr	r3, [pc, #140]	@ (8009ab0 <LPS22HH_0_Probe+0x188>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	4a23      	ldr	r2, [pc, #140]	@ (8009ab4 <LPS22HH_0_Probe+0x18c>)
 8009a28:	3304      	adds	r3, #4
 8009a2a:	4924      	ldr	r1, [pc, #144]	@ (8009abc <LPS22HH_0_Probe+0x194>)
 8009a2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8009a30:	4b1d      	ldr	r3, [pc, #116]	@ (8009aa8 <LPS22HH_0_Probe+0x180>)
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a1b      	ldr	r2, [pc, #108]	@ (8009aa4 <LPS22HH_0_Probe+0x17c>)
 8009a38:	6852      	ldr	r2, [r2, #4]
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4798      	blx	r3
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a44:	f06f 0304 	mvn.w	r3, #4
 8009a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a4a:	e001      	b.n	8009a50 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d107      	bne.n	8009a66 <LPS22HH_0_Probe+0x13e>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a60:	f06f 0304 	mvn.w	r3, #4
 8009a64:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8009a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d107      	bne.n	8009a7c <LPS22HH_0_Probe+0x154>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f003 0308 	and.w	r3, r3, #8
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a76:	f06f 0304 	mvn.w	r3, #4
 8009a7a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 8009a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3748      	adds	r7, #72	@ 0x48
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	08002a25 	.word	0x08002a25
 8009a8c:	08002a89 	.word	0x08002a89
 8009a90:	08002b3d 	.word	0x08002b3d
 8009a94:	08002ad9 	.word	0x08002ad9
 8009a98:	08002ba1 	.word	0x08002ba1
 8009a9c:	2000061c 	.word	0x2000061c
 8009aa0:	200005dc 	.word	0x200005dc
 8009aa4:	20000594 	.word	0x20000594
 8009aa8:	200005d0 	.word	0x200005d0
 8009aac:	200000a4 	.word	0x200000a4
 8009ab0:	20000158 	.word	0x20000158
 8009ab4:	200005a0 	.word	0x200005a0
 8009ab8:	200000c8 	.word	0x200000c8
 8009abc:	200000b4 	.word	0x200000b4

08009ac0 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b092      	sub	sp, #72	@ 0x48
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8009acc:	2300      	movs	r3, #0
 8009ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8009ad0:	2395      	movs	r3, #149	@ 0x95
 8009ad2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009ad6:	4b46      	ldr	r3, [pc, #280]	@ (8009bf0 <STTS751_0_Probe+0x130>)
 8009ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009ada:	4b46      	ldr	r3, [pc, #280]	@ (8009bf4 <STTS751_0_Probe+0x134>)
 8009adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009ade:	4b46      	ldr	r3, [pc, #280]	@ (8009bf8 <STTS751_0_Probe+0x138>)
 8009ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009ae2:	4b46      	ldr	r3, [pc, #280]	@ (8009bfc <STTS751_0_Probe+0x13c>)
 8009ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009ae6:	4b46      	ldr	r3, [pc, #280]	@ (8009c00 <STTS751_0_Probe+0x140>)
 8009ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8009aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aee:	4619      	mov	r1, r3
 8009af0:	4844      	ldr	r0, [pc, #272]	@ (8009c04 <STTS751_0_Probe+0x144>)
 8009af2:	f7ff f81f 	bl	8008b34 <STTS751_RegisterBusIO>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009afc:	f06f 0306 	mvn.w	r3, #6
 8009b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b02:	e070      	b.n	8009be6 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8009b04:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8009b08:	4619      	mov	r1, r3
 8009b0a:	483e      	ldr	r0, [pc, #248]	@ (8009c04 <STTS751_0_Probe+0x144>)
 8009b0c:	f7ff f8b1 	bl	8008c72 <STTS751_ReadID>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b16:	f06f 0306 	mvn.w	r3, #6
 8009b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b1c:	e063      	b.n	8009be6 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 8009b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009b22:	2b53      	cmp	r3, #83	@ 0x53
 8009b24:	d003      	beq.n	8009b2e <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b26:	f06f 0306 	mvn.w	r3, #6
 8009b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b2c:	e05b      	b.n	8009be6 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8009b2e:	f107 0308 	add.w	r3, r7, #8
 8009b32:	4619      	mov	r1, r3
 8009b34:	4833      	ldr	r0, [pc, #204]	@ (8009c04 <STTS751_0_Probe+0x144>)
 8009b36:	f7ff f8b7 	bl	8008ca8 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8009b3a:	7a3b      	ldrb	r3, [r7, #8]
 8009b3c:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8009b3e:	7a7b      	ldrb	r3, [r7, #9]
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8009b44:	7abb      	ldrb	r3, [r7, #10]
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8009b4a:	7afb      	ldrb	r3, [r7, #11]
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8009b50:	4a2d      	ldr	r2, [pc, #180]	@ (8009c08 <STTS751_0_Probe+0x148>)
 8009b52:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8009b54:	4b2d      	ldr	r3, [pc, #180]	@ (8009c0c <STTS751_0_Probe+0x14c>)
 8009b56:	4a2b      	ldr	r2, [pc, #172]	@ (8009c04 <STTS751_0_Probe+0x144>)
 8009b58:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8009b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8009c10 <STTS751_0_Probe+0x150>)
 8009b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8009c14 <STTS751_0_Probe+0x154>)
 8009b5e:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d11e      	bne.n	8009ba4 <STTS751_0_Probe+0xe4>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d019      	beq.n	8009ba4 <STTS751_0_Probe+0xe4>
 8009b70:	7a3b      	ldrb	r3, [r7, #8]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d116      	bne.n	8009ba4 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8009b76:	4b28      	ldr	r3, [pc, #160]	@ (8009c18 <STTS751_0_Probe+0x158>)
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	4a28      	ldr	r2, [pc, #160]	@ (8009c1c <STTS751_0_Probe+0x15c>)
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	4928      	ldr	r1, [pc, #160]	@ (8009c20 <STTS751_0_Probe+0x160>)
 8009b80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8009b84:	4b22      	ldr	r3, [pc, #136]	@ (8009c10 <STTS751_0_Probe+0x150>)
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a20      	ldr	r2, [pc, #128]	@ (8009c0c <STTS751_0_Probe+0x14c>)
 8009b8c:	6892      	ldr	r2, [r2, #8]
 8009b8e:	4610      	mov	r0, r2
 8009b90:	4798      	blx	r3
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b98:	f06f 0304 	mvn.w	r3, #4
 8009b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b9e:	e001      	b.n	8009ba4 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d107      	bne.n	8009bba <STTS751_0_Probe+0xfa>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009bb4:	f06f 0304 	mvn.w	r3, #4
 8009bb8:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d107      	bne.n	8009bd0 <STTS751_0_Probe+0x110>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009bca:	f06f 0304 	mvn.w	r3, #4
 8009bce:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8009bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d107      	bne.n	8009be6 <STTS751_0_Probe+0x126>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f003 0308 	and.w	r3, r3, #8
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009be0:	f06f 0304 	mvn.w	r3, #4
 8009be4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 8009be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3748      	adds	r7, #72	@ 0x48
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	08002a25 	.word	0x08002a25
 8009bf4:	08002a89 	.word	0x08002a89
 8009bf8:	08002b3d 	.word	0x08002b3d
 8009bfc:	08002ad9 	.word	0x08002ad9
 8009c00:	08002ba1 	.word	0x08002ba1
 8009c04:	20000650 	.word	0x20000650
 8009c08:	200005dc 	.word	0x200005dc
 8009c0c:	20000594 	.word	0x20000594
 8009c10:	200005d0 	.word	0x200005d0
 8009c14:	20000134 	.word	0x20000134
 8009c18:	20000158 	.word	0x20000158
 8009c1c:	200005a0 	.word	0x200005a0
 8009c20:	20000144 	.word	0x20000144

08009c24 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08e      	sub	sp, #56	@ 0x38
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8009c32:	2301      	movs	r3, #1
 8009c34:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d06e      	beq.n	8009d1e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	f200 809d 	bhi.w	8009d82 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <IKS01A3_MOTION_SENSOR_Init+0x32>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d032      	beq.n	8009cba <IKS01A3_MOTION_SENSOR_Init+0x96>
 8009c54:	e095      	b.n	8009d82 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8009c56:	6838      	ldr	r0, [r7, #0]
 8009c58:	f000 f9ac 	bl	8009fb4 <LSM6DSO_0_Probe>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8009c62:	f04f 33ff 	mov.w	r3, #4294967295
 8009c66:	e0cc      	b.n	8009e02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009c68:	4a68      	ldr	r2, [pc, #416]	@ (8009e0c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	4967      	ldr	r1, [pc, #412]	@ (8009e10 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009c7a:	f107 010c 	add.w	r1, r7, #12
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4798      	blx	r3
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009c88:	f06f 0306 	mvn.w	r3, #6
 8009c8c:	e0b9      	b.n	8009e02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8009c8e:	7b3b      	ldrb	r3, [r7, #12]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d103      	bne.n	8009c9c <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8009c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c96:	f043 0302 	orr.w	r3, r3, #2
 8009c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8009c9c:	7b7b      	ldrb	r3, [r7, #13]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d103      	bne.n	8009caa <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8009ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca4:	f043 0301 	orr.w	r3, r3, #1
 8009ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8009caa:	7bbb      	ldrb	r3, [r7, #14]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d16c      	bne.n	8009d8a <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8009cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb2:	f043 0304 	orr.w	r3, r3, #4
 8009cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8009cb8:	e067      	b.n	8009d8a <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8009cba:	6838      	ldr	r0, [r7, #0]
 8009cbc:	f000 fa3a 	bl	800a134 <LIS2DW12_0_Probe>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d002      	beq.n	8009ccc <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8009cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cca:	e09a      	b.n	8009e02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009ccc:	4a4f      	ldr	r2, [pc, #316]	@ (8009e0c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	494e      	ldr	r1, [pc, #312]	@ (8009e10 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009cde:	f107 010c 	add.w	r1, r7, #12
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	4798      	blx	r3
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009cec:	f06f 0306 	mvn.w	r3, #6
 8009cf0:	e087      	b.n	8009e02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8009cf2:	7b3b      	ldrb	r3, [r7, #12]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d103      	bne.n	8009d00 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8009cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfa:	f043 0302 	orr.w	r3, r3, #2
 8009cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8009d00:	7b7b      	ldrb	r3, [r7, #13]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d103      	bne.n	8009d0e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	f043 0301 	orr.w	r3, r3, #1
 8009d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d13c      	bne.n	8009d8e <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8009d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d16:	f043 0304 	orr.w	r3, r3, #4
 8009d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8009d1c:	e037      	b.n	8009d8e <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8009d1e:	6838      	ldr	r0, [r7, #0]
 8009d20:	f000 fab0 	bl	800a284 <LIS2MDL_0_Probe>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8009d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d2e:	e068      	b.n	8009e02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009d30:	4a36      	ldr	r2, [pc, #216]	@ (8009e0c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	4935      	ldr	r1, [pc, #212]	@ (8009e10 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009d42:	f107 010c 	add.w	r1, r7, #12
 8009d46:	4610      	mov	r0, r2
 8009d48:	4798      	blx	r3
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009d50:	f06f 0306 	mvn.w	r3, #6
 8009d54:	e055      	b.n	8009e02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8009d56:	7b3b      	ldrb	r3, [r7, #12]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d103      	bne.n	8009d64 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8009d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5e:	f043 0302 	orr.w	r3, r3, #2
 8009d62:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8009d64:	7b7b      	ldrb	r3, [r7, #13]
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d103      	bne.n	8009d72 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8009d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6c:	f043 0301 	orr.w	r3, r3, #1
 8009d70:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d10c      	bne.n	8009d92 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8009d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7a:	f043 0304 	orr.w	r3, r3, #4
 8009d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8009d80:	e007      	b.n	8009d92 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009d82:	f06f 0301 	mvn.w	r3, #1
 8009d86:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8009d88:	e004      	b.n	8009d94 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8009d8a:	bf00      	nop
 8009d8c:	e002      	b.n	8009d94 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8009d8e:	bf00      	nop
 8009d90:	e000      	b.n	8009d94 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8009d92:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9c:	e031      	b.n	8009e02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009d9e:	2300      	movs	r3, #0
 8009da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009da2:	e02a      	b.n	8009dfa <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	4013      	ands	r3, r2
 8009daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d11e      	bne.n	8009dee <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8009db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db4:	4013      	ands	r3, r2
 8009db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d118      	bne.n	8009dee <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009dbc:	4a15      	ldr	r2, [pc, #84]	@ (8009e14 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009dc4:	4814      	ldr	r0, [pc, #80]	@ (8009e18 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	005b      	lsls	r3, r3, #1
 8009dcc:	4413      	add	r3, r2
 8009dce:	440b      	add	r3, r1
 8009dd0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	490e      	ldr	r1, [pc, #56]	@ (8009e10 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009dde:	4610      	mov	r0, r2
 8009de0:	4798      	blx	r3
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009de8:	f06f 0304 	mvn.w	r3, #4
 8009dec:	e009      	b.n	8009e02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df6:	3301      	adds	r3, #1
 8009df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d9d1      	bls.n	8009da4 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8009e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3738      	adds	r7, #56	@ 0x38
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	200006b8 	.word	0x200006b8
 8009e10:	20000688 	.word	0x20000688
 8009e14:	2000017c 	.word	0x2000017c
 8009e18:	20000694 	.word	0x20000694

08009e1c <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d903      	bls.n	8009e36 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009e2e:	f06f 0301 	mvn.w	r3, #1
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	e029      	b.n	8009e8a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009e36:	4a17      	ldr	r2, [pc, #92]	@ (8009e94 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	4013      	ands	r3, r2
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d11d      	bne.n	8009e84 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8009e48:	4a13      	ldr	r2, [pc, #76]	@ (8009e98 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009e50:	4812      	ldr	r0, [pc, #72]	@ (8009e9c <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	4613      	mov	r3, r2
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	4413      	add	r3, r2
 8009e5a:	440b      	add	r3, r1
 8009e5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	490f      	ldr	r1, [pc, #60]	@ (8009ea0 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e76:	f06f 0304 	mvn.w	r3, #4
 8009e7a:	617b      	str	r3, [r7, #20]
 8009e7c:	e005      	b.n	8009e8a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]
 8009e82:	e002      	b.n	8009e8a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009e84:	f06f 0301 	mvn.w	r3, #1
 8009e88:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009e8a:	697b      	ldr	r3, [r7, #20]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	200006c4 	.word	0x200006c4
 8009e98:	2000017c 	.word	0x2000017c
 8009e9c:	20000694 	.word	0x20000694
 8009ea0:	20000688 	.word	0x20000688

08009ea4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d903      	bls.n	8009ebe <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009eb6:	f06f 0301 	mvn.w	r3, #1
 8009eba:	617b      	str	r3, [r7, #20]
 8009ebc:	e029      	b.n	8009f12 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009ebe:	4a17      	ldr	r2, [pc, #92]	@ (8009f1c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x78>)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	4013      	ands	r3, r2
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d11d      	bne.n	8009f0c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8009ed0:	4a13      	ldr	r2, [pc, #76]	@ (8009f20 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009ed8:	4812      	ldr	r0, [pc, #72]	@ (8009f24 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	4613      	mov	r3, r2
 8009ede:	005b      	lsls	r3, r3, #1
 8009ee0:	4413      	add	r3, r2
 8009ee2:	440b      	add	r3, r1
 8009ee4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	490f      	ldr	r1, [pc, #60]	@ (8009f28 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4798      	blx	r3
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009efe:	f06f 0304 	mvn.w	r3, #4
 8009f02:	617b      	str	r3, [r7, #20]
 8009f04:	e005      	b.n	8009f12 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009f06:	2300      	movs	r3, #0
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e002      	b.n	8009f12 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009f0c:	f06f 0301 	mvn.w	r3, #1
 8009f10:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009f12:	697b      	ldr	r3, [r7, #20]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	200006c4 	.word	0x200006c4
 8009f20:	2000017c 	.word	0x2000017c
 8009f24:	20000694 	.word	0x20000694
 8009f28:	20000688 	.word	0x20000688

08009f2c <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d903      	bls.n	8009f46 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009f3e:	f06f 0301 	mvn.w	r3, #1
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	e029      	b.n	8009f9a <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009f46:	4a17      	ldr	r2, [pc, #92]	@ (8009fa4 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	4013      	ands	r3, r2
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d11d      	bne.n	8009f94 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8009f58:	4a13      	ldr	r2, [pc, #76]	@ (8009fa8 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009f60:	4812      	ldr	r0, [pc, #72]	@ (8009fac <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	4613      	mov	r3, r2
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	4413      	add	r3, r2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	490f      	ldr	r1, [pc, #60]	@ (8009fb0 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4798      	blx	r3
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f86:	f06f 0304 	mvn.w	r3, #4
 8009f8a:	617b      	str	r3, [r7, #20]
 8009f8c:	e005      	b.n	8009f9a <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	e002      	b.n	8009f9a <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009f94:	f06f 0301 	mvn.w	r3, #1
 8009f98:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009f9a:	697b      	ldr	r3, [r7, #20]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	200006c4 	.word	0x200006c4
 8009fa8:	2000017c 	.word	0x2000017c
 8009fac:	20000694 	.word	0x20000694
 8009fb0:	20000688 	.word	0x20000688

08009fb4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b094      	sub	sp, #80	@ 0x50
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8009fc4:	23d7      	movs	r3, #215	@ 0xd7
 8009fc6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009fca:	4b4b      	ldr	r3, [pc, #300]	@ (800a0f8 <LSM6DSO_0_Probe+0x144>)
 8009fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009fce:	4b4b      	ldr	r3, [pc, #300]	@ (800a0fc <LSM6DSO_0_Probe+0x148>)
 8009fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009fd2:	4b4b      	ldr	r3, [pc, #300]	@ (800a100 <LSM6DSO_0_Probe+0x14c>)
 8009fd4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009fd6:	4b4b      	ldr	r3, [pc, #300]	@ (800a104 <LSM6DSO_0_Probe+0x150>)
 8009fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009fda:	4b4b      	ldr	r3, [pc, #300]	@ (800a108 <LSM6DSO_0_Probe+0x154>)
 8009fdc:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009fde:	4b4b      	ldr	r3, [pc, #300]	@ (800a10c <LSM6DSO_0_Probe+0x158>)
 8009fe0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8009fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4849      	ldr	r0, [pc, #292]	@ (800a110 <LSM6DSO_0_Probe+0x15c>)
 8009fea:	f7fc fe15 	bl	8006c18 <LSM6DSO_RegisterBusIO>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009ff4:	f06f 0306 	mvn.w	r3, #6
 8009ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ffa:	e077      	b.n	800a0ec <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8009ffc:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800a000:	4619      	mov	r1, r3
 800a002:	4843      	ldr	r0, [pc, #268]	@ (800a110 <LSM6DSO_0_Probe+0x15c>)
 800a004:	f7fc ff12 	bl	8006e2c <LSM6DSO_ReadID>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a00e:	f06f 0306 	mvn.w	r3, #6
 800a012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a014:	e06a      	b.n	800a0ec <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800a016:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a01a:	2b6c      	cmp	r3, #108	@ 0x6c
 800a01c:	d003      	beq.n	800a026 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a01e:	f06f 0306 	mvn.w	r3, #6
 800a022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a024:	e062      	b.n	800a0ec <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800a026:	f107 030c 	add.w	r3, r7, #12
 800a02a:	4619      	mov	r1, r3
 800a02c:	4838      	ldr	r0, [pc, #224]	@ (800a110 <LSM6DSO_0_Probe+0x15c>)
 800a02e:	f7fc ff13 	bl	8006e58 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a032:	7b7b      	ldrb	r3, [r7, #13]
 800a034:	461a      	mov	r2, r3
 800a036:	7b3b      	ldrb	r3, [r7, #12]
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	431a      	orrs	r2, r3
 800a03c:	7bbb      	ldrb	r3, [r7, #14]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4313      	orrs	r3, r2
 800a042:	4a34      	ldr	r2, [pc, #208]	@ (800a114 <LSM6DSO_0_Probe+0x160>)
 800a044:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800a046:	4b34      	ldr	r3, [pc, #208]	@ (800a118 <LSM6DSO_0_Probe+0x164>)
 800a048:	4a31      	ldr	r2, [pc, #196]	@ (800a110 <LSM6DSO_0_Probe+0x15c>)
 800a04a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800a04c:	4b33      	ldr	r3, [pc, #204]	@ (800a11c <LSM6DSO_0_Probe+0x168>)
 800a04e:	4a34      	ldr	r2, [pc, #208]	@ (800a120 <LSM6DSO_0_Probe+0x16c>)
 800a050:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11d      	bne.n	800a094 <LSM6DSO_0_Probe+0xe0>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d018      	beq.n	800a094 <LSM6DSO_0_Probe+0xe0>
 800a062:	7b7b      	ldrb	r3, [r7, #13]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d115      	bne.n	800a094 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800a068:	4b2e      	ldr	r3, [pc, #184]	@ (800a124 <LSM6DSO_0_Probe+0x170>)
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	4a2e      	ldr	r2, [pc, #184]	@ (800a128 <LSM6DSO_0_Probe+0x174>)
 800a06e:	492f      	ldr	r1, [pc, #188]	@ (800a12c <LSM6DSO_0_Probe+0x178>)
 800a070:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a074:	4b29      	ldr	r3, [pc, #164]	@ (800a11c <LSM6DSO_0_Probe+0x168>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a27      	ldr	r2, [pc, #156]	@ (800a118 <LSM6DSO_0_Probe+0x164>)
 800a07c:	6812      	ldr	r2, [r2, #0]
 800a07e:	4610      	mov	r0, r2
 800a080:	4798      	blx	r3
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a088:	f06f 0304 	mvn.w	r3, #4
 800a08c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a08e:	e001      	b.n	800a094 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a090:	2300      	movs	r3, #0
 800a092:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d11d      	bne.n	800a0d6 <LSM6DSO_0_Probe+0x122>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f003 0302 	and.w	r3, r3, #2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d018      	beq.n	800a0d6 <LSM6DSO_0_Probe+0x122>
 800a0a4:	7b3b      	ldrb	r3, [r7, #12]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d115      	bne.n	800a0d6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a0aa:	4b1e      	ldr	r3, [pc, #120]	@ (800a124 <LSM6DSO_0_Probe+0x170>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	4a1e      	ldr	r2, [pc, #120]	@ (800a128 <LSM6DSO_0_Probe+0x174>)
 800a0b0:	491f      	ldr	r1, [pc, #124]	@ (800a130 <LSM6DSO_0_Probe+0x17c>)
 800a0b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a0b6:	4b19      	ldr	r3, [pc, #100]	@ (800a11c <LSM6DSO_0_Probe+0x168>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a16      	ldr	r2, [pc, #88]	@ (800a118 <LSM6DSO_0_Probe+0x164>)
 800a0be:	6812      	ldr	r2, [r2, #0]
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0ca:	f06f 0304 	mvn.w	r3, #4
 800a0ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0d0:	e001      	b.n	800a0d6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a0d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d107      	bne.n	800a0ec <LSM6DSO_0_Probe+0x138>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0e6:	f06f 0304 	mvn.w	r3, #4
 800a0ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800a0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3750      	adds	r7, #80	@ 0x50
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	08002a25 	.word	0x08002a25
 800a0fc:	08002a89 	.word	0x08002a89
 800a100:	08002b3d 	.word	0x08002b3d
 800a104:	08002ad9 	.word	0x08002ad9
 800a108:	08002ba1 	.word	0x08002ba1
 800a10c:	0800a4b1 	.word	0x0800a4b1
 800a110:	200006d0 	.word	0x200006d0
 800a114:	200006c4 	.word	0x200006c4
 800a118:	20000688 	.word	0x20000688
 800a11c:	200006b8 	.word	0x200006b8
 800a120:	200000dc 	.word	0x200000dc
 800a124:	2000017c 	.word	0x2000017c
 800a128:	20000694 	.word	0x20000694
 800a12c:	20000110 	.word	0x20000110
 800a130:	200000ec 	.word	0x200000ec

0800a134 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b094      	sub	sp, #80	@ 0x50
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800a140:	2300      	movs	r3, #0
 800a142:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800a144:	2333      	movs	r3, #51	@ 0x33
 800a146:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a14a:	4b40      	ldr	r3, [pc, #256]	@ (800a24c <LIS2DW12_0_Probe+0x118>)
 800a14c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a14e:	4b40      	ldr	r3, [pc, #256]	@ (800a250 <LIS2DW12_0_Probe+0x11c>)
 800a150:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a152:	4b40      	ldr	r3, [pc, #256]	@ (800a254 <LIS2DW12_0_Probe+0x120>)
 800a154:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a156:	4b40      	ldr	r3, [pc, #256]	@ (800a258 <LIS2DW12_0_Probe+0x124>)
 800a158:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a15a:	4b40      	ldr	r3, [pc, #256]	@ (800a25c <LIS2DW12_0_Probe+0x128>)
 800a15c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800a15e:	4b40      	ldr	r3, [pc, #256]	@ (800a260 <LIS2DW12_0_Probe+0x12c>)
 800a160:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800a162:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a166:	4619      	mov	r1, r3
 800a168:	483e      	ldr	r0, [pc, #248]	@ (800a264 <LIS2DW12_0_Probe+0x130>)
 800a16a:	f7f9 fcc5 	bl	8003af8 <LIS2DW12_RegisterBusIO>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a174:	f06f 0306 	mvn.w	r3, #6
 800a178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a17a:	e062      	b.n	800a242 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800a17c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800a180:	4619      	mov	r1, r3
 800a182:	4838      	ldr	r0, [pc, #224]	@ (800a264 <LIS2DW12_0_Probe+0x130>)
 800a184:	f7f9 fda6 	bl	8003cd4 <LIS2DW12_ReadID>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a18e:	f06f 0306 	mvn.w	r3, #6
 800a192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a194:	e055      	b.n	800a242 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800a196:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a19a:	2b44      	cmp	r3, #68	@ 0x44
 800a19c:	d003      	beq.n	800a1a6 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a19e:	f06f 0306 	mvn.w	r3, #6
 800a1a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1a4:	e04d      	b.n	800a242 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800a1a6:	f107 030c 	add.w	r3, r7, #12
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	482d      	ldr	r0, [pc, #180]	@ (800a264 <LIS2DW12_0_Probe+0x130>)
 800a1ae:	f7f9 fda7 	bl	8003d00 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a1b2:	7b7b      	ldrb	r3, [r7, #13]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	7b3b      	ldrb	r3, [r7, #12]
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	4a29      	ldr	r2, [pc, #164]	@ (800a268 <LIS2DW12_0_Probe+0x134>)
 800a1c4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800a1c6:	4b29      	ldr	r3, [pc, #164]	@ (800a26c <LIS2DW12_0_Probe+0x138>)
 800a1c8:	4a26      	ldr	r2, [pc, #152]	@ (800a264 <LIS2DW12_0_Probe+0x130>)
 800a1ca:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800a1cc:	4b28      	ldr	r3, [pc, #160]	@ (800a270 <LIS2DW12_0_Probe+0x13c>)
 800a1ce:	4a29      	ldr	r2, [pc, #164]	@ (800a274 <LIS2DW12_0_Probe+0x140>)
 800a1d0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d11e      	bne.n	800a216 <LIS2DW12_0_Probe+0xe2>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d019      	beq.n	800a216 <LIS2DW12_0_Probe+0xe2>
 800a1e2:	7b3b      	ldrb	r3, [r7, #12]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d116      	bne.n	800a216 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a1e8:	4b23      	ldr	r3, [pc, #140]	@ (800a278 <LIS2DW12_0_Probe+0x144>)
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	4a23      	ldr	r2, [pc, #140]	@ (800a27c <LIS2DW12_0_Probe+0x148>)
 800a1ee:	3303      	adds	r3, #3
 800a1f0:	4923      	ldr	r1, [pc, #140]	@ (800a280 <LIS2DW12_0_Probe+0x14c>)
 800a1f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800a1f6:	4b1e      	ldr	r3, [pc, #120]	@ (800a270 <LIS2DW12_0_Probe+0x13c>)
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a26c <LIS2DW12_0_Probe+0x138>)
 800a1fe:	6852      	ldr	r2, [r2, #4]
 800a200:	4610      	mov	r0, r2
 800a202:	4798      	blx	r3
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a20a:	f06f 0304 	mvn.w	r3, #4
 800a20e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a210:	e001      	b.n	800a216 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a212:	2300      	movs	r3, #0
 800a214:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800a216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d107      	bne.n	800a22c <LIS2DW12_0_Probe+0xf8>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a226:	f06f 0304 	mvn.w	r3, #4
 800a22a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a22c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d107      	bne.n	800a242 <LIS2DW12_0_Probe+0x10e>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a23c:	f06f 0304 	mvn.w	r3, #4
 800a240:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800a242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800a244:	4618      	mov	r0, r3
 800a246:	3750      	adds	r7, #80	@ 0x50
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	08002a25 	.word	0x08002a25
 800a250:	08002a89 	.word	0x08002a89
 800a254:	08002b3d 	.word	0x08002b3d
 800a258:	08002ad9 	.word	0x08002ad9
 800a25c:	08002ba1 	.word	0x08002ba1
 800a260:	0800a4b1 	.word	0x0800a4b1
 800a264:	20000708 	.word	0x20000708
 800a268:	200006c4 	.word	0x200006c4
 800a26c:	20000688 	.word	0x20000688
 800a270:	200006b8 	.word	0x200006b8
 800a274:	2000003c 	.word	0x2000003c
 800a278:	2000017c 	.word	0x2000017c
 800a27c:	20000694 	.word	0x20000694
 800a280:	2000004c 	.word	0x2000004c

0800a284 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b094      	sub	sp, #80	@ 0x50
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800a290:	2300      	movs	r3, #0
 800a292:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800a294:	233d      	movs	r3, #61	@ 0x3d
 800a296:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a29a:	4b40      	ldr	r3, [pc, #256]	@ (800a39c <LIS2MDL_0_Probe+0x118>)
 800a29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a29e:	4b40      	ldr	r3, [pc, #256]	@ (800a3a0 <LIS2MDL_0_Probe+0x11c>)
 800a2a0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a2a2:	4b40      	ldr	r3, [pc, #256]	@ (800a3a4 <LIS2MDL_0_Probe+0x120>)
 800a2a4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a2a6:	4b40      	ldr	r3, [pc, #256]	@ (800a3a8 <LIS2MDL_0_Probe+0x124>)
 800a2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a2aa:	4b40      	ldr	r3, [pc, #256]	@ (800a3ac <LIS2MDL_0_Probe+0x128>)
 800a2ac:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800a2ae:	4b40      	ldr	r3, [pc, #256]	@ (800a3b0 <LIS2MDL_0_Probe+0x12c>)
 800a2b0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800a2b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	483e      	ldr	r0, [pc, #248]	@ (800a3b4 <LIS2MDL_0_Probe+0x130>)
 800a2ba:	f7fa fe71 	bl	8004fa0 <LIS2MDL_RegisterBusIO>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d003      	beq.n	800a2cc <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a2c4:	f06f 0306 	mvn.w	r3, #6
 800a2c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2ca:	e062      	b.n	800a392 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800a2cc:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4838      	ldr	r0, [pc, #224]	@ (800a3b4 <LIS2MDL_0_Probe+0x130>)
 800a2d4:	f7fa ff80 	bl	80051d8 <LIS2MDL_ReadID>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a2de:	f06f 0306 	mvn.w	r3, #6
 800a2e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2e4:	e055      	b.n	800a392 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800a2e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2ea:	2b40      	cmp	r3, #64	@ 0x40
 800a2ec:	d003      	beq.n	800a2f6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a2ee:	f06f 0306 	mvn.w	r3, #6
 800a2f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2f4:	e04d      	b.n	800a392 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800a2f6:	f107 030c 	add.w	r3, r7, #12
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	482d      	ldr	r0, [pc, #180]	@ (800a3b4 <LIS2MDL_0_Probe+0x130>)
 800a2fe:	f7fa ff91 	bl	8005224 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a302:	7b7b      	ldrb	r3, [r7, #13]
 800a304:	461a      	mov	r2, r3
 800a306:	7b3b      	ldrb	r3, [r7, #12]
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	431a      	orrs	r2, r3
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4313      	orrs	r3, r2
 800a312:	4a29      	ldr	r2, [pc, #164]	@ (800a3b8 <LIS2MDL_0_Probe+0x134>)
 800a314:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800a316:	4b29      	ldr	r3, [pc, #164]	@ (800a3bc <LIS2MDL_0_Probe+0x138>)
 800a318:	4a26      	ldr	r2, [pc, #152]	@ (800a3b4 <LIS2MDL_0_Probe+0x130>)
 800a31a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800a31c:	4b28      	ldr	r3, [pc, #160]	@ (800a3c0 <LIS2MDL_0_Probe+0x13c>)
 800a31e:	4a29      	ldr	r2, [pc, #164]	@ (800a3c4 <LIS2MDL_0_Probe+0x140>)
 800a320:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800a322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d11e      	bne.n	800a366 <LIS2MDL_0_Probe+0xe2>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d019      	beq.n	800a366 <LIS2MDL_0_Probe+0xe2>
 800a332:	7bbb      	ldrb	r3, [r7, #14]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d116      	bne.n	800a366 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a338:	4b23      	ldr	r3, [pc, #140]	@ (800a3c8 <LIS2MDL_0_Probe+0x144>)
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	4a23      	ldr	r2, [pc, #140]	@ (800a3cc <LIS2MDL_0_Probe+0x148>)
 800a33e:	3306      	adds	r3, #6
 800a340:	4923      	ldr	r1, [pc, #140]	@ (800a3d0 <LIS2MDL_0_Probe+0x14c>)
 800a342:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800a346:	4b1e      	ldr	r3, [pc, #120]	@ (800a3c0 <LIS2MDL_0_Probe+0x13c>)
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a1b      	ldr	r2, [pc, #108]	@ (800a3bc <LIS2MDL_0_Probe+0x138>)
 800a34e:	6892      	ldr	r2, [r2, #8]
 800a350:	4610      	mov	r0, r2
 800a352:	4798      	blx	r3
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a35a:	f06f 0304 	mvn.w	r3, #4
 800a35e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a360:	e001      	b.n	800a366 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a362:	2300      	movs	r3, #0
 800a364:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800a366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d107      	bne.n	800a37c <LIS2MDL_0_Probe+0xf8>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a376:	f06f 0304 	mvn.w	r3, #4
 800a37a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800a37c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d107      	bne.n	800a392 <LIS2MDL_0_Probe+0x10e>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f003 0301 	and.w	r3, r3, #1
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a38c:	f06f 0304 	mvn.w	r3, #4
 800a390:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800a392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800a394:	4618      	mov	r0, r3
 800a396:	3750      	adds	r7, #80	@ 0x50
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	08002a25 	.word	0x08002a25
 800a3a0:	08002a89 	.word	0x08002a89
 800a3a4:	08002b3d 	.word	0x08002b3d
 800a3a8:	08002ad9 	.word	0x08002ad9
 800a3ac:	08002ba1 	.word	0x08002ba1
 800a3b0:	0800a4b1 	.word	0x0800a4b1
 800a3b4:	20000744 	.word	0x20000744
 800a3b8:	200006c4 	.word	0x200006c4
 800a3bc:	20000688 	.word	0x20000688
 800a3c0:	200006b8 	.word	0x200006b8
 800a3c4:	20000070 	.word	0x20000070
 800a3c8:	2000017c 	.word	0x2000017c
 800a3cc:	20000694 	.word	0x20000694
 800a3d0:	20000080 	.word	0x20000080

0800a3d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a3de:	2003      	movs	r0, #3
 800a3e0:	f000 ff4c 	bl	800b27c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f000 f80d 	bl	800a404 <HAL_InitTick>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	71fb      	strb	r3, [r7, #7]
 800a3f4:	e001      	b.n	800a3fa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a3f6:	f7f8 f8fd 	bl	80025f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a410:	4b16      	ldr	r3, [pc, #88]	@ (800a46c <HAL_InitTick+0x68>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d022      	beq.n	800a45e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a418:	4b15      	ldr	r3, [pc, #84]	@ (800a470 <HAL_InitTick+0x6c>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	4b13      	ldr	r3, [pc, #76]	@ (800a46c <HAL_InitTick+0x68>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a424:	fbb1 f3f3 	udiv	r3, r1, r3
 800a428:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 ff5a 	bl	800b2e6 <HAL_SYSTICK_Config>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10f      	bne.n	800a458 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b0f      	cmp	r3, #15
 800a43c:	d809      	bhi.n	800a452 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a43e:	2200      	movs	r2, #0
 800a440:	6879      	ldr	r1, [r7, #4]
 800a442:	f04f 30ff 	mov.w	r0, #4294967295
 800a446:	f000 ff24 	bl	800b292 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a44a:	4a0a      	ldr	r2, [pc, #40]	@ (800a474 <HAL_InitTick+0x70>)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	e007      	b.n	800a462 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	73fb      	strb	r3, [r7, #15]
 800a456:	e004      	b.n	800a462 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	73fb      	strb	r3, [r7, #15]
 800a45c:	e001      	b.n	800a462 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20000194 	.word	0x20000194
 800a470:	20000000 	.word	0x20000000
 800a474:	20000190 	.word	0x20000190

0800a478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a478:	b480      	push	{r7}
 800a47a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a47c:	4b05      	ldr	r3, [pc, #20]	@ (800a494 <HAL_IncTick+0x1c>)
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	4b05      	ldr	r3, [pc, #20]	@ (800a498 <HAL_IncTick+0x20>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4413      	add	r3, r2
 800a486:	4a03      	ldr	r2, [pc, #12]	@ (800a494 <HAL_IncTick+0x1c>)
 800a488:	6013      	str	r3, [r2, #0]
}
 800a48a:	bf00      	nop
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000778 	.word	0x20000778
 800a498:	20000194 	.word	0x20000194

0800a49c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
  return uwTick;
 800a4a0:	4b02      	ldr	r3, [pc, #8]	@ (800a4ac <HAL_GetTick+0x10>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bc80      	pop	{r7}
 800a4aa:	4770      	bx	lr
 800a4ac:	20000778 	.word	0x20000778

0800a4b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a4b8:	f7ff fff0 	bl	800a49c <HAL_GetTick>
 800a4bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c8:	d004      	beq.n	800a4d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800a4ca:	4b09      	ldr	r3, [pc, #36]	@ (800a4f0 <HAL_Delay+0x40>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a4d4:	bf00      	nop
 800a4d6:	f7ff ffe1 	bl	800a49c <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d8f7      	bhi.n	800a4d6 <HAL_Delay+0x26>
  {
  }
}
 800a4e6:	bf00      	nop
 800a4e8:	bf00      	nop
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20000194 	.word	0x20000194

0800a4f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08e      	sub	sp, #56	@ 0x38
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e127      	b.n	800a764 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d115      	bne.n	800a54e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a530:	4b8e      	ldr	r3, [pc, #568]	@ (800a76c <HAL_ADC_Init+0x278>)
 800a532:	6a1b      	ldr	r3, [r3, #32]
 800a534:	4a8d      	ldr	r2, [pc, #564]	@ (800a76c <HAL_ADC_Init+0x278>)
 800a536:	f043 0301 	orr.w	r3, r3, #1
 800a53a:	6213      	str	r3, [r2, #32]
 800a53c:	4b8b      	ldr	r3, [pc, #556]	@ (800a76c <HAL_ADC_Init+0x278>)
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	f003 0301 	and.w	r3, r3, #1
 800a544:	60bb      	str	r3, [r7, #8]
 800a546:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7f8 f883 	bl	8002654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a552:	f003 0310 	and.w	r3, r3, #16
 800a556:	2b00      	cmp	r3, #0
 800a558:	f040 80ff 	bne.w	800a75a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a560:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a564:	f023 0302 	bic.w	r3, r3, #2
 800a568:	f043 0202 	orr.w	r2, r3, #2
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800a570:	4b7f      	ldr	r3, [pc, #508]	@ (800a770 <HAL_ADC_Init+0x27c>)
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	497c      	ldr	r1, [pc, #496]	@ (800a770 <HAL_ADC_Init+0x27c>)
 800a57e:	4313      	orrs	r3, r2
 800a580:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800a58a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a592:	4619      	mov	r1, r3
 800a594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a598:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	fa93 f3a3 	rbit	r3, r3
 800a5a0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	fab3 f383 	clz	r3, r3
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800a5ae:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a5b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5bc:	4619      	mov	r1, r3
 800a5be:	2302      	movs	r3, #2
 800a5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c4:	fa93 f3a3 	rbit	r3, r3
 800a5c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	fab3 f383 	clz	r3, r3
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800a5d6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800a5d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e2:	2b10      	cmp	r3, #16
 800a5e4:	d007      	beq.n	800a5f6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a600:	2b40      	cmp	r3, #64	@ 0x40
 800a602:	d04f      	beq.n	800a6a4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a60a:	4313      	orrs	r3, r2
 800a60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800a616:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	6912      	ldr	r2, [r2, #16]
 800a61c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800a620:	d003      	beq.n	800a62a <HAL_ADC_Init+0x136>
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	6912      	ldr	r2, [r2, #16]
 800a626:	2a01      	cmp	r2, #1
 800a628:	d102      	bne.n	800a630 <HAL_ADC_Init+0x13c>
 800a62a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a62e:	e000      	b.n	800a632 <HAL_ADC_Init+0x13e>
 800a630:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800a632:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800a634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a636:	4313      	orrs	r3, r2
 800a638:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a640:	2b01      	cmp	r3, #1
 800a642:	d125      	bne.n	800a690 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d114      	bne.n	800a678 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a652:	3b01      	subs	r3, #1
 800a654:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800a658:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	fa92 f2a2 	rbit	r2, r2
 800a660:	617a      	str	r2, [r7, #20]
  return result;
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	fab2 f282 	clz	r2, r2
 800a668:	b2d2      	uxtb	r2, r2
 800a66a:	4093      	lsls	r3, r2
 800a66c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a672:	4313      	orrs	r3, r2
 800a674:	633b      	str	r3, [r7, #48]	@ 0x30
 800a676:	e00b      	b.n	800a690 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a67c:	f043 0220 	orr.w	r2, r3, #32
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a688:	f043 0201 	orr.w	r2, r3, #1
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	4b37      	ldr	r3, [pc, #220]	@ (800a774 <HAL_ADC_Init+0x280>)
 800a698:	4013      	ands	r3, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6812      	ldr	r2, [r2, #0]
 800a69e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a6a0:	430b      	orrs	r3, r1
 800a6a2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	4b33      	ldr	r3, [pc, #204]	@ (800a778 <HAL_ADC_Init+0x284>)
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	6812      	ldr	r2, [r2, #0]
 800a6b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6b4:	430b      	orrs	r3, r1
 800a6b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6c0:	d003      	beq.n	800a6ca <HAL_ADC_Init+0x1d6>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d119      	bne.n	800a6fe <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d0:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800a6de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	fa92 f2a2 	rbit	r2, r2
 800a6e6:	60fa      	str	r2, [r7, #12]
  return result;
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	fab2 f282 	clz	r2, r2
 800a6ee:	b2d2      	uxtb	r2, r2
 800a6f0:	fa03 f202 	lsl.w	r2, r3, r2
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	631a      	str	r2, [r3, #48]	@ 0x30
 800a6fc:	e007      	b.n	800a70e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 800a70c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	4b19      	ldr	r3, [pc, #100]	@ (800a77c <HAL_ADC_Init+0x288>)
 800a716:	4013      	ands	r3, r2
 800a718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d10b      	bne.n	800a736 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a728:	f023 0303 	bic.w	r3, r3, #3
 800a72c:	f043 0201 	orr.w	r2, r3, #1
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a734:	e014      	b.n	800a760 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a73a:	f023 0312 	bic.w	r3, r3, #18
 800a73e:	f043 0210 	orr.w	r2, r3, #16
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a74a:	f043 0201 	orr.w	r2, r3, #1
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a758:	e002      	b.n	800a760 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800a760:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800a764:	4618      	mov	r0, r3
 800a766:	3738      	adds	r7, #56	@ 0x38
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	40023800 	.word	0x40023800
 800a770:	40012700 	.word	0x40012700
 800a774:	fcfc16ff 	.word	0xfcfc16ff
 800a778:	c0fff189 	.word	0xc0fff189
 800a77c:	bf80fffe 	.word	0xbf80fffe

0800a780 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a792:	2b01      	cmp	r3, #1
 800a794:	d101      	bne.n	800a79a <HAL_ADC_Stop+0x1a>
 800a796:	2302      	movs	r3, #2
 800a798:	e01a      	b.n	800a7d0 <HAL_ADC_Stop+0x50>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fc54 	bl	800b050 <ADC_ConversionStop_Disable>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d109      	bne.n	800a7c6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a7ba:	f023 0301 	bic.w	r3, r3, #1
 800a7be:	f043 0201 	orr.w	r2, r3, #1
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7f4:	d113      	bne.n	800a81e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a804:	d10b      	bne.n	800a81e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a80a:	f043 0220 	orr.w	r2, r3, #32
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e068      	b.n	800a8f0 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a81e:	f7ff fe3d 	bl	800a49c <HAL_GetTick>
 800a822:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800a824:	e021      	b.n	800a86a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d01d      	beq.n	800a86a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d007      	beq.n	800a844 <HAL_ADC_PollForConversion+0x6c>
 800a834:	f7ff fe32 	bl	800a49c <HAL_GetTick>
 800a838:	4602      	mov	r2, r0
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d212      	bcs.n	800a86a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10b      	bne.n	800a86a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a856:	f043 0204 	orr.w	r2, r3, #4
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e042      	b.n	800a8f0 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0d6      	beq.n	800a826 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d104      	bne.n	800a88a <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f06f 0212 	mvn.w	r2, #18
 800a888:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a88e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d124      	bne.n	800a8ee <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d11f      	bne.n	800a8ee <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b4:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d006      	beq.n	800a8ca <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d111      	bne.n	800a8ee <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d105      	bne.n	800a8ee <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8e6:	f043 0201 	orr.w	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d101      	bne.n	800a912 <HAL_ADC_Start_IT+0x1a>
 800a90e:	2302      	movs	r3, #2
 800a910:	e058      	b.n	800a9c4 <HAL_ADC_Start_IT+0xcc>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fb3c 	bl	800af98 <ADC_Enable>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d14b      	bne.n	800a9c2 <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a92e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a932:	f023 0301 	bic.w	r3, r3, #1
 800a936:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a950:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a954:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a960:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a968:	d106      	bne.n	800a978 <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a96e:	f023 0206 	bic.w	r2, r3, #6
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	651a      	str	r2, [r3, #80]	@ 0x50
 800a976:	e002      	b.n	800a97e <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a98e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	6812      	ldr	r2, [r2, #0]
 800a99a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a99e:	f043 0320 	orr.w	r3, r3, #32
 800a9a2:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d107      	bne.n	800a9c2 <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689a      	ldr	r2, [r3, #8]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a9c0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bc80      	pop	{r7}
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f003 0320 	and.w	r3, r3, #32
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d04c      	beq.n	800aaa0 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f003 0302 	and.w	r3, r3, #2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d047      	beq.n	800aaa0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa14:	f003 0310 	and.w	r3, r3, #16
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d105      	bne.n	800aa28 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d12c      	bne.n	800aa90 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d127      	bne.n	800aa90 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa46:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d006      	beq.n	800aa5c <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d119      	bne.n	800aa90 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f022 0220 	bic.w	r2, r2, #32
 800aa6a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d105      	bne.n	800aa90 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa88:	f043 0201 	orr.w	r2, r3, #1
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f89e 	bl	800abd2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f06f 0212 	mvn.w	r2, #18
 800aa9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d05a      	beq.n	800ab60 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d055      	beq.n	800ab60 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aab8:	f003 0310 	and.w	r3, r3, #16
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d105      	bne.n	800aacc <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aac4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d13a      	bne.n	800ab50 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aae0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d006      	beq.n	800aaf6 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d12c      	bne.n	800ab50 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d125      	bne.n	800ab50 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d11e      	bne.n	800ab50 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d119      	bne.n	800ab50 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab2a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d105      	bne.n	800ab50 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab48:	f043 0201 	orr.w	r2, r3, #1
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fabe 	bl	800b0d2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f06f 020c 	mvn.w	r2, #12
 800ab5e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d012      	beq.n	800ab90 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00d      	beq.n	800ab90 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f82f 	bl	800abe4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f06f 0201 	mvn.w	r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d017      	beq.n	800abca <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f003 0320 	and.w	r3, r3, #32
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d012      	beq.n	800abca <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aba8:	f043 0202 	orr.w	r2, r3, #2
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f06f 0220 	mvn.w	r2, #32
 800abb8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f81b 	bl	800abf6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f06f 0220 	mvn.w	r2, #32
 800abc8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800abca:	bf00      	nop
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800abda:	bf00      	nop
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	bc80      	pop	{r7}
 800abe2:	4770      	bx	lr

0800abe4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bc80      	pop	{r7}
 800abf4:	4770      	bx	lr

0800abf6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800abfe:	bf00      	nop
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bc80      	pop	{r7}
 800ac06:	4770      	bx	lr

0800ac08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d101      	bne.n	800ac28 <HAL_ADC_ConfigChannel+0x20>
 800ac24:	2302      	movs	r3, #2
 800ac26:	e14f      	b.n	800aec8 <HAL_ADC_ConfigChannel+0x2c0>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	2b06      	cmp	r3, #6
 800ac36:	d81c      	bhi.n	800ac72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	3b05      	subs	r3, #5
 800ac4a:	221f      	movs	r2, #31
 800ac4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac50:	43db      	mvns	r3, r3
 800ac52:	4019      	ands	r1, r3
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	6818      	ldr	r0, [r3, #0]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	3b05      	subs	r3, #5
 800ac64:	fa00 f203 	lsl.w	r2, r0, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	641a      	str	r2, [r3, #64]	@ 0x40
 800ac70:	e07e      	b.n	800ad70 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	2b0c      	cmp	r3, #12
 800ac78:	d81c      	bhi.n	800acb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	685a      	ldr	r2, [r3, #4]
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	3b23      	subs	r3, #35	@ 0x23
 800ac8c:	221f      	movs	r2, #31
 800ac8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac92:	43db      	mvns	r3, r3
 800ac94:	4019      	ands	r1, r3
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	6818      	ldr	r0, [r3, #0]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	3b23      	subs	r3, #35	@ 0x23
 800aca6:	fa00 f203 	lsl.w	r2, r0, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	430a      	orrs	r2, r1
 800acb0:	63da      	str	r2, [r3, #60]	@ 0x3c
 800acb2:	e05d      	b.n	800ad70 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	2b12      	cmp	r3, #18
 800acba:	d81c      	bhi.n	800acf6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	3b41      	subs	r3, #65	@ 0x41
 800acce:	221f      	movs	r2, #31
 800acd0:	fa02 f303 	lsl.w	r3, r2, r3
 800acd4:	43db      	mvns	r3, r3
 800acd6:	4019      	ands	r1, r3
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	6818      	ldr	r0, [r3, #0]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	4613      	mov	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	3b41      	subs	r3, #65	@ 0x41
 800ace8:	fa00 f203 	lsl.w	r2, r0, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	639a      	str	r2, [r3, #56]	@ 0x38
 800acf4:	e03c      	b.n	800ad70 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	2b18      	cmp	r3, #24
 800acfc:	d81c      	bhi.n	800ad38 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	3b5f      	subs	r3, #95	@ 0x5f
 800ad10:	221f      	movs	r2, #31
 800ad12:	fa02 f303 	lsl.w	r3, r2, r3
 800ad16:	43db      	mvns	r3, r3
 800ad18:	4019      	ands	r1, r3
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	6818      	ldr	r0, [r3, #0]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	4613      	mov	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	3b5f      	subs	r3, #95	@ 0x5f
 800ad2a:	fa00 f203 	lsl.w	r2, r0, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	430a      	orrs	r2, r1
 800ad34:	635a      	str	r2, [r3, #52]	@ 0x34
 800ad36:	e01b      	b.n	800ad70 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	4613      	mov	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	3b7d      	subs	r3, #125	@ 0x7d
 800ad4a:	221f      	movs	r2, #31
 800ad4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad50:	43db      	mvns	r3, r3
 800ad52:	4019      	ands	r1, r3
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	6818      	ldr	r0, [r3, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	3b7d      	subs	r3, #125	@ 0x7d
 800ad64:	fa00 f203 	lsl.w	r2, r0, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b09      	cmp	r3, #9
 800ad76:	d81a      	bhi.n	800adae <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6959      	ldr	r1, [r3, #20]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	4613      	mov	r3, r2
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	4413      	add	r3, r2
 800ad88:	2207      	movs	r2, #7
 800ad8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad8e:	43db      	mvns	r3, r3
 800ad90:	4019      	ands	r1, r3
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	6898      	ldr	r0, [r3, #8]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	4413      	add	r3, r2
 800ada0:	fa00 f203 	lsl.w	r2, r0, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	430a      	orrs	r2, r1
 800adaa:	615a      	str	r2, [r3, #20]
 800adac:	e05d      	b.n	800ae6a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b13      	cmp	r3, #19
 800adb4:	d81c      	bhi.n	800adf0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6919      	ldr	r1, [r3, #16]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	4613      	mov	r3, r2
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	4413      	add	r3, r2
 800adc6:	3b1e      	subs	r3, #30
 800adc8:	2207      	movs	r2, #7
 800adca:	fa02 f303 	lsl.w	r3, r2, r3
 800adce:	43db      	mvns	r3, r3
 800add0:	4019      	ands	r1, r3
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	6898      	ldr	r0, [r3, #8]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	4613      	mov	r3, r2
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	4413      	add	r3, r2
 800ade0:	3b1e      	subs	r3, #30
 800ade2:	fa00 f203 	lsl.w	r2, r0, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	430a      	orrs	r2, r1
 800adec:	611a      	str	r2, [r3, #16]
 800adee:	e03c      	b.n	800ae6a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b1d      	cmp	r3, #29
 800adf6:	d81c      	bhi.n	800ae32 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68d9      	ldr	r1, [r3, #12]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	4613      	mov	r3, r2
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	4413      	add	r3, r2
 800ae08:	3b3c      	subs	r3, #60	@ 0x3c
 800ae0a:	2207      	movs	r2, #7
 800ae0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae10:	43db      	mvns	r3, r3
 800ae12:	4019      	ands	r1, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	6898      	ldr	r0, [r3, #8]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	4413      	add	r3, r2
 800ae22:	3b3c      	subs	r3, #60	@ 0x3c
 800ae24:	fa00 f203 	lsl.w	r2, r0, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	60da      	str	r2, [r3, #12]
 800ae30:	e01b      	b.n	800ae6a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	005b      	lsls	r3, r3, #1
 800ae40:	4413      	add	r3, r2
 800ae42:	3b5a      	subs	r3, #90	@ 0x5a
 800ae44:	2207      	movs	r2, #7
 800ae46:	fa02 f303 	lsl.w	r3, r2, r3
 800ae4a:	43db      	mvns	r3, r3
 800ae4c:	4019      	ands	r1, r3
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	6898      	ldr	r0, [r3, #8]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	4613      	mov	r3, r2
 800ae58:	005b      	lsls	r3, r3, #1
 800ae5a:	4413      	add	r3, r2
 800ae5c:	3b5a      	subs	r3, #90	@ 0x5a
 800ae5e:	fa00 f203 	lsl.w	r2, r0, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	430a      	orrs	r2, r1
 800ae68:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b10      	cmp	r3, #16
 800ae70:	d003      	beq.n	800ae7a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800ae76:	2b11      	cmp	r3, #17
 800ae78:	d121      	bne.n	800aebe <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800ae7a:	4b16      	ldr	r3, [pc, #88]	@ (800aed4 <HAL_ADC_ConfigChannel+0x2cc>)
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d11b      	bne.n	800aebe <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800ae86:	4b13      	ldr	r3, [pc, #76]	@ (800aed4 <HAL_ADC_ConfigChannel+0x2cc>)
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	4a12      	ldr	r2, [pc, #72]	@ (800aed4 <HAL_ADC_ConfigChannel+0x2cc>)
 800ae8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ae90:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b10      	cmp	r3, #16
 800ae98:	d111      	bne.n	800aebe <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800ae9a:	4b0f      	ldr	r3, [pc, #60]	@ (800aed8 <HAL_ADC_ConfigChannel+0x2d0>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a0f      	ldr	r2, [pc, #60]	@ (800aedc <HAL_ADC_ConfigChannel+0x2d4>)
 800aea0:	fba2 2303 	umull	r2, r3, r2, r3
 800aea4:	0c9a      	lsrs	r2, r3, #18
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800aeb0:	e002      	b.n	800aeb8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1f9      	bne.n	800aeb2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	bc80      	pop	{r7}
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	40012700 	.word	0x40012700
 800aed8:	20000000 	.word	0x20000000
 800aedc:	431bde83 	.word	0x431bde83

0800aee0 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a27      	ldr	r2, [pc, #156]	@ (800af8c <HAL_ADC_AnalogWDGConfig+0xac>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d003      	beq.n	800aefc <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800aef8:	4a25      	ldr	r2, [pc, #148]	@ (800af90 <HAL_ADC_AnalogWDGConfig+0xb0>)
 800aefa:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800af02:	2b01      	cmp	r3, #1
 800af04:	d101      	bne.n	800af0a <HAL_ADC_AnalogWDGConfig+0x2a>
 800af06:	2302      	movs	r3, #2
 800af08:	e03b      	b.n	800af82 <HAL_ADC_AnalogWDGConfig+0xa2>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	7a1b      	ldrb	r3, [r3, #8]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d108      	bne.n	800af2c <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af28:	605a      	str	r2, [r3, #4]
 800af2a:	e007      	b.n	800af3c <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af3a:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6859      	ldr	r1, [r3, #4]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	4b13      	ldr	r3, [pc, #76]	@ (800af94 <HAL_ADC_AnalogWDGConfig+0xb4>)
 800af48:	400b      	ands	r3, r1
 800af4a:	6053      	str	r3, [r2, #4]
                            ADC_CR1_JAWDEN |
                            ADC_CR1_AWDEN  |
                            ADC_CR1_AWDCH   );
  
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6859      	ldr	r1, [r3, #4]
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
                           AnalogWDGConfig->Channel       );
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800af5a:	431a      	orrs	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	430a      	orrs	r2, r1
 800af62:	605a      	str	r2, [r3, #4]
      
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	68d2      	ldr	r2, [r2, #12]
 800af6c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	6912      	ldr	r2, [r2, #16]
 800af76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr
 800af8c:	00800200 	.word	0x00800200
 800af90:	00400200 	.word	0x00400200
 800af94:	ff3ffde0 	.word	0xff3ffde0

0800af98 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afb2:	2b40      	cmp	r3, #64	@ 0x40
 800afb4:	d043      	beq.n	800b03e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f042 0201 	orr.w	r2, r2, #1
 800afc4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800afc6:	4b20      	ldr	r3, [pc, #128]	@ (800b048 <ADC_Enable+0xb0>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a20      	ldr	r2, [pc, #128]	@ (800b04c <ADC_Enable+0xb4>)
 800afcc:	fba2 2303 	umull	r2, r3, r2, r3
 800afd0:	0c9a      	lsrs	r2, r3, #18
 800afd2:	4613      	mov	r3, r2
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	4413      	add	r3, r2
 800afd8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800afda:	e002      	b.n	800afe2 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	3b01      	subs	r3, #1
 800afe0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1f9      	bne.n	800afdc <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800afe8:	f7ff fa58 	bl	800a49c <HAL_GetTick>
 800afec:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800afee:	e01f      	b.n	800b030 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800aff0:	f7ff fa54 	bl	800a49c <HAL_GetTick>
 800aff4:	4602      	mov	r2, r0
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	2b02      	cmp	r3, #2
 800affc:	d918      	bls.n	800b030 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b008:	2b40      	cmp	r3, #64	@ 0x40
 800b00a:	d011      	beq.n	800b030 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b010:	f043 0210 	orr.w	r2, r3, #16
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b01c:	f043 0201 	orr.w	r2, r3, #1
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	e007      	b.n	800b040 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b03a:	2b40      	cmp	r3, #64	@ 0x40
 800b03c:	d1d8      	bne.n	800aff0 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20000000 	.word	0x20000000
 800b04c:	431bde83 	.word	0x431bde83

0800b050 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b058:	2300      	movs	r3, #0
 800b05a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b066:	2b40      	cmp	r3, #64	@ 0x40
 800b068:	d12e      	bne.n	800b0c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689a      	ldr	r2, [r3, #8]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f022 0201 	bic.w	r2, r2, #1
 800b078:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b07a:	f7ff fa0f 	bl	800a49c <HAL_GetTick>
 800b07e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800b080:	e01b      	b.n	800b0ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800b082:	f7ff fa0b 	bl	800a49c <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d914      	bls.n	800b0ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b09a:	2b40      	cmp	r3, #64	@ 0x40
 800b09c:	d10d      	bne.n	800b0ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0a2:	f043 0210 	orr.w	r2, r3, #16
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0ae:	f043 0201 	orr.w	r2, r3, #1
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e007      	b.n	800b0ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c4:	2b40      	cmp	r3, #64	@ 0x40
 800b0c6:	d0dc      	beq.n	800b082 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800b0da:	bf00      	nop
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bc80      	pop	{r7}
 800b0e2:	4770      	bx	lr

0800b0e4 <__NVIC_SetPriorityGrouping>:
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b128 <__NVIC_SetPriorityGrouping+0x44>)
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b100:	4013      	ands	r3, r2
 800b102:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b10c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b116:	4a04      	ldr	r2, [pc, #16]	@ (800b128 <__NVIC_SetPriorityGrouping+0x44>)
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	60d3      	str	r3, [r2, #12]
}
 800b11c:	bf00      	nop
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	bc80      	pop	{r7}
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	e000ed00 	.word	0xe000ed00

0800b12c <__NVIC_GetPriorityGrouping>:
{
 800b12c:	b480      	push	{r7}
 800b12e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b130:	4b04      	ldr	r3, [pc, #16]	@ (800b144 <__NVIC_GetPriorityGrouping+0x18>)
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	0a1b      	lsrs	r3, r3, #8
 800b136:	f003 0307 	and.w	r3, r3, #7
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bc80      	pop	{r7}
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	e000ed00 	.word	0xe000ed00

0800b148 <__NVIC_EnableIRQ>:
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	4603      	mov	r3, r0
 800b150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b156:	2b00      	cmp	r3, #0
 800b158:	db0b      	blt.n	800b172 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	f003 021f 	and.w	r2, r3, #31
 800b160:	4906      	ldr	r1, [pc, #24]	@ (800b17c <__NVIC_EnableIRQ+0x34>)
 800b162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b166:	095b      	lsrs	r3, r3, #5
 800b168:	2001      	movs	r0, #1
 800b16a:	fa00 f202 	lsl.w	r2, r0, r2
 800b16e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b172:	bf00      	nop
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	bc80      	pop	{r7}
 800b17a:	4770      	bx	lr
 800b17c:	e000e100 	.word	0xe000e100

0800b180 <__NVIC_SetPriority>:
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	4603      	mov	r3, r0
 800b188:	6039      	str	r1, [r7, #0]
 800b18a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b18c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b190:	2b00      	cmp	r3, #0
 800b192:	db0a      	blt.n	800b1aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	b2da      	uxtb	r2, r3
 800b198:	490c      	ldr	r1, [pc, #48]	@ (800b1cc <__NVIC_SetPriority+0x4c>)
 800b19a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b19e:	0112      	lsls	r2, r2, #4
 800b1a0:	b2d2      	uxtb	r2, r2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b1a8:	e00a      	b.n	800b1c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	4908      	ldr	r1, [pc, #32]	@ (800b1d0 <__NVIC_SetPriority+0x50>)
 800b1b0:	79fb      	ldrb	r3, [r7, #7]
 800b1b2:	f003 030f 	and.w	r3, r3, #15
 800b1b6:	3b04      	subs	r3, #4
 800b1b8:	0112      	lsls	r2, r2, #4
 800b1ba:	b2d2      	uxtb	r2, r2
 800b1bc:	440b      	add	r3, r1
 800b1be:	761a      	strb	r2, [r3, #24]
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bc80      	pop	{r7}
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	e000e100 	.word	0xe000e100
 800b1d0:	e000ed00 	.word	0xe000ed00

0800b1d4 <NVIC_EncodePriority>:
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b089      	sub	sp, #36	@ 0x24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	f1c3 0307 	rsb	r3, r3, #7
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	bf28      	it	cs
 800b1f2:	2304      	movcs	r3, #4
 800b1f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	2b06      	cmp	r3, #6
 800b1fc:	d902      	bls.n	800b204 <NVIC_EncodePriority+0x30>
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	3b03      	subs	r3, #3
 800b202:	e000      	b.n	800b206 <NVIC_EncodePriority+0x32>
 800b204:	2300      	movs	r3, #0
 800b206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b208:	f04f 32ff 	mov.w	r2, #4294967295
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	fa02 f303 	lsl.w	r3, r2, r3
 800b212:	43da      	mvns	r2, r3
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	401a      	ands	r2, r3
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b21c:	f04f 31ff 	mov.w	r1, #4294967295
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	fa01 f303 	lsl.w	r3, r1, r3
 800b226:	43d9      	mvns	r1, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b22c:	4313      	orrs	r3, r2
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3724      	adds	r7, #36	@ 0x24
 800b232:	46bd      	mov	sp, r7
 800b234:	bc80      	pop	{r7}
 800b236:	4770      	bx	lr

0800b238 <SysTick_Config>:
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3b01      	subs	r3, #1
 800b244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b248:	d301      	bcc.n	800b24e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b24a:	2301      	movs	r3, #1
 800b24c:	e00f      	b.n	800b26e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b24e:	4a0a      	ldr	r2, [pc, #40]	@ (800b278 <SysTick_Config+0x40>)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3b01      	subs	r3, #1
 800b254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b256:	210f      	movs	r1, #15
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	f7ff ff90 	bl	800b180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b260:	4b05      	ldr	r3, [pc, #20]	@ (800b278 <SysTick_Config+0x40>)
 800b262:	2200      	movs	r2, #0
 800b264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b266:	4b04      	ldr	r3, [pc, #16]	@ (800b278 <SysTick_Config+0x40>)
 800b268:	2207      	movs	r2, #7
 800b26a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	e000e010 	.word	0xe000e010

0800b27c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7ff ff2d 	bl	800b0e4 <__NVIC_SetPriorityGrouping>
}
 800b28a:	bf00      	nop
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b086      	sub	sp, #24
 800b296:	af00      	add	r7, sp, #0
 800b298:	4603      	mov	r3, r0
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	607a      	str	r2, [r7, #4]
 800b29e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b2a4:	f7ff ff42 	bl	800b12c <__NVIC_GetPriorityGrouping>
 800b2a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	68b9      	ldr	r1, [r7, #8]
 800b2ae:	6978      	ldr	r0, [r7, #20]
 800b2b0:	f7ff ff90 	bl	800b1d4 <NVIC_EncodePriority>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7ff ff5f 	bl	800b180 <__NVIC_SetPriority>
}
 800b2c2:	bf00      	nop
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b082      	sub	sp, #8
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b2d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7ff ff35 	bl	800b148 <__NVIC_EnableIRQ>
}
 800b2de:	bf00      	nop
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b082      	sub	sp, #8
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7ff ffa2 	bl	800b238 <SysTick_Config>
 800b2f4:	4603      	mov	r3, r0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800b312:	2300      	movs	r3, #0
 800b314:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800b316:	e160      	b.n	800b5da <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	2101      	movs	r1, #1
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	fa01 f303 	lsl.w	r3, r1, r3
 800b324:	4013      	ands	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 8152 	beq.w	800b5d4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f003 0303 	and.w	r3, r3, #3
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d005      	beq.n	800b348 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b344:	2b02      	cmp	r3, #2
 800b346:	d130      	bne.n	800b3aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	005b      	lsls	r3, r3, #1
 800b352:	2203      	movs	r2, #3
 800b354:	fa02 f303 	lsl.w	r3, r2, r3
 800b358:	43db      	mvns	r3, r3
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	4013      	ands	r3, r2
 800b35e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	68da      	ldr	r2, [r3, #12]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	fa02 f303 	lsl.w	r3, r2, r3
 800b36c:	693a      	ldr	r2, [r7, #16]
 800b36e:	4313      	orrs	r3, r2
 800b370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800b37e:	2201      	movs	r2, #1
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	fa02 f303 	lsl.w	r3, r2, r3
 800b386:	43db      	mvns	r3, r3
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4013      	ands	r3, r2
 800b38c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	091b      	lsrs	r3, r3, #4
 800b394:	f003 0201 	and.w	r2, r3, #1
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	fa02 f303 	lsl.w	r3, r2, r3
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	f003 0303 	and.w	r3, r3, #3
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d017      	beq.n	800b3e6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	2203      	movs	r2, #3
 800b3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c6:	43db      	mvns	r3, r3
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	689a      	ldr	r2, [r3, #8]
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	005b      	lsls	r3, r3, #1
 800b3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3da:	693a      	ldr	r2, [r7, #16]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	f003 0303 	and.w	r3, r3, #3
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d123      	bne.n	800b43a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	08da      	lsrs	r2, r3, #3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3208      	adds	r2, #8
 800b3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	220f      	movs	r2, #15
 800b40a:	fa02 f303 	lsl.w	r3, r2, r3
 800b40e:	43db      	mvns	r3, r3
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	4013      	ands	r3, r2
 800b414:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	691a      	ldr	r2, [r3, #16]
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f003 0307 	and.w	r3, r3, #7
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	fa02 f303 	lsl.w	r3, r2, r3
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	08da      	lsrs	r2, r3, #3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3208      	adds	r2, #8
 800b434:	6939      	ldr	r1, [r7, #16]
 800b436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	2203      	movs	r2, #3
 800b446:	fa02 f303 	lsl.w	r3, r2, r3
 800b44a:	43db      	mvns	r3, r3
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	4013      	ands	r3, r2
 800b450:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f003 0203 	and.w	r2, r3, #3
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	fa02 f303 	lsl.w	r3, r2, r3
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	4313      	orrs	r3, r2
 800b466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 80ac 	beq.w	800b5d4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b47c:	4b5e      	ldr	r3, [pc, #376]	@ (800b5f8 <HAL_GPIO_Init+0x2f8>)
 800b47e:	6a1b      	ldr	r3, [r3, #32]
 800b480:	4a5d      	ldr	r2, [pc, #372]	@ (800b5f8 <HAL_GPIO_Init+0x2f8>)
 800b482:	f043 0301 	orr.w	r3, r3, #1
 800b486:	6213      	str	r3, [r2, #32]
 800b488:	4b5b      	ldr	r3, [pc, #364]	@ (800b5f8 <HAL_GPIO_Init+0x2f8>)
 800b48a:	6a1b      	ldr	r3, [r3, #32]
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	60bb      	str	r3, [r7, #8]
 800b492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800b494:	4a59      	ldr	r2, [pc, #356]	@ (800b5fc <HAL_GPIO_Init+0x2fc>)
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	089b      	lsrs	r3, r3, #2
 800b49a:	3302      	adds	r3, #2
 800b49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f003 0303 	and.w	r3, r3, #3
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	220f      	movs	r2, #15
 800b4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b4b0:	43db      	mvns	r3, r3
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a51      	ldr	r2, [pc, #324]	@ (800b600 <HAL_GPIO_Init+0x300>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d025      	beq.n	800b50c <HAL_GPIO_Init+0x20c>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a50      	ldr	r2, [pc, #320]	@ (800b604 <HAL_GPIO_Init+0x304>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d01f      	beq.n	800b508 <HAL_GPIO_Init+0x208>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a4f      	ldr	r2, [pc, #316]	@ (800b608 <HAL_GPIO_Init+0x308>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d019      	beq.n	800b504 <HAL_GPIO_Init+0x204>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a4e      	ldr	r2, [pc, #312]	@ (800b60c <HAL_GPIO_Init+0x30c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d013      	beq.n	800b500 <HAL_GPIO_Init+0x200>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a4d      	ldr	r2, [pc, #308]	@ (800b610 <HAL_GPIO_Init+0x310>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d00d      	beq.n	800b4fc <HAL_GPIO_Init+0x1fc>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a4c      	ldr	r2, [pc, #304]	@ (800b614 <HAL_GPIO_Init+0x314>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d007      	beq.n	800b4f8 <HAL_GPIO_Init+0x1f8>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a4b      	ldr	r2, [pc, #300]	@ (800b618 <HAL_GPIO_Init+0x318>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d101      	bne.n	800b4f4 <HAL_GPIO_Init+0x1f4>
 800b4f0:	2306      	movs	r3, #6
 800b4f2:	e00c      	b.n	800b50e <HAL_GPIO_Init+0x20e>
 800b4f4:	2307      	movs	r3, #7
 800b4f6:	e00a      	b.n	800b50e <HAL_GPIO_Init+0x20e>
 800b4f8:	2305      	movs	r3, #5
 800b4fa:	e008      	b.n	800b50e <HAL_GPIO_Init+0x20e>
 800b4fc:	2304      	movs	r3, #4
 800b4fe:	e006      	b.n	800b50e <HAL_GPIO_Init+0x20e>
 800b500:	2303      	movs	r3, #3
 800b502:	e004      	b.n	800b50e <HAL_GPIO_Init+0x20e>
 800b504:	2302      	movs	r3, #2
 800b506:	e002      	b.n	800b50e <HAL_GPIO_Init+0x20e>
 800b508:	2301      	movs	r3, #1
 800b50a:	e000      	b.n	800b50e <HAL_GPIO_Init+0x20e>
 800b50c:	2300      	movs	r3, #0
 800b50e:	697a      	ldr	r2, [r7, #20]
 800b510:	f002 0203 	and.w	r2, r2, #3
 800b514:	0092      	lsls	r2, r2, #2
 800b516:	4093      	lsls	r3, r2
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b51e:	4937      	ldr	r1, [pc, #220]	@ (800b5fc <HAL_GPIO_Init+0x2fc>)
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	089b      	lsrs	r3, r3, #2
 800b524:	3302      	adds	r3, #2
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b52c:	4b3b      	ldr	r3, [pc, #236]	@ (800b61c <HAL_GPIO_Init+0x31c>)
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	43db      	mvns	r3, r3
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	4013      	ands	r3, r2
 800b53a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b544:	2b00      	cmp	r3, #0
 800b546:	d003      	beq.n	800b550 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b550:	4a32      	ldr	r2, [pc, #200]	@ (800b61c <HAL_GPIO_Init+0x31c>)
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b556:	4b31      	ldr	r3, [pc, #196]	@ (800b61c <HAL_GPIO_Init+0x31c>)
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	43db      	mvns	r3, r3
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	4013      	ands	r3, r2
 800b564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d003      	beq.n	800b57a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	4313      	orrs	r3, r2
 800b578:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b57a:	4a28      	ldr	r2, [pc, #160]	@ (800b61c <HAL_GPIO_Init+0x31c>)
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b580:	4b26      	ldr	r3, [pc, #152]	@ (800b61c <HAL_GPIO_Init+0x31c>)
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	43db      	mvns	r3, r3
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	4013      	ands	r3, r2
 800b58e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d003      	beq.n	800b5a4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b5a4:	4a1d      	ldr	r2, [pc, #116]	@ (800b61c <HAL_GPIO_Init+0x31c>)
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b5aa:	4b1c      	ldr	r3, [pc, #112]	@ (800b61c <HAL_GPIO_Init+0x31c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	43db      	mvns	r3, r3
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d003      	beq.n	800b5ce <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b5ce:	4a13      	ldr	r2, [pc, #76]	@ (800b61c <HAL_GPIO_Init+0x31c>)
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f47f ae97 	bne.w	800b318 <HAL_GPIO_Init+0x18>
  }
}
 800b5ea:	bf00      	nop
 800b5ec:	bf00      	nop
 800b5ee:	371c      	adds	r7, #28
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bc80      	pop	{r7}
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	40023800 	.word	0x40023800
 800b5fc:	40010000 	.word	0x40010000
 800b600:	40020000 	.word	0x40020000
 800b604:	40020400 	.word	0x40020400
 800b608:	40020800 	.word	0x40020800
 800b60c:	40020c00 	.word	0x40020c00
 800b610:	40021000 	.word	0x40021000
 800b614:	40021400 	.word	0x40021400
 800b618:	40021800 	.word	0x40021800
 800b61c:	40010400 	.word	0x40010400

0800b620 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b620:	b480      	push	{r7}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b62a:	2300      	movs	r3, #0
 800b62c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b62e:	2300      	movs	r3, #0
 800b630:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800b632:	2300      	movs	r3, #0
 800b634:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b636:	e0c4      	b.n	800b7c2 <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b638:	2201      	movs	r2, #1
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	fa02 f303 	lsl.w	r3, r2, r3
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	4013      	ands	r3, r2
 800b644:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 80b7 	beq.w	800b7bc <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800b64e:	4a63      	ldr	r2, [pc, #396]	@ (800b7dc <HAL_GPIO_DeInit+0x1bc>)
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	089b      	lsrs	r3, r3, #2
 800b654:	3302      	adds	r3, #2
 800b656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b65a:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	f003 0303 	and.w	r3, r3, #3
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	220f      	movs	r2, #15
 800b666:	fa02 f303 	lsl.w	r3, r2, r3
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	4013      	ands	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a5b      	ldr	r2, [pc, #364]	@ (800b7e0 <HAL_GPIO_DeInit+0x1c0>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d025      	beq.n	800b6c4 <HAL_GPIO_DeInit+0xa4>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a5a      	ldr	r2, [pc, #360]	@ (800b7e4 <HAL_GPIO_DeInit+0x1c4>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d01f      	beq.n	800b6c0 <HAL_GPIO_DeInit+0xa0>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a59      	ldr	r2, [pc, #356]	@ (800b7e8 <HAL_GPIO_DeInit+0x1c8>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d019      	beq.n	800b6bc <HAL_GPIO_DeInit+0x9c>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a58      	ldr	r2, [pc, #352]	@ (800b7ec <HAL_GPIO_DeInit+0x1cc>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d013      	beq.n	800b6b8 <HAL_GPIO_DeInit+0x98>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a57      	ldr	r2, [pc, #348]	@ (800b7f0 <HAL_GPIO_DeInit+0x1d0>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d00d      	beq.n	800b6b4 <HAL_GPIO_DeInit+0x94>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a56      	ldr	r2, [pc, #344]	@ (800b7f4 <HAL_GPIO_DeInit+0x1d4>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d007      	beq.n	800b6b0 <HAL_GPIO_DeInit+0x90>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a55      	ldr	r2, [pc, #340]	@ (800b7f8 <HAL_GPIO_DeInit+0x1d8>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d101      	bne.n	800b6ac <HAL_GPIO_DeInit+0x8c>
 800b6a8:	2306      	movs	r3, #6
 800b6aa:	e00c      	b.n	800b6c6 <HAL_GPIO_DeInit+0xa6>
 800b6ac:	2307      	movs	r3, #7
 800b6ae:	e00a      	b.n	800b6c6 <HAL_GPIO_DeInit+0xa6>
 800b6b0:	2305      	movs	r3, #5
 800b6b2:	e008      	b.n	800b6c6 <HAL_GPIO_DeInit+0xa6>
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	e006      	b.n	800b6c6 <HAL_GPIO_DeInit+0xa6>
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	e004      	b.n	800b6c6 <HAL_GPIO_DeInit+0xa6>
 800b6bc:	2302      	movs	r3, #2
 800b6be:	e002      	b.n	800b6c6 <HAL_GPIO_DeInit+0xa6>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e000      	b.n	800b6c6 <HAL_GPIO_DeInit+0xa6>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	f002 0203 	and.w	r2, r2, #3
 800b6cc:	0092      	lsls	r2, r2, #2
 800b6ce:	4093      	lsls	r3, r2
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d132      	bne.n	800b73c <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800b6d6:	4b49      	ldr	r3, [pc, #292]	@ (800b7fc <HAL_GPIO_DeInit+0x1dc>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	43db      	mvns	r3, r3
 800b6de:	4947      	ldr	r1, [pc, #284]	@ (800b7fc <HAL_GPIO_DeInit+0x1dc>)
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800b6e4:	4b45      	ldr	r3, [pc, #276]	@ (800b7fc <HAL_GPIO_DeInit+0x1dc>)
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	43db      	mvns	r3, r3
 800b6ec:	4943      	ldr	r1, [pc, #268]	@ (800b7fc <HAL_GPIO_DeInit+0x1dc>)
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800b6f2:	4b42      	ldr	r3, [pc, #264]	@ (800b7fc <HAL_GPIO_DeInit+0x1dc>)
 800b6f4:	68da      	ldr	r2, [r3, #12]
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	43db      	mvns	r3, r3
 800b6fa:	4940      	ldr	r1, [pc, #256]	@ (800b7fc <HAL_GPIO_DeInit+0x1dc>)
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800b700:	4b3e      	ldr	r3, [pc, #248]	@ (800b7fc <HAL_GPIO_DeInit+0x1dc>)
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	43db      	mvns	r3, r3
 800b708:	493c      	ldr	r1, [pc, #240]	@ (800b7fc <HAL_GPIO_DeInit+0x1dc>)
 800b70a:	4013      	ands	r3, r2
 800b70c:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f003 0303 	and.w	r3, r3, #3
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	220f      	movs	r2, #15
 800b718:	fa02 f303 	lsl.w	r3, r2, r3
 800b71c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800b71e:	4a2f      	ldr	r2, [pc, #188]	@ (800b7dc <HAL_GPIO_DeInit+0x1bc>)
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	089b      	lsrs	r3, r3, #2
 800b724:	3302      	adds	r3, #2
 800b726:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	43da      	mvns	r2, r3
 800b72e:	482b      	ldr	r0, [pc, #172]	@ (800b7dc <HAL_GPIO_DeInit+0x1bc>)
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	089b      	lsrs	r3, r3, #2
 800b734:	400a      	ands	r2, r1
 800b736:	3302      	adds	r3, #2
 800b738:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	2103      	movs	r1, #3
 800b746:	fa01 f303 	lsl.w	r3, r1, r3
 800b74a:	43db      	mvns	r3, r3
 800b74c:	401a      	ands	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	08da      	lsrs	r2, r3, #3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3208      	adds	r2, #8
 800b75a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f003 0307 	and.w	r3, r3, #7
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	220f      	movs	r2, #15
 800b768:	fa02 f303 	lsl.w	r3, r2, r3
 800b76c:	43db      	mvns	r3, r3
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	08d2      	lsrs	r2, r2, #3
 800b772:	4019      	ands	r1, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3208      	adds	r2, #8
 800b778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	68da      	ldr	r2, [r3, #12]
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	005b      	lsls	r3, r3, #1
 800b784:	2103      	movs	r1, #3
 800b786:	fa01 f303 	lsl.w	r3, r1, r3
 800b78a:	43db      	mvns	r3, r3
 800b78c:	401a      	ands	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685a      	ldr	r2, [r3, #4]
 800b796:	2101      	movs	r1, #1
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	fa01 f303 	lsl.w	r3, r1, r3
 800b79e:	43db      	mvns	r3, r3
 800b7a0:	401a      	ands	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	689a      	ldr	r2, [r3, #8]
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	2103      	movs	r1, #3
 800b7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b4:	43db      	mvns	r3, r3
 800b7b6:	401a      	ands	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f47f af34 	bne.w	800b638 <HAL_GPIO_DeInit+0x18>
  }
}
 800b7d0:	bf00      	nop
 800b7d2:	bf00      	nop
 800b7d4:	371c      	adds	r7, #28
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bc80      	pop	{r7}
 800b7da:	4770      	bx	lr
 800b7dc:	40010000 	.word	0x40010000
 800b7e0:	40020000 	.word	0x40020000
 800b7e4:	40020400 	.word	0x40020400
 800b7e8:	40020800 	.word	0x40020800
 800b7ec:	40020c00 	.word	0x40020c00
 800b7f0:	40021000 	.word	0x40021000
 800b7f4:	40021400 	.word	0x40021400
 800b7f8:	40021800 	.word	0x40021800
 800b7fc:	40010400 	.word	0x40010400

0800b800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	460b      	mov	r3, r1
 800b80a:	807b      	strh	r3, [r7, #2]
 800b80c:	4613      	mov	r3, r2
 800b80e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b810:	787b      	ldrb	r3, [r7, #1]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d003      	beq.n	800b81e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b816:	887a      	ldrh	r2, [r7, #2]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800b81c:	e003      	b.n	800b826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800b81e:	887b      	ldrh	r3, [r7, #2]
 800b820:	041a      	lsls	r2, r3, #16
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	619a      	str	r2, [r3, #24]
}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bc80      	pop	{r7}
 800b82e:	4770      	bx	lr

0800b830 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	695b      	ldr	r3, [r3, #20]
 800b840:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b842:	887a      	ldrh	r2, [r7, #2]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4013      	ands	r3, r2
 800b848:	041a      	lsls	r2, r3, #16
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	43d9      	mvns	r1, r3
 800b84e:	887b      	ldrh	r3, [r7, #2]
 800b850:	400b      	ands	r3, r1
 800b852:	431a      	orrs	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	619a      	str	r2, [r3, #24]
}
 800b858:	bf00      	nop
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bc80      	pop	{r7}
 800b860:	4770      	bx	lr
	...

0800b864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	4603      	mov	r3, r0
 800b86c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b86e:	4b08      	ldr	r3, [pc, #32]	@ (800b890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b870:	695a      	ldr	r2, [r3, #20]
 800b872:	88fb      	ldrh	r3, [r7, #6]
 800b874:	4013      	ands	r3, r2
 800b876:	2b00      	cmp	r3, #0
 800b878:	d006      	beq.n	800b888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b87a:	4a05      	ldr	r2, [pc, #20]	@ (800b890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b87c:	88fb      	ldrh	r3, [r7, #6]
 800b87e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b880:	88fb      	ldrh	r3, [r7, #6]
 800b882:	4618      	mov	r0, r3
 800b884:	f7f7 f8a0 	bl	80029c8 <HAL_GPIO_EXTI_Callback>
  }
}
 800b888:	bf00      	nop
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	40010400 	.word	0x40010400

0800b894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e12b      	b.n	800bafe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f95d 	bl	800bb7a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2224      	movs	r2, #36	@ 0x24
 800b8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f022 0201 	bic.w	r2, r2, #1
 800b8d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b8e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b8f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b8f8:	f001 fdac 	bl	800d454 <HAL_RCC_GetPCLK1Freq>
 800b8fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	4a81      	ldr	r2, [pc, #516]	@ (800bb08 <HAL_I2C_Init+0x274>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d807      	bhi.n	800b918 <HAL_I2C_Init+0x84>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	4a80      	ldr	r2, [pc, #512]	@ (800bb0c <HAL_I2C_Init+0x278>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	bf94      	ite	ls
 800b910:	2301      	movls	r3, #1
 800b912:	2300      	movhi	r3, #0
 800b914:	b2db      	uxtb	r3, r3
 800b916:	e006      	b.n	800b926 <HAL_I2C_Init+0x92>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4a7d      	ldr	r2, [pc, #500]	@ (800bb10 <HAL_I2C_Init+0x27c>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	bf94      	ite	ls
 800b920:	2301      	movls	r3, #1
 800b922:	2300      	movhi	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e0e7      	b.n	800bafe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4a78      	ldr	r2, [pc, #480]	@ (800bb14 <HAL_I2C_Init+0x280>)
 800b932:	fba2 2303 	umull	r2, r3, r2, r3
 800b936:	0c9b      	lsrs	r3, r3, #18
 800b938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	430a      	orrs	r2, r1
 800b94c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	4a6a      	ldr	r2, [pc, #424]	@ (800bb08 <HAL_I2C_Init+0x274>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d802      	bhi.n	800b968 <HAL_I2C_Init+0xd4>
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	3301      	adds	r3, #1
 800b966:	e009      	b.n	800b97c <HAL_I2C_Init+0xe8>
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b96e:	fb02 f303 	mul.w	r3, r2, r3
 800b972:	4a69      	ldr	r2, [pc, #420]	@ (800bb18 <HAL_I2C_Init+0x284>)
 800b974:	fba2 2303 	umull	r2, r3, r2, r3
 800b978:	099b      	lsrs	r3, r3, #6
 800b97a:	3301      	adds	r3, #1
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6812      	ldr	r2, [r2, #0]
 800b980:	430b      	orrs	r3, r1
 800b982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b98e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	495c      	ldr	r1, [pc, #368]	@ (800bb08 <HAL_I2C_Init+0x274>)
 800b998:	428b      	cmp	r3, r1
 800b99a:	d819      	bhi.n	800b9d0 <HAL_I2C_Init+0x13c>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	1e59      	subs	r1, r3, #1
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9aa:	1c59      	adds	r1, r3, #1
 800b9ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b9b0:	400b      	ands	r3, r1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00a      	beq.n	800b9cc <HAL_I2C_Init+0x138>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	1e59      	subs	r1, r3, #1
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9ca:	e051      	b.n	800ba70 <HAL_I2C_Init+0x1dc>
 800b9cc:	2304      	movs	r3, #4
 800b9ce:	e04f      	b.n	800ba70 <HAL_I2C_Init+0x1dc>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d111      	bne.n	800b9fc <HAL_I2C_Init+0x168>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	1e58      	subs	r0, r3, #1
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6859      	ldr	r1, [r3, #4]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	440b      	add	r3, r1
 800b9e6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bf0c      	ite	eq
 800b9f4:	2301      	moveq	r3, #1
 800b9f6:	2300      	movne	r3, #0
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	e012      	b.n	800ba22 <HAL_I2C_Init+0x18e>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	1e58      	subs	r0, r3, #1
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6859      	ldr	r1, [r3, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	440b      	add	r3, r1
 800ba0a:	0099      	lsls	r1, r3, #2
 800ba0c:	440b      	add	r3, r1
 800ba0e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba12:	3301      	adds	r3, #1
 800ba14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bf0c      	ite	eq
 800ba1c:	2301      	moveq	r3, #1
 800ba1e:	2300      	movne	r3, #0
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <HAL_I2C_Init+0x196>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e022      	b.n	800ba70 <HAL_I2C_Init+0x1dc>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d10e      	bne.n	800ba50 <HAL_I2C_Init+0x1bc>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	1e58      	subs	r0, r3, #1
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6859      	ldr	r1, [r3, #4]
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	440b      	add	r3, r1
 800ba40:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba44:	3301      	adds	r3, #1
 800ba46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba4e:	e00f      	b.n	800ba70 <HAL_I2C_Init+0x1dc>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	1e58      	subs	r0, r3, #1
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6859      	ldr	r1, [r3, #4]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	440b      	add	r3, r1
 800ba5e:	0099      	lsls	r1, r3, #2
 800ba60:	440b      	add	r3, r1
 800ba62:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba66:	3301      	adds	r3, #1
 800ba68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba70:	6879      	ldr	r1, [r7, #4]
 800ba72:	6809      	ldr	r1, [r1, #0]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	69da      	ldr	r2, [r3, #28]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a1b      	ldr	r3, [r3, #32]
 800ba8a:	431a      	orrs	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	430a      	orrs	r2, r1
 800ba92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800ba9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	6911      	ldr	r1, [r2, #16]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	68d2      	ldr	r2, [r2, #12]
 800baaa:	4311      	orrs	r1, r2
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	6812      	ldr	r2, [r2, #0]
 800bab0:	430b      	orrs	r3, r1
 800bab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	695a      	ldr	r2, [r3, #20]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	431a      	orrs	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	430a      	orrs	r2, r1
 800bace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f042 0201 	orr.w	r2, r2, #1
 800bade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2220      	movs	r2, #32
 800baea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	000186a0 	.word	0x000186a0
 800bb0c:	001e847f 	.word	0x001e847f
 800bb10:	003d08ff 	.word	0x003d08ff
 800bb14:	431bde83 	.word	0x431bde83
 800bb18:	10624dd3 	.word	0x10624dd3

0800bb1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e021      	b.n	800bb72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2224      	movs	r2, #36	@ 0x24
 800bb32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f022 0201 	bic.w	r2, r2, #1
 800bb44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f820 	bl	800bb8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800bb82:	bf00      	nop
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bc80      	pop	{r7}
 800bb8a:	4770      	bx	lr

0800bb8c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800bb94:	bf00      	nop
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bc80      	pop	{r7}
 800bb9c:	4770      	bx	lr
	...

0800bba0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af02      	add	r7, sp, #8
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	4608      	mov	r0, r1
 800bbaa:	4611      	mov	r1, r2
 800bbac:	461a      	mov	r2, r3
 800bbae:	4603      	mov	r3, r0
 800bbb0:	817b      	strh	r3, [r7, #10]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	813b      	strh	r3, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bbba:	f7fe fc6f 	bl	800a49c <HAL_GetTick>
 800bbbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b20      	cmp	r3, #32
 800bbca:	f040 80d9 	bne.w	800bd80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	2319      	movs	r3, #25
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	496d      	ldr	r1, [pc, #436]	@ (800bd8c <HAL_I2C_Mem_Write+0x1ec>)
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 fc97 	bl	800c50c <I2C_WaitOnFlagUntilTimeout>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	e0cc      	b.n	800bd82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d101      	bne.n	800bbf6 <HAL_I2C_Mem_Write+0x56>
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	e0c5      	b.n	800bd82 <HAL_I2C_Mem_Write+0x1e2>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 0301 	and.w	r3, r3, #1
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d007      	beq.n	800bc1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f042 0201 	orr.w	r2, r2, #1
 800bc1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bc2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2221      	movs	r2, #33	@ 0x21
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2240      	movs	r2, #64	@ 0x40
 800bc38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6a3a      	ldr	r2, [r7, #32]
 800bc46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bc4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4a4d      	ldr	r2, [pc, #308]	@ (800bd90 <HAL_I2C_Mem_Write+0x1f0>)
 800bc5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bc5e:	88f8      	ldrh	r0, [r7, #6]
 800bc60:	893a      	ldrh	r2, [r7, #8]
 800bc62:	8979      	ldrh	r1, [r7, #10]
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	9301      	str	r3, [sp, #4]
 800bc68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f000 face 	bl	800c210 <I2C_RequestMemoryWrite>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d052      	beq.n	800bd20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e081      	b.n	800bd82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f000 fd5c 	bl	800c740 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00d      	beq.n	800bcaa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc92:	2b04      	cmp	r3, #4
 800bc94:	d107      	bne.n	800bca6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e06b      	b.n	800bd82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcae:	781a      	ldrb	r2, [r3, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	d11b      	bne.n	800bd20 <HAL_I2C_Mem_Write+0x180>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d017      	beq.n	800bd20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf4:	781a      	ldrb	r2, [r3, #0]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd00:	1c5a      	adds	r2, r3, #1
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1aa      	bne.n	800bc7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 fd4f 	bl	800c7d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00d      	beq.n	800bd54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd3c:	2b04      	cmp	r3, #4
 800bd3e:	d107      	bne.n	800bd50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e016      	b.n	800bd82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2220      	movs	r2, #32
 800bd68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	e000      	b.n	800bd82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800bd80:	2302      	movs	r3, #2
  }
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	00100002 	.word	0x00100002
 800bd90:	ffff0000 	.word	0xffff0000

0800bd94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b08c      	sub	sp, #48	@ 0x30
 800bd98:	af02      	add	r7, sp, #8
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	4608      	mov	r0, r1
 800bd9e:	4611      	mov	r1, r2
 800bda0:	461a      	mov	r2, r3
 800bda2:	4603      	mov	r3, r0
 800bda4:	817b      	strh	r3, [r7, #10]
 800bda6:	460b      	mov	r3, r1
 800bda8:	813b      	strh	r3, [r7, #8]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bdae:	f7fe fb75 	bl	800a49c <HAL_GetTick>
 800bdb2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	2b20      	cmp	r3, #32
 800bdbe:	f040 8208 	bne.w	800c1d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	2319      	movs	r3, #25
 800bdc8:	2201      	movs	r2, #1
 800bdca:	497b      	ldr	r1, [pc, #492]	@ (800bfb8 <HAL_I2C_Mem_Read+0x224>)
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 fb9d 	bl	800c50c <I2C_WaitOnFlagUntilTimeout>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d001      	beq.n	800bddc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800bdd8:	2302      	movs	r3, #2
 800bdda:	e1fb      	b.n	800c1d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d101      	bne.n	800bdea <HAL_I2C_Mem_Read+0x56>
 800bde6:	2302      	movs	r3, #2
 800bde8:	e1f4      	b.n	800c1d4 <HAL_I2C_Mem_Read+0x440>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d007      	beq.n	800be10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f042 0201 	orr.w	r2, r2, #1
 800be0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2222      	movs	r2, #34	@ 0x22
 800be24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2240      	movs	r2, #64	@ 0x40
 800be2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800be40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be46:	b29a      	uxth	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4a5b      	ldr	r2, [pc, #364]	@ (800bfbc <HAL_I2C_Mem_Read+0x228>)
 800be50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800be52:	88f8      	ldrh	r0, [r7, #6]
 800be54:	893a      	ldrh	r2, [r7, #8]
 800be56:	8979      	ldrh	r1, [r7, #10]
 800be58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	4603      	mov	r3, r0
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f000 fa6a 	bl	800c33c <I2C_RequestMemoryRead>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d001      	beq.n	800be72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	e1b0      	b.n	800c1d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be76:	2b00      	cmp	r3, #0
 800be78:	d113      	bne.n	800bea2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be7a:	2300      	movs	r3, #0
 800be7c:	623b      	str	r3, [r7, #32]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	695b      	ldr	r3, [r3, #20]
 800be84:	623b      	str	r3, [r7, #32]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	699b      	ldr	r3, [r3, #24]
 800be8c:	623b      	str	r3, [r7, #32]
 800be8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	e184      	b.n	800c1ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d11b      	bne.n	800bee2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800beb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800beba:	2300      	movs	r3, #0
 800bebc:	61fb      	str	r3, [r7, #28]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	61fb      	str	r3, [r7, #28]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	61fb      	str	r3, [r7, #28]
 800bece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bede:	601a      	str	r2, [r3, #0]
 800bee0:	e164      	b.n	800c1ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	d11b      	bne.n	800bf22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bef8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	61bb      	str	r3, [r7, #24]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	695b      	ldr	r3, [r3, #20]
 800bf14:	61bb      	str	r3, [r7, #24]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	61bb      	str	r3, [r7, #24]
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	e144      	b.n	800c1ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf22:	2300      	movs	r3, #0
 800bf24:	617b      	str	r3, [r7, #20]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	617b      	str	r3, [r7, #20]
 800bf36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bf38:	e138      	b.n	800c1ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	f200 80f1 	bhi.w	800c126 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d123      	bne.n	800bf94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f000 fc85 	bl	800c860 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e139      	b.n	800c1d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	691a      	ldr	r2, [r3, #16]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf6a:	b2d2      	uxtb	r2, r2
 800bf6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf72:	1c5a      	adds	r2, r3, #1
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bf92:	e10b      	b.n	800c1ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d14e      	bne.n	800c03a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4906      	ldr	r1, [pc, #24]	@ (800bfc0 <HAL_I2C_Mem_Read+0x22c>)
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f000 fab0 	bl	800c50c <I2C_WaitOnFlagUntilTimeout>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d008      	beq.n	800bfc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e10e      	b.n	800c1d4 <HAL_I2C_Mem_Read+0x440>
 800bfb6:	bf00      	nop
 800bfb8:	00100002 	.word	0x00100002
 800bfbc:	ffff0000 	.word	0xffff0000
 800bfc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	691a      	ldr	r2, [r3, #16]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfde:	b2d2      	uxtb	r2, r2
 800bfe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bff0:	3b01      	subs	r3, #1
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	3b01      	subs	r3, #1
 800c000:	b29a      	uxth	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	691a      	ldr	r2, [r3, #16]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c010:	b2d2      	uxtb	r2, r2
 800c012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c018:	1c5a      	adds	r2, r3, #1
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c022:	3b01      	subs	r3, #1
 800c024:	b29a      	uxth	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c02e:	b29b      	uxth	r3, r3
 800c030:	3b01      	subs	r3, #1
 800c032:	b29a      	uxth	r2, r3
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c038:	e0b8      	b.n	800c1ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c040:	2200      	movs	r2, #0
 800c042:	4966      	ldr	r1, [pc, #408]	@ (800c1dc <HAL_I2C_Mem_Read+0x448>)
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 fa61 	bl	800c50c <I2C_WaitOnFlagUntilTimeout>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d001      	beq.n	800c054 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e0bf      	b.n	800c1d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	691a      	ldr	r2, [r3, #16]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c080:	3b01      	subs	r3, #1
 800c082:	b29a      	uxth	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	3b01      	subs	r3, #1
 800c090:	b29a      	uxth	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c09c:	2200      	movs	r2, #0
 800c09e:	494f      	ldr	r1, [pc, #316]	@ (800c1dc <HAL_I2C_Mem_Read+0x448>)
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f000 fa33 	bl	800c50c <I2C_WaitOnFlagUntilTimeout>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e091      	b.n	800c1d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	691a      	ldr	r2, [r3, #16]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ca:	b2d2      	uxtb	r2, r2
 800c0cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d2:	1c5a      	adds	r2, r3, #1
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	691a      	ldr	r2, [r3, #16]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0fc:	b2d2      	uxtb	r2, r2
 800c0fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c10e:	3b01      	subs	r3, #1
 800c110:	b29a      	uxth	r2, r3
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	3b01      	subs	r3, #1
 800c11e:	b29a      	uxth	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c124:	e042      	b.n	800c1ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c128:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f000 fb98 	bl	800c860 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	e04c      	b.n	800c1d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	691a      	ldr	r2, [r3, #16]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c144:	b2d2      	uxtb	r2, r2
 800c146:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c156:	3b01      	subs	r3, #1
 800c158:	b29a      	uxth	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c162:	b29b      	uxth	r3, r3
 800c164:	3b01      	subs	r3, #1
 800c166:	b29a      	uxth	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	695b      	ldr	r3, [r3, #20]
 800c172:	f003 0304 	and.w	r3, r3, #4
 800c176:	2b04      	cmp	r3, #4
 800c178:	d118      	bne.n	800c1ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	691a      	ldr	r2, [r3, #16]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c184:	b2d2      	uxtb	r2, r2
 800c186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c18c:	1c5a      	adds	r2, r3, #1
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c196:	3b01      	subs	r3, #1
 800c198:	b29a      	uxth	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f47f aec2 	bne.w	800bf3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e000      	b.n	800c1d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c1d2:	2302      	movs	r3, #2
  }
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3728      	adds	r7, #40	@ 0x28
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	00010004 	.word	0x00010004

0800c1e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1ee:	b2db      	uxtb	r3, r3
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bc80      	pop	{r7}
 800c1f8:	4770      	bx	lr

0800c1fa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	b083      	sub	sp, #12
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c206:	4618      	mov	r0, r3
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bc80      	pop	{r7}
 800c20e:	4770      	bx	lr

0800c210 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b088      	sub	sp, #32
 800c214:	af02      	add	r7, sp, #8
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	4608      	mov	r0, r1
 800c21a:	4611      	mov	r1, r2
 800c21c:	461a      	mov	r2, r3
 800c21e:	4603      	mov	r3, r0
 800c220:	817b      	strh	r3, [r7, #10]
 800c222:	460b      	mov	r3, r1
 800c224:	813b      	strh	r3, [r7, #8]
 800c226:	4613      	mov	r3, r2
 800c228:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c238:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	6a3b      	ldr	r3, [r7, #32]
 800c240:	2200      	movs	r2, #0
 800c242:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f000 f960 	bl	800c50c <I2C_WaitOnFlagUntilTimeout>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00d      	beq.n	800c26e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c25c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c260:	d103      	bne.n	800c26a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c268:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	e05f      	b.n	800c32e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c26e:	897b      	ldrh	r3, [r7, #10]
 800c270:	b2db      	uxtb	r3, r3
 800c272:	461a      	mov	r2, r3
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c27c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c280:	6a3a      	ldr	r2, [r7, #32]
 800c282:	492d      	ldr	r1, [pc, #180]	@ (800c338 <I2C_RequestMemoryWrite+0x128>)
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f000 f9bb 	bl	800c600 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d001      	beq.n	800c294 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	e04c      	b.n	800c32e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c294:	2300      	movs	r3, #0
 800c296:	617b      	str	r3, [r7, #20]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	617b      	str	r3, [r7, #20]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	617b      	str	r3, [r7, #20]
 800c2a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2ac:	6a39      	ldr	r1, [r7, #32]
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 fa46 	bl	800c740 <I2C_WaitOnTXEFlagUntilTimeout>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00d      	beq.n	800c2d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2be:	2b04      	cmp	r3, #4
 800c2c0:	d107      	bne.n	800c2d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e02b      	b.n	800c32e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c2d6:	88fb      	ldrh	r3, [r7, #6]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d105      	bne.n	800c2e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c2dc:	893b      	ldrh	r3, [r7, #8]
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	611a      	str	r2, [r3, #16]
 800c2e6:	e021      	b.n	800c32c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c2e8:	893b      	ldrh	r3, [r7, #8]
 800c2ea:	0a1b      	lsrs	r3, r3, #8
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2f8:	6a39      	ldr	r1, [r7, #32]
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f000 fa20 	bl	800c740 <I2C_WaitOnTXEFlagUntilTimeout>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00d      	beq.n	800c322 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c30a:	2b04      	cmp	r3, #4
 800c30c:	d107      	bne.n	800c31e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c31c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	e005      	b.n	800c32e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c322:	893b      	ldrh	r3, [r7, #8]
 800c324:	b2da      	uxtb	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3718      	adds	r7, #24
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	00010002 	.word	0x00010002

0800c33c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af02      	add	r7, sp, #8
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	4608      	mov	r0, r1
 800c346:	4611      	mov	r1, r2
 800c348:	461a      	mov	r2, r3
 800c34a:	4603      	mov	r3, r0
 800c34c:	817b      	strh	r3, [r7, #10]
 800c34e:	460b      	mov	r3, r1
 800c350:	813b      	strh	r3, [r7, #8]
 800c352:	4613      	mov	r3, r2
 800c354:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c364:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f000 f8c2 	bl	800c50c <I2C_WaitOnFlagUntilTimeout>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00d      	beq.n	800c3aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c39c:	d103      	bne.n	800c3a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e0aa      	b.n	800c500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c3aa:	897b      	ldrh	r3, [r7, #10]
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c3b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3bc:	6a3a      	ldr	r2, [r7, #32]
 800c3be:	4952      	ldr	r1, [pc, #328]	@ (800c508 <I2C_RequestMemoryRead+0x1cc>)
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f000 f91d 	bl	800c600 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d001      	beq.n	800c3d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e097      	b.n	800c500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	617b      	str	r3, [r7, #20]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	617b      	str	r3, [r7, #20]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	617b      	str	r3, [r7, #20]
 800c3e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3e8:	6a39      	ldr	r1, [r7, #32]
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f000 f9a8 	bl	800c740 <I2C_WaitOnTXEFlagUntilTimeout>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00d      	beq.n	800c412 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3fa:	2b04      	cmp	r3, #4
 800c3fc:	d107      	bne.n	800c40e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c40c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e076      	b.n	800c500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c412:	88fb      	ldrh	r3, [r7, #6]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d105      	bne.n	800c424 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c418:	893b      	ldrh	r3, [r7, #8]
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	611a      	str	r2, [r3, #16]
 800c422:	e021      	b.n	800c468 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c424:	893b      	ldrh	r3, [r7, #8]
 800c426:	0a1b      	lsrs	r3, r3, #8
 800c428:	b29b      	uxth	r3, r3
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c434:	6a39      	ldr	r1, [r7, #32]
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f000 f982 	bl	800c740 <I2C_WaitOnTXEFlagUntilTimeout>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00d      	beq.n	800c45e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c446:	2b04      	cmp	r3, #4
 800c448:	d107      	bne.n	800c45a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	e050      	b.n	800c500 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c45e:	893b      	ldrh	r3, [r7, #8]
 800c460:	b2da      	uxtb	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c46a:	6a39      	ldr	r1, [r7, #32]
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 f967 	bl	800c740 <I2C_WaitOnTXEFlagUntilTimeout>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00d      	beq.n	800c494 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c47c:	2b04      	cmp	r3, #4
 800c47e:	d107      	bne.n	800c490 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c48e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e035      	b.n	800c500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c4a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	6a3b      	ldr	r3, [r7, #32]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f000 f82b 	bl	800c50c <I2C_WaitOnFlagUntilTimeout>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00d      	beq.n	800c4d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4ca:	d103      	bne.n	800c4d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	e013      	b.n	800c500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c4d8:	897b      	ldrh	r3, [r7, #10]
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	f043 0301 	orr.w	r3, r3, #1
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ea:	6a3a      	ldr	r2, [r7, #32]
 800c4ec:	4906      	ldr	r1, [pc, #24]	@ (800c508 <I2C_RequestMemoryRead+0x1cc>)
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 f886 	bl	800c600 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d001      	beq.n	800c4fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e000      	b.n	800c500 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	00010002 	.word	0x00010002

0800c50c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	603b      	str	r3, [r7, #0]
 800c518:	4613      	mov	r3, r2
 800c51a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c51c:	e048      	b.n	800c5b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c524:	d044      	beq.n	800c5b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c526:	f7fd ffb9 	bl	800a49c <HAL_GetTick>
 800c52a:	4602      	mov	r2, r0
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	429a      	cmp	r2, r3
 800c534:	d302      	bcc.n	800c53c <I2C_WaitOnFlagUntilTimeout+0x30>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d139      	bne.n	800c5b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	0c1b      	lsrs	r3, r3, #16
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b01      	cmp	r3, #1
 800c544:	d10d      	bne.n	800c562 <I2C_WaitOnFlagUntilTimeout+0x56>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	695b      	ldr	r3, [r3, #20]
 800c54c:	43da      	mvns	r2, r3
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	4013      	ands	r3, r2
 800c552:	b29b      	uxth	r3, r3
 800c554:	2b00      	cmp	r3, #0
 800c556:	bf0c      	ite	eq
 800c558:	2301      	moveq	r3, #1
 800c55a:	2300      	movne	r3, #0
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	461a      	mov	r2, r3
 800c560:	e00c      	b.n	800c57c <I2C_WaitOnFlagUntilTimeout+0x70>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	699b      	ldr	r3, [r3, #24]
 800c568:	43da      	mvns	r2, r3
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	4013      	ands	r3, r2
 800c56e:	b29b      	uxth	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	bf0c      	ite	eq
 800c574:	2301      	moveq	r3, #1
 800c576:	2300      	movne	r3, #0
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	79fb      	ldrb	r3, [r7, #7]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d116      	bne.n	800c5b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2220      	movs	r2, #32
 800c58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c59c:	f043 0220 	orr.w	r2, r3, #32
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e023      	b.n	800c5f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	0c1b      	lsrs	r3, r3, #16
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d10d      	bne.n	800c5d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	43da      	mvns	r2, r3
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	bf0c      	ite	eq
 800c5cc:	2301      	moveq	r3, #1
 800c5ce:	2300      	movne	r3, #0
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	e00c      	b.n	800c5f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	699b      	ldr	r3, [r3, #24]
 800c5dc:	43da      	mvns	r2, r3
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	4013      	ands	r3, r2
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	bf0c      	ite	eq
 800c5e8:	2301      	moveq	r3, #1
 800c5ea:	2300      	movne	r3, #0
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	79fb      	ldrb	r3, [r7, #7]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d093      	beq.n	800c51e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c60e:	e071      	b.n	800c6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	695b      	ldr	r3, [r3, #20]
 800c616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c61a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c61e:	d123      	bne.n	800c668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c62e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2220      	movs	r2, #32
 800c644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c654:	f043 0204 	orr.w	r2, r3, #4
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e067      	b.n	800c738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c66e:	d041      	beq.n	800c6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c670:	f7fd ff14 	bl	800a49c <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d302      	bcc.n	800c686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d136      	bne.n	800c6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	0c1b      	lsrs	r3, r3, #16
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d10c      	bne.n	800c6aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	43da      	mvns	r2, r3
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	4013      	ands	r3, r2
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	bf14      	ite	ne
 800c6a2:	2301      	movne	r3, #1
 800c6a4:	2300      	moveq	r3, #0
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	e00b      	b.n	800c6c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	43da      	mvns	r2, r3
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	bf14      	ite	ne
 800c6bc:	2301      	movne	r3, #1
 800c6be:	2300      	moveq	r3, #0
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d016      	beq.n	800c6f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2220      	movs	r2, #32
 800c6d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6e0:	f043 0220 	orr.w	r2, r3, #32
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e021      	b.n	800c738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	0c1b      	lsrs	r3, r3, #16
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d10c      	bne.n	800c718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	695b      	ldr	r3, [r3, #20]
 800c704:	43da      	mvns	r2, r3
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	4013      	ands	r3, r2
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	bf14      	ite	ne
 800c710:	2301      	movne	r3, #1
 800c712:	2300      	moveq	r3, #0
 800c714:	b2db      	uxtb	r3, r3
 800c716:	e00b      	b.n	800c730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	43da      	mvns	r2, r3
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	4013      	ands	r3, r2
 800c724:	b29b      	uxth	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	bf14      	ite	ne
 800c72a:	2301      	movne	r3, #1
 800c72c:	2300      	moveq	r3, #0
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	2b00      	cmp	r3, #0
 800c732:	f47f af6d 	bne.w	800c610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c74c:	e034      	b.n	800c7b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f000 f8e3 	bl	800c91a <I2C_IsAcknowledgeFailed>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d001      	beq.n	800c75e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e034      	b.n	800c7c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c764:	d028      	beq.n	800c7b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c766:	f7fd fe99 	bl	800a49c <HAL_GetTick>
 800c76a:	4602      	mov	r2, r0
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	429a      	cmp	r2, r3
 800c774:	d302      	bcc.n	800c77c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d11d      	bne.n	800c7b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	695b      	ldr	r3, [r3, #20]
 800c782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c786:	2b80      	cmp	r3, #128	@ 0x80
 800c788:	d016      	beq.n	800c7b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2220      	movs	r2, #32
 800c794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7a4:	f043 0220 	orr.w	r2, r3, #32
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e007      	b.n	800c7c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	695b      	ldr	r3, [r3, #20]
 800c7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7c2:	2b80      	cmp	r3, #128	@ 0x80
 800c7c4:	d1c3      	bne.n	800c74e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c7dc:	e034      	b.n	800c848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f000 f89b 	bl	800c91a <I2C_IsAcknowledgeFailed>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d001      	beq.n	800c7ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e034      	b.n	800c858 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f4:	d028      	beq.n	800c848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7f6:	f7fd fe51 	bl	800a49c <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	429a      	cmp	r2, r3
 800c804:	d302      	bcc.n	800c80c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d11d      	bne.n	800c848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	695b      	ldr	r3, [r3, #20]
 800c812:	f003 0304 	and.w	r3, r3, #4
 800c816:	2b04      	cmp	r3, #4
 800c818:	d016      	beq.n	800c848 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2220      	movs	r2, #32
 800c824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c834:	f043 0220 	orr.w	r2, r3, #32
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2200      	movs	r2, #0
 800c840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	e007      	b.n	800c858 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	f003 0304 	and.w	r3, r3, #4
 800c852:	2b04      	cmp	r3, #4
 800c854:	d1c3      	bne.n	800c7de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c86c:	e049      	b.n	800c902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	695b      	ldr	r3, [r3, #20]
 800c874:	f003 0310 	and.w	r3, r3, #16
 800c878:	2b10      	cmp	r3, #16
 800c87a:	d119      	bne.n	800c8b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f06f 0210 	mvn.w	r2, #16
 800c884:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2220      	movs	r2, #32
 800c890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e030      	b.n	800c912 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8b0:	f7fd fdf4 	bl	800a49c <HAL_GetTick>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d302      	bcc.n	800c8c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d11d      	bne.n	800c902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	695b      	ldr	r3, [r3, #20]
 800c8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8d0:	2b40      	cmp	r3, #64	@ 0x40
 800c8d2:	d016      	beq.n	800c902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ee:	f043 0220 	orr.w	r2, r3, #32
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	e007      	b.n	800c912 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c90c:	2b40      	cmp	r3, #64	@ 0x40
 800c90e:	d1ae      	bne.n	800c86e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c91a:	b480      	push	{r7}
 800c91c:	b083      	sub	sp, #12
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	695b      	ldr	r3, [r3, #20]
 800c928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c92c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c930:	d11b      	bne.n	800c96a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c93a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2220      	movs	r2, #32
 800c946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c956:	f043 0204 	orr.w	r2, r3, #4
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	e000      	b.n	800c96c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	bc80      	pop	{r7}
 800c974:	4770      	bx	lr
	...

0800c978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b088      	sub	sp, #32
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e31d      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c98a:	4b94      	ldr	r3, [pc, #592]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	f003 030c 	and.w	r3, r3, #12
 800c992:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c994:	4b91      	ldr	r3, [pc, #580]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c99c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f003 0301 	and.w	r3, r3, #1
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d07b      	beq.n	800caa2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	2b08      	cmp	r3, #8
 800c9ae:	d006      	beq.n	800c9be <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	2b0c      	cmp	r3, #12
 800c9b4:	d10f      	bne.n	800c9d6 <HAL_RCC_OscConfig+0x5e>
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9bc:	d10b      	bne.n	800c9d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9be:	4b87      	ldr	r3, [pc, #540]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d06a      	beq.n	800caa0 <HAL_RCC_OscConfig+0x128>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d166      	bne.n	800caa0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e2f7      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d106      	bne.n	800c9ec <HAL_RCC_OscConfig+0x74>
 800c9de:	4b7f      	ldr	r3, [pc, #508]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a7e      	ldr	r2, [pc, #504]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800c9e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	e02d      	b.n	800ca48 <HAL_RCC_OscConfig+0xd0>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10c      	bne.n	800ca0e <HAL_RCC_OscConfig+0x96>
 800c9f4:	4b79      	ldr	r3, [pc, #484]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a78      	ldr	r2, [pc, #480]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800c9fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9fe:	6013      	str	r3, [r2, #0]
 800ca00:	4b76      	ldr	r3, [pc, #472]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a75      	ldr	r2, [pc, #468]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	e01c      	b.n	800ca48 <HAL_RCC_OscConfig+0xd0>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	2b05      	cmp	r3, #5
 800ca14:	d10c      	bne.n	800ca30 <HAL_RCC_OscConfig+0xb8>
 800ca16:	4b71      	ldr	r3, [pc, #452]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a70      	ldr	r2, [pc, #448]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ca20:	6013      	str	r3, [r2, #0]
 800ca22:	4b6e      	ldr	r3, [pc, #440]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a6d      	ldr	r2, [pc, #436]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca2c:	6013      	str	r3, [r2, #0]
 800ca2e:	e00b      	b.n	800ca48 <HAL_RCC_OscConfig+0xd0>
 800ca30:	4b6a      	ldr	r3, [pc, #424]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a69      	ldr	r2, [pc, #420]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca3a:	6013      	str	r3, [r2, #0]
 800ca3c:	4b67      	ldr	r3, [pc, #412]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a66      	ldr	r2, [pc, #408]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d013      	beq.n	800ca78 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca50:	f7fd fd24 	bl	800a49c <HAL_GetTick>
 800ca54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ca56:	e008      	b.n	800ca6a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca58:	f7fd fd20 	bl	800a49c <HAL_GetTick>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	2b64      	cmp	r3, #100	@ 0x64
 800ca64:	d901      	bls.n	800ca6a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800ca66:	2303      	movs	r3, #3
 800ca68:	e2ad      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ca6a:	4b5c      	ldr	r3, [pc, #368]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0f0      	beq.n	800ca58 <HAL_RCC_OscConfig+0xe0>
 800ca76:	e014      	b.n	800caa2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca78:	f7fd fd10 	bl	800a49c <HAL_GetTick>
 800ca7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ca7e:	e008      	b.n	800ca92 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca80:	f7fd fd0c 	bl	800a49c <HAL_GetTick>
 800ca84:	4602      	mov	r2, r0
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	2b64      	cmp	r3, #100	@ 0x64
 800ca8c:	d901      	bls.n	800ca92 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e299      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ca92:	4b52      	ldr	r3, [pc, #328]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1f0      	bne.n	800ca80 <HAL_RCC_OscConfig+0x108>
 800ca9e:	e000      	b.n	800caa2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800caa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 0302 	and.w	r3, r3, #2
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d05a      	beq.n	800cb64 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	2b04      	cmp	r3, #4
 800cab2:	d005      	beq.n	800cac0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	2b0c      	cmp	r3, #12
 800cab8:	d119      	bne.n	800caee <HAL_RCC_OscConfig+0x176>
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d116      	bne.n	800caee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cac0:	4b46      	ldr	r3, [pc, #280]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 0302 	and.w	r3, r3, #2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d005      	beq.n	800cad8 <HAL_RCC_OscConfig+0x160>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d001      	beq.n	800cad8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	e276      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cad8:	4b40      	ldr	r3, [pc, #256]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	021b      	lsls	r3, r3, #8
 800cae6:	493d      	ldr	r1, [pc, #244]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cae8:	4313      	orrs	r3, r2
 800caea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800caec:	e03a      	b.n	800cb64 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d020      	beq.n	800cb38 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800caf6:	4b3a      	ldr	r3, [pc, #232]	@ (800cbe0 <HAL_RCC_OscConfig+0x268>)
 800caf8:	2201      	movs	r2, #1
 800cafa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cafc:	f7fd fcce 	bl	800a49c <HAL_GetTick>
 800cb00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb02:	e008      	b.n	800cb16 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb04:	f7fd fcca 	bl	800a49c <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d901      	bls.n	800cb16 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cb12:	2303      	movs	r3, #3
 800cb14:	e257      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb16:	4b31      	ldr	r3, [pc, #196]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f003 0302 	and.w	r3, r3, #2
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d0f0      	beq.n	800cb04 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb22:	4b2e      	ldr	r3, [pc, #184]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	691b      	ldr	r3, [r3, #16]
 800cb2e:	021b      	lsls	r3, r3, #8
 800cb30:	492a      	ldr	r1, [pc, #168]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	604b      	str	r3, [r1, #4]
 800cb36:	e015      	b.n	800cb64 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb38:	4b29      	ldr	r3, [pc, #164]	@ (800cbe0 <HAL_RCC_OscConfig+0x268>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb3e:	f7fd fcad 	bl	800a49c <HAL_GetTick>
 800cb42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cb44:	e008      	b.n	800cb58 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb46:	f7fd fca9 	bl	800a49c <HAL_GetTick>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d901      	bls.n	800cb58 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800cb54:	2303      	movs	r3, #3
 800cb56:	e236      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cb58:	4b20      	ldr	r3, [pc, #128]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 0302 	and.w	r3, r3, #2
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1f0      	bne.n	800cb46 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0310 	and.w	r3, r3, #16
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 80b8 	beq.w	800cce2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d170      	bne.n	800cc5a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800cb78:	4b18      	ldr	r3, [pc, #96]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d005      	beq.n	800cb90 <HAL_RCC_OscConfig+0x218>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	699b      	ldr	r3, [r3, #24]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e21a      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6a1a      	ldr	r2, [r3, #32]
 800cb94:	4b11      	ldr	r3, [pc, #68]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d921      	bls.n	800cbe4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a1b      	ldr	r3, [r3, #32]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 fc7d 	bl	800d4a4 <RCC_SetFlashLatencyFromMSIRange>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d001      	beq.n	800cbb4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e208      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cbb4:	4b09      	ldr	r3, [pc, #36]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	4906      	ldr	r1, [pc, #24]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cbc6:	4b05      	ldr	r3, [pc, #20]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	69db      	ldr	r3, [r3, #28]
 800cbd2:	061b      	lsls	r3, r3, #24
 800cbd4:	4901      	ldr	r1, [pc, #4]	@ (800cbdc <HAL_RCC_OscConfig+0x264>)
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	604b      	str	r3, [r1, #4]
 800cbda:	e020      	b.n	800cc1e <HAL_RCC_OscConfig+0x2a6>
 800cbdc:	40023800 	.word	0x40023800
 800cbe0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cbe4:	4b99      	ldr	r3, [pc, #612]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	4996      	ldr	r1, [pc, #600]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cbf6:	4b95      	ldr	r3, [pc, #596]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	69db      	ldr	r3, [r3, #28]
 800cc02:	061b      	lsls	r3, r3, #24
 800cc04:	4991      	ldr	r1, [pc, #580]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cc06:	4313      	orrs	r3, r2
 800cc08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a1b      	ldr	r3, [r3, #32]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 fc48 	bl	800d4a4 <RCC_SetFlashLatencyFromMSIRange>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d001      	beq.n	800cc1e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e1d3      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	0b5b      	lsrs	r3, r3, #13
 800cc24:	3301      	adds	r3, #1
 800cc26:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800cc2a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800cc2e:	4a87      	ldr	r2, [pc, #540]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cc30:	6892      	ldr	r2, [r2, #8]
 800cc32:	0912      	lsrs	r2, r2, #4
 800cc34:	f002 020f 	and.w	r2, r2, #15
 800cc38:	4985      	ldr	r1, [pc, #532]	@ (800ce50 <HAL_RCC_OscConfig+0x4d8>)
 800cc3a:	5c8a      	ldrb	r2, [r1, r2]
 800cc3c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800cc3e:	4a85      	ldr	r2, [pc, #532]	@ (800ce54 <HAL_RCC_OscConfig+0x4dc>)
 800cc40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800cc42:	4b85      	ldr	r3, [pc, #532]	@ (800ce58 <HAL_RCC_OscConfig+0x4e0>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fd fbdc 	bl	800a404 <HAL_InitTick>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d045      	beq.n	800cce2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
 800cc58:	e1b5      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	699b      	ldr	r3, [r3, #24]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d029      	beq.n	800ccb6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800cc62:	4b7e      	ldr	r3, [pc, #504]	@ (800ce5c <HAL_RCC_OscConfig+0x4e4>)
 800cc64:	2201      	movs	r2, #1
 800cc66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc68:	f7fd fc18 	bl	800a49c <HAL_GetTick>
 800cc6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800cc6e:	e008      	b.n	800cc82 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cc70:	f7fd fc14 	bl	800a49c <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d901      	bls.n	800cc82 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	e1a1      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800cc82:	4b72      	ldr	r3, [pc, #456]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0f0      	beq.n	800cc70 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cc8e:	4b6f      	ldr	r3, [pc, #444]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	496c      	ldr	r1, [pc, #432]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cca0:	4b6a      	ldr	r3, [pc, #424]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	69db      	ldr	r3, [r3, #28]
 800ccac:	061b      	lsls	r3, r3, #24
 800ccae:	4967      	ldr	r1, [pc, #412]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	604b      	str	r3, [r1, #4]
 800ccb4:	e015      	b.n	800cce2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ccb6:	4b69      	ldr	r3, [pc, #420]	@ (800ce5c <HAL_RCC_OscConfig+0x4e4>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ccbc:	f7fd fbee 	bl	800a49c <HAL_GetTick>
 800ccc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ccc2:	e008      	b.n	800ccd6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ccc4:	f7fd fbea 	bl	800a49c <HAL_GetTick>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d901      	bls.n	800ccd6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e177      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ccd6:	4b5d      	ldr	r3, [pc, #372]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1f0      	bne.n	800ccc4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 0308 	and.w	r3, r3, #8
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d030      	beq.n	800cd50 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d016      	beq.n	800cd24 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ccf6:	4b5a      	ldr	r3, [pc, #360]	@ (800ce60 <HAL_RCC_OscConfig+0x4e8>)
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ccfc:	f7fd fbce 	bl	800a49c <HAL_GetTick>
 800cd00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cd02:	e008      	b.n	800cd16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd04:	f7fd fbca 	bl	800a49c <HAL_GetTick>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d901      	bls.n	800cd16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cd12:	2303      	movs	r3, #3
 800cd14:	e157      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cd16:	4b4d      	ldr	r3, [pc, #308]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cd18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd1a:	f003 0302 	and.w	r3, r3, #2
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0f0      	beq.n	800cd04 <HAL_RCC_OscConfig+0x38c>
 800cd22:	e015      	b.n	800cd50 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd24:	4b4e      	ldr	r3, [pc, #312]	@ (800ce60 <HAL_RCC_OscConfig+0x4e8>)
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cd2a:	f7fd fbb7 	bl	800a49c <HAL_GetTick>
 800cd2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd30:	e008      	b.n	800cd44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd32:	f7fd fbb3 	bl	800a49c <HAL_GetTick>
 800cd36:	4602      	mov	r2, r0
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d901      	bls.n	800cd44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e140      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd44:	4b41      	ldr	r3, [pc, #260]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cd46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd48:	f003 0302 	and.w	r3, r3, #2
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1f0      	bne.n	800cd32 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 0304 	and.w	r3, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f000 80b5 	beq.w	800cec8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd62:	4b3a      	ldr	r3, [pc, #232]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cd64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d10d      	bne.n	800cd8a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd6e:	4b37      	ldr	r3, [pc, #220]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cd70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd72:	4a36      	ldr	r2, [pc, #216]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cd74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd78:	6253      	str	r3, [r2, #36]	@ 0x24
 800cd7a:	4b34      	ldr	r3, [pc, #208]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cd7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd82:	60bb      	str	r3, [r7, #8]
 800cd84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd86:	2301      	movs	r3, #1
 800cd88:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd8a:	4b36      	ldr	r3, [pc, #216]	@ (800ce64 <HAL_RCC_OscConfig+0x4ec>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d118      	bne.n	800cdc8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cd96:	4b33      	ldr	r3, [pc, #204]	@ (800ce64 <HAL_RCC_OscConfig+0x4ec>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a32      	ldr	r2, [pc, #200]	@ (800ce64 <HAL_RCC_OscConfig+0x4ec>)
 800cd9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cda0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cda2:	f7fd fb7b 	bl	800a49c <HAL_GetTick>
 800cda6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cda8:	e008      	b.n	800cdbc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdaa:	f7fd fb77 	bl	800a49c <HAL_GetTick>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	2b64      	cmp	r3, #100	@ 0x64
 800cdb6:	d901      	bls.n	800cdbc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800cdb8:	2303      	movs	r3, #3
 800cdba:	e104      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cdbc:	4b29      	ldr	r3, [pc, #164]	@ (800ce64 <HAL_RCC_OscConfig+0x4ec>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d0f0      	beq.n	800cdaa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d106      	bne.n	800cdde <HAL_RCC_OscConfig+0x466>
 800cdd0:	4b1e      	ldr	r3, [pc, #120]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cdd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdd4:	4a1d      	ldr	r2, [pc, #116]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cdd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cdda:	6353      	str	r3, [r2, #52]	@ 0x34
 800cddc:	e02d      	b.n	800ce3a <HAL_RCC_OscConfig+0x4c2>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10c      	bne.n	800ce00 <HAL_RCC_OscConfig+0x488>
 800cde6:	4b19      	ldr	r3, [pc, #100]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cde8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdea:	4a18      	ldr	r2, [pc, #96]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cdec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cdf0:	6353      	str	r3, [r2, #52]	@ 0x34
 800cdf2:	4b16      	ldr	r3, [pc, #88]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cdf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdf6:	4a15      	ldr	r2, [pc, #84]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cdf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cdfc:	6353      	str	r3, [r2, #52]	@ 0x34
 800cdfe:	e01c      	b.n	800ce3a <HAL_RCC_OscConfig+0x4c2>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	2b05      	cmp	r3, #5
 800ce06:	d10c      	bne.n	800ce22 <HAL_RCC_OscConfig+0x4aa>
 800ce08:	4b10      	ldr	r3, [pc, #64]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ce0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce0c:	4a0f      	ldr	r2, [pc, #60]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ce0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ce12:	6353      	str	r3, [r2, #52]	@ 0x34
 800ce14:	4b0d      	ldr	r3, [pc, #52]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ce16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce18:	4a0c      	ldr	r2, [pc, #48]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ce1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce1e:	6353      	str	r3, [r2, #52]	@ 0x34
 800ce20:	e00b      	b.n	800ce3a <HAL_RCC_OscConfig+0x4c2>
 800ce22:	4b0a      	ldr	r3, [pc, #40]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ce24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce26:	4a09      	ldr	r2, [pc, #36]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ce28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce2c:	6353      	str	r3, [r2, #52]	@ 0x34
 800ce2e:	4b07      	ldr	r3, [pc, #28]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ce30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce32:	4a06      	ldr	r2, [pc, #24]	@ (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800ce34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ce38:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d024      	beq.n	800ce8c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ce42:	f7fd fb2b 	bl	800a49c <HAL_GetTick>
 800ce46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce48:	e019      	b.n	800ce7e <HAL_RCC_OscConfig+0x506>
 800ce4a:	bf00      	nop
 800ce4c:	40023800 	.word	0x40023800
 800ce50:	08014634 	.word	0x08014634
 800ce54:	20000000 	.word	0x20000000
 800ce58:	20000190 	.word	0x20000190
 800ce5c:	42470020 	.word	0x42470020
 800ce60:	42470680 	.word	0x42470680
 800ce64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce68:	f7fd fb18 	bl	800a49c <HAL_GetTick>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d901      	bls.n	800ce7e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	e0a3      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce7e:	4b54      	ldr	r3, [pc, #336]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800ce80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d0ee      	beq.n	800ce68 <HAL_RCC_OscConfig+0x4f0>
 800ce8a:	e014      	b.n	800ceb6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ce8c:	f7fd fb06 	bl	800a49c <HAL_GetTick>
 800ce90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ce92:	e00a      	b.n	800ceaa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce94:	f7fd fb02 	bl	800a49c <HAL_GetTick>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d901      	bls.n	800ceaa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e08d      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ceaa:	4b49      	ldr	r3, [pc, #292]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800ceac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1ee      	bne.n	800ce94 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ceb6:	7ffb      	ldrb	r3, [r7, #31]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d105      	bne.n	800cec8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cebc:	4b44      	ldr	r3, [pc, #272]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800cebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec0:	4a43      	ldr	r2, [pc, #268]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800cec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cec6:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d079      	beq.n	800cfc4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	2b0c      	cmp	r3, #12
 800ced4:	d056      	beq.n	800cf84 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d13b      	bne.n	800cf56 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cede:	4b3d      	ldr	r3, [pc, #244]	@ (800cfd4 <HAL_RCC_OscConfig+0x65c>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cee4:	f7fd fada 	bl	800a49c <HAL_GetTick>
 800cee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ceea:	e008      	b.n	800cefe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ceec:	f7fd fad6 	bl	800a49c <HAL_GetTick>
 800cef0:	4602      	mov	r2, r0
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	d901      	bls.n	800cefe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800cefa:	2303      	movs	r3, #3
 800cefc:	e063      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cefe:	4b34      	ldr	r3, [pc, #208]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d1f0      	bne.n	800ceec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf0a:	4b31      	ldr	r3, [pc, #196]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf1a:	4319      	orrs	r1, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf20:	430b      	orrs	r3, r1
 800cf22:	492b      	ldr	r1, [pc, #172]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800cf24:	4313      	orrs	r3, r2
 800cf26:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cf28:	4b2a      	ldr	r3, [pc, #168]	@ (800cfd4 <HAL_RCC_OscConfig+0x65c>)
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf2e:	f7fd fab5 	bl	800a49c <HAL_GetTick>
 800cf32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cf34:	e008      	b.n	800cf48 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf36:	f7fd fab1 	bl	800a49c <HAL_GetTick>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d901      	bls.n	800cf48 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800cf44:	2303      	movs	r3, #3
 800cf46:	e03e      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cf48:	4b21      	ldr	r3, [pc, #132]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0f0      	beq.n	800cf36 <HAL_RCC_OscConfig+0x5be>
 800cf54:	e036      	b.n	800cfc4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf56:	4b1f      	ldr	r3, [pc, #124]	@ (800cfd4 <HAL_RCC_OscConfig+0x65c>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf5c:	f7fd fa9e 	bl	800a49c <HAL_GetTick>
 800cf60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf62:	e008      	b.n	800cf76 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf64:	f7fd fa9a 	bl	800a49c <HAL_GetTick>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d901      	bls.n	800cf76 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800cf72:	2303      	movs	r3, #3
 800cf74:	e027      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf76:	4b16      	ldr	r3, [pc, #88]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1f0      	bne.n	800cf64 <HAL_RCC_OscConfig+0x5ec>
 800cf82:	e01f      	b.n	800cfc4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d101      	bne.n	800cf90 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e01a      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800cf90:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd0 <HAL_RCC_OscConfig+0x658>)
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d10d      	bne.n	800cfc0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d106      	bne.n	800cfc0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d001      	beq.n	800cfc4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e000      	b.n	800cfc6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3720      	adds	r7, #32
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	40023800 	.word	0x40023800
 800cfd4:	42470060 	.word	0x42470060

0800cfd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d101      	bne.n	800cfec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e11a      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cfec:	4b8f      	ldr	r3, [pc, #572]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f003 0301 	and.w	r3, r3, #1
 800cff4:	683a      	ldr	r2, [r7, #0]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d919      	bls.n	800d02e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d105      	bne.n	800d00c <HAL_RCC_ClockConfig+0x34>
 800d000:	4b8a      	ldr	r3, [pc, #552]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a89      	ldr	r2, [pc, #548]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d006:	f043 0304 	orr.w	r3, r3, #4
 800d00a:	6013      	str	r3, [r2, #0]
 800d00c:	4b87      	ldr	r3, [pc, #540]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f023 0201 	bic.w	r2, r3, #1
 800d014:	4985      	ldr	r1, [pc, #532]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	4313      	orrs	r3, r2
 800d01a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d01c:	4b83      	ldr	r3, [pc, #524]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 0301 	and.w	r3, r3, #1
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	429a      	cmp	r2, r3
 800d028:	d001      	beq.n	800d02e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e0f9      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f003 0302 	and.w	r3, r3, #2
 800d036:	2b00      	cmp	r3, #0
 800d038:	d008      	beq.n	800d04c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d03a:	4b7d      	ldr	r3, [pc, #500]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	497a      	ldr	r1, [pc, #488]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d048:	4313      	orrs	r3, r2
 800d04a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f003 0301 	and.w	r3, r3, #1
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 808e 	beq.w	800d176 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d107      	bne.n	800d072 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d062:	4b73      	ldr	r3, [pc, #460]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d121      	bne.n	800d0b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e0d7      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	2b03      	cmp	r3, #3
 800d078:	d107      	bne.n	800d08a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d07a:	4b6d      	ldr	r3, [pc, #436]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d082:	2b00      	cmp	r3, #0
 800d084:	d115      	bne.n	800d0b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800d086:	2301      	movs	r3, #1
 800d088:	e0cb      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d107      	bne.n	800d0a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d092:	4b67      	ldr	r3, [pc, #412]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 0302 	and.w	r3, r3, #2
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d109      	bne.n	800d0b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e0bf      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800d0a2:	4b63      	ldr	r3, [pc, #396]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e0b7      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d0b2:	4b5f      	ldr	r3, [pc, #380]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	f023 0203 	bic.w	r2, r3, #3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	495c      	ldr	r1, [pc, #368]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d0c4:	f7fd f9ea 	bl	800a49c <HAL_GetTick>
 800d0c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d112      	bne.n	800d0f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0d2:	e00a      	b.n	800d0ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0d4:	f7fd f9e2 	bl	800a49c <HAL_GetTick>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d901      	bls.n	800d0ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	e09b      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0ea:	4b51      	ldr	r3, [pc, #324]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	f003 030c 	and.w	r3, r3, #12
 800d0f2:	2b08      	cmp	r3, #8
 800d0f4:	d1ee      	bne.n	800d0d4 <HAL_RCC_ClockConfig+0xfc>
 800d0f6:	e03e      	b.n	800d176 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	2b03      	cmp	r3, #3
 800d0fe:	d112      	bne.n	800d126 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d100:	e00a      	b.n	800d118 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d102:	f7fd f9cb 	bl	800a49c <HAL_GetTick>
 800d106:	4602      	mov	r2, r0
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d110:	4293      	cmp	r3, r2
 800d112:	d901      	bls.n	800d118 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800d114:	2303      	movs	r3, #3
 800d116:	e084      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d118:	4b45      	ldr	r3, [pc, #276]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	f003 030c 	and.w	r3, r3, #12
 800d120:	2b0c      	cmp	r3, #12
 800d122:	d1ee      	bne.n	800d102 <HAL_RCC_ClockConfig+0x12a>
 800d124:	e027      	b.n	800d176 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d11d      	bne.n	800d16a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d12e:	e00a      	b.n	800d146 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d130:	f7fd f9b4 	bl	800a49c <HAL_GetTick>
 800d134:	4602      	mov	r2, r0
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d13e:	4293      	cmp	r3, r2
 800d140:	d901      	bls.n	800d146 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800d142:	2303      	movs	r3, #3
 800d144:	e06d      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d146:	4b3a      	ldr	r3, [pc, #232]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	f003 030c 	and.w	r3, r3, #12
 800d14e:	2b04      	cmp	r3, #4
 800d150:	d1ee      	bne.n	800d130 <HAL_RCC_ClockConfig+0x158>
 800d152:	e010      	b.n	800d176 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d154:	f7fd f9a2 	bl	800a49c <HAL_GetTick>
 800d158:	4602      	mov	r2, r0
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d162:	4293      	cmp	r3, r2
 800d164:	d901      	bls.n	800d16a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800d166:	2303      	movs	r3, #3
 800d168:	e05b      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d16a:	4b31      	ldr	r3, [pc, #196]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	f003 030c 	and.w	r3, r3, #12
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1ee      	bne.n	800d154 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d176:	4b2d      	ldr	r3, [pc, #180]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	d219      	bcs.n	800d1b8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	2b01      	cmp	r3, #1
 800d188:	d105      	bne.n	800d196 <HAL_RCC_ClockConfig+0x1be>
 800d18a:	4b28      	ldr	r3, [pc, #160]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4a27      	ldr	r2, [pc, #156]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d190:	f043 0304 	orr.w	r3, r3, #4
 800d194:	6013      	str	r3, [r2, #0]
 800d196:	4b25      	ldr	r3, [pc, #148]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f023 0201 	bic.w	r2, r3, #1
 800d19e:	4923      	ldr	r1, [pc, #140]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1a6:	4b21      	ldr	r3, [pc, #132]	@ (800d22c <HAL_RCC_ClockConfig+0x254>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d001      	beq.n	800d1b8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e034      	b.n	800d222 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f003 0304 	and.w	r3, r3, #4
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d008      	beq.n	800d1d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d1c4:	4b1a      	ldr	r3, [pc, #104]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	4917      	ldr	r1, [pc, #92]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f003 0308 	and.w	r3, r3, #8
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d009      	beq.n	800d1f6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d1e2:	4b13      	ldr	r3, [pc, #76]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	490f      	ldr	r1, [pc, #60]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d1f6:	f000 f823 	bl	800d240 <HAL_RCC_GetSysClockFreq>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d230 <HAL_RCC_ClockConfig+0x258>)
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	091b      	lsrs	r3, r3, #4
 800d202:	f003 030f 	and.w	r3, r3, #15
 800d206:	490b      	ldr	r1, [pc, #44]	@ (800d234 <HAL_RCC_ClockConfig+0x25c>)
 800d208:	5ccb      	ldrb	r3, [r1, r3]
 800d20a:	fa22 f303 	lsr.w	r3, r2, r3
 800d20e:	4a0a      	ldr	r2, [pc, #40]	@ (800d238 <HAL_RCC_ClockConfig+0x260>)
 800d210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d212:	4b0a      	ldr	r3, [pc, #40]	@ (800d23c <HAL_RCC_ClockConfig+0x264>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4618      	mov	r0, r3
 800d218:	f7fd f8f4 	bl	800a404 <HAL_InitTick>
 800d21c:	4603      	mov	r3, r0
 800d21e:	72fb      	strb	r3, [r7, #11]

  return status;
 800d220:	7afb      	ldrb	r3, [r7, #11]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	40023c00 	.word	0x40023c00
 800d230:	40023800 	.word	0x40023800
 800d234:	08014634 	.word	0x08014634
 800d238:	20000000 	.word	0x20000000
 800d23c:	20000190 	.word	0x20000190

0800d240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d244:	b092      	sub	sp, #72	@ 0x48
 800d246:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800d248:	4b79      	ldr	r3, [pc, #484]	@ (800d430 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d250:	f003 030c 	and.w	r3, r3, #12
 800d254:	2b0c      	cmp	r3, #12
 800d256:	d00d      	beq.n	800d274 <HAL_RCC_GetSysClockFreq+0x34>
 800d258:	2b0c      	cmp	r3, #12
 800d25a:	f200 80d5 	bhi.w	800d408 <HAL_RCC_GetSysClockFreq+0x1c8>
 800d25e:	2b04      	cmp	r3, #4
 800d260:	d002      	beq.n	800d268 <HAL_RCC_GetSysClockFreq+0x28>
 800d262:	2b08      	cmp	r3, #8
 800d264:	d003      	beq.n	800d26e <HAL_RCC_GetSysClockFreq+0x2e>
 800d266:	e0cf      	b.n	800d408 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d268:	4b72      	ldr	r3, [pc, #456]	@ (800d434 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800d26a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800d26c:	e0da      	b.n	800d424 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d26e:	4b72      	ldr	r3, [pc, #456]	@ (800d438 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800d270:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800d272:	e0d7      	b.n	800d424 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800d274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d276:	0c9b      	lsrs	r3, r3, #18
 800d278:	f003 020f 	and.w	r2, r3, #15
 800d27c:	4b6f      	ldr	r3, [pc, #444]	@ (800d43c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d27e:	5c9b      	ldrb	r3, [r3, r2]
 800d280:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800d282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d284:	0d9b      	lsrs	r3, r3, #22
 800d286:	f003 0303 	and.w	r3, r3, #3
 800d28a:	3301      	adds	r3, #1
 800d28c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d28e:	4b68      	ldr	r3, [pc, #416]	@ (800d430 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d296:	2b00      	cmp	r3, #0
 800d298:	d05d      	beq.n	800d356 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800d29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29c:	2200      	movs	r2, #0
 800d29e:	4618      	mov	r0, r3
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	460d      	mov	r5, r1
 800d2a6:	4622      	mov	r2, r4
 800d2a8:	462b      	mov	r3, r5
 800d2aa:	f04f 0000 	mov.w	r0, #0
 800d2ae:	f04f 0100 	mov.w	r1, #0
 800d2b2:	0159      	lsls	r1, r3, #5
 800d2b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d2b8:	0150      	lsls	r0, r2, #5
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	4621      	mov	r1, r4
 800d2c0:	1a51      	subs	r1, r2, r1
 800d2c2:	6139      	str	r1, [r7, #16]
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	eb63 0301 	sbc.w	r3, r3, r1
 800d2ca:	617b      	str	r3, [r7, #20]
 800d2cc:	f04f 0200 	mov.w	r2, #0
 800d2d0:	f04f 0300 	mov.w	r3, #0
 800d2d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d2d8:	4659      	mov	r1, fp
 800d2da:	018b      	lsls	r3, r1, #6
 800d2dc:	4651      	mov	r1, sl
 800d2de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d2e2:	4651      	mov	r1, sl
 800d2e4:	018a      	lsls	r2, r1, #6
 800d2e6:	46d4      	mov	ip, sl
 800d2e8:	ebb2 080c 	subs.w	r8, r2, ip
 800d2ec:	4659      	mov	r1, fp
 800d2ee:	eb63 0901 	sbc.w	r9, r3, r1
 800d2f2:	f04f 0200 	mov.w	r2, #0
 800d2f6:	f04f 0300 	mov.w	r3, #0
 800d2fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d2fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d306:	4690      	mov	r8, r2
 800d308:	4699      	mov	r9, r3
 800d30a:	4623      	mov	r3, r4
 800d30c:	eb18 0303 	adds.w	r3, r8, r3
 800d310:	60bb      	str	r3, [r7, #8]
 800d312:	462b      	mov	r3, r5
 800d314:	eb49 0303 	adc.w	r3, r9, r3
 800d318:	60fb      	str	r3, [r7, #12]
 800d31a:	f04f 0200 	mov.w	r2, #0
 800d31e:	f04f 0300 	mov.w	r3, #0
 800d322:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d326:	4629      	mov	r1, r5
 800d328:	024b      	lsls	r3, r1, #9
 800d32a:	4620      	mov	r0, r4
 800d32c:	4629      	mov	r1, r5
 800d32e:	4604      	mov	r4, r0
 800d330:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800d334:	4601      	mov	r1, r0
 800d336:	024a      	lsls	r2, r1, #9
 800d338:	4610      	mov	r0, r2
 800d33a:	4619      	mov	r1, r3
 800d33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d33e:	2200      	movs	r2, #0
 800d340:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d348:	f7f3 ff20 	bl	800118c <__aeabi_uldivmod>
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	4613      	mov	r3, r2
 800d352:	647b      	str	r3, [r7, #68]	@ 0x44
 800d354:	e055      	b.n	800d402 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800d356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d358:	2200      	movs	r2, #0
 800d35a:	623b      	str	r3, [r7, #32]
 800d35c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d35e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d362:	4642      	mov	r2, r8
 800d364:	464b      	mov	r3, r9
 800d366:	f04f 0000 	mov.w	r0, #0
 800d36a:	f04f 0100 	mov.w	r1, #0
 800d36e:	0159      	lsls	r1, r3, #5
 800d370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d374:	0150      	lsls	r0, r2, #5
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	46c4      	mov	ip, r8
 800d37c:	ebb2 0a0c 	subs.w	sl, r2, ip
 800d380:	4640      	mov	r0, r8
 800d382:	4649      	mov	r1, r9
 800d384:	468c      	mov	ip, r1
 800d386:	eb63 0b0c 	sbc.w	fp, r3, ip
 800d38a:	f04f 0200 	mov.w	r2, #0
 800d38e:	f04f 0300 	mov.w	r3, #0
 800d392:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d396:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d39a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d39e:	ebb2 040a 	subs.w	r4, r2, sl
 800d3a2:	eb63 050b 	sbc.w	r5, r3, fp
 800d3a6:	f04f 0200 	mov.w	r2, #0
 800d3aa:	f04f 0300 	mov.w	r3, #0
 800d3ae:	00eb      	lsls	r3, r5, #3
 800d3b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d3b4:	00e2      	lsls	r2, r4, #3
 800d3b6:	4614      	mov	r4, r2
 800d3b8:	461d      	mov	r5, r3
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	18e3      	adds	r3, r4, r3
 800d3be:	603b      	str	r3, [r7, #0]
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	eb45 0303 	adc.w	r3, r5, r3
 800d3c6:	607b      	str	r3, [r7, #4]
 800d3c8:	f04f 0200 	mov.w	r2, #0
 800d3cc:	f04f 0300 	mov.w	r3, #0
 800d3d0:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	028b      	lsls	r3, r1, #10
 800d3d8:	4620      	mov	r0, r4
 800d3da:	4629      	mov	r1, r5
 800d3dc:	4604      	mov	r4, r0
 800d3de:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800d3e2:	4601      	mov	r1, r0
 800d3e4:	028a      	lsls	r2, r1, #10
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	61bb      	str	r3, [r7, #24]
 800d3f0:	61fa      	str	r2, [r7, #28]
 800d3f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d3f6:	f7f3 fec9 	bl	800118c <__aeabi_uldivmod>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	4613      	mov	r3, r2
 800d400:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800d402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d404:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800d406:	e00d      	b.n	800d424 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800d408:	4b09      	ldr	r3, [pc, #36]	@ (800d430 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	0b5b      	lsrs	r3, r3, #13
 800d40e:	f003 0307 	and.w	r3, r3, #7
 800d412:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800d414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d416:	3301      	adds	r3, #1
 800d418:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d41c:	fa02 f303 	lsl.w	r3, r2, r3
 800d420:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800d422:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800d426:	4618      	mov	r0, r3
 800d428:	3748      	adds	r7, #72	@ 0x48
 800d42a:	46bd      	mov	sp, r7
 800d42c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d430:	40023800 	.word	0x40023800
 800d434:	00f42400 	.word	0x00f42400
 800d438:	007a1200 	.word	0x007a1200
 800d43c:	08014628 	.word	0x08014628

0800d440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d440:	b480      	push	{r7}
 800d442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d444:	4b02      	ldr	r3, [pc, #8]	@ (800d450 <HAL_RCC_GetHCLKFreq+0x10>)
 800d446:	681b      	ldr	r3, [r3, #0]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bc80      	pop	{r7}
 800d44e:	4770      	bx	lr
 800d450:	20000000 	.word	0x20000000

0800d454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d458:	f7ff fff2 	bl	800d440 <HAL_RCC_GetHCLKFreq>
 800d45c:	4602      	mov	r2, r0
 800d45e:	4b05      	ldr	r3, [pc, #20]	@ (800d474 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	0a1b      	lsrs	r3, r3, #8
 800d464:	f003 0307 	and.w	r3, r3, #7
 800d468:	4903      	ldr	r1, [pc, #12]	@ (800d478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d46a:	5ccb      	ldrb	r3, [r1, r3]
 800d46c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d470:	4618      	mov	r0, r3
 800d472:	bd80      	pop	{r7, pc}
 800d474:	40023800 	.word	0x40023800
 800d478:	08014644 	.word	0x08014644

0800d47c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d480:	f7ff ffde 	bl	800d440 <HAL_RCC_GetHCLKFreq>
 800d484:	4602      	mov	r2, r0
 800d486:	4b05      	ldr	r3, [pc, #20]	@ (800d49c <HAL_RCC_GetPCLK2Freq+0x20>)
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	0adb      	lsrs	r3, r3, #11
 800d48c:	f003 0307 	and.w	r3, r3, #7
 800d490:	4903      	ldr	r1, [pc, #12]	@ (800d4a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d492:	5ccb      	ldrb	r3, [r1, r3]
 800d494:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d498:	4618      	mov	r0, r3
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	40023800 	.word	0x40023800
 800d4a0:	08014644 	.word	0x08014644

0800d4a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800d4b0:	4b29      	ldr	r3, [pc, #164]	@ (800d558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d12c      	bne.n	800d516 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d4bc:	4b26      	ldr	r3, [pc, #152]	@ (800d558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d005      	beq.n	800d4d4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800d4c8:	4b24      	ldr	r3, [pc, #144]	@ (800d55c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800d4d0:	617b      	str	r3, [r7, #20]
 800d4d2:	e016      	b.n	800d502 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d4d4:	4b20      	ldr	r3, [pc, #128]	@ (800d558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d8:	4a1f      	ldr	r2, [pc, #124]	@ (800d558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d4da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d4de:	6253      	str	r3, [r2, #36]	@ 0x24
 800d4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800d558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4e8:	60fb      	str	r3, [r7, #12]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800d4ec:	4b1b      	ldr	r3, [pc, #108]	@ (800d55c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800d4f4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800d4f6:	4b18      	ldr	r3, [pc, #96]	@ (800d558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4fa:	4a17      	ldr	r2, [pc, #92]	@ (800d558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800d4fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d500:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800d508:	d105      	bne.n	800d516 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d510:	d101      	bne.n	800d516 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800d512:	2301      	movs	r3, #1
 800d514:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d105      	bne.n	800d528 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800d51c:	4b10      	ldr	r3, [pc, #64]	@ (800d560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a0f      	ldr	r2, [pc, #60]	@ (800d560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d522:	f043 0304 	orr.w	r3, r3, #4
 800d526:	6013      	str	r3, [r2, #0]
 800d528:	4b0d      	ldr	r3, [pc, #52]	@ (800d560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f023 0201 	bic.w	r2, r3, #1
 800d530:	490b      	ldr	r1, [pc, #44]	@ (800d560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	4313      	orrs	r3, r2
 800d536:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d538:	4b09      	ldr	r3, [pc, #36]	@ (800d560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f003 0301 	and.w	r3, r3, #1
 800d540:	693a      	ldr	r2, [r7, #16]
 800d542:	429a      	cmp	r2, r3
 800d544:	d001      	beq.n	800d54a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e000      	b.n	800d54c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	371c      	adds	r7, #28
 800d550:	46bd      	mov	sp, r7
 800d552:	bc80      	pop	{r7}
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	40023800 	.word	0x40023800
 800d55c:	40007000 	.word	0x40007000
 800d560:	40023c00 	.word	0x40023c00

0800d564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d101      	bne.n	800d576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e07b      	b.n	800d66e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d108      	bne.n	800d590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d586:	d009      	beq.n	800d59c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	61da      	str	r2, [r3, #28]
 800d58e:	e005      	b.n	800d59c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d106      	bne.n	800d5bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7f5 f894 	bl	80026e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2202      	movs	r2, #2
 800d5c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d5d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d5e4:	431a      	orrs	r2, r3
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5ee:	431a      	orrs	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	f003 0302 	and.w	r3, r3, #2
 800d5f8:	431a      	orrs	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	695b      	ldr	r3, [r3, #20]
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	431a      	orrs	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d60c:	431a      	orrs	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	69db      	ldr	r3, [r3, #28]
 800d612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d616:	431a      	orrs	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a1b      	ldr	r3, [r3, #32]
 800d61c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d620:	ea42 0103 	orr.w	r1, r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d628:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	430a      	orrs	r2, r1
 800d632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	699b      	ldr	r3, [r3, #24]
 800d638:	0c1b      	lsrs	r3, r3, #16
 800d63a:	f003 0104 	and.w	r1, r3, #4
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d642:	f003 0210 	and.w	r2, r3, #16
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	430a      	orrs	r2, r1
 800d64c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	69da      	ldr	r2, [r3, #28]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d65c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2201      	movs	r2, #1
 800d668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b088      	sub	sp, #32
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	60f8      	str	r0, [r7, #12]
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	603b      	str	r3, [r7, #0]
 800d682:	4613      	mov	r3, r2
 800d684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d690:	2b01      	cmp	r3, #1
 800d692:	d101      	bne.n	800d698 <HAL_SPI_Transmit+0x22>
 800d694:	2302      	movs	r3, #2
 800d696:	e12d      	b.n	800d8f4 <HAL_SPI_Transmit+0x27e>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d6a0:	f7fc fefc 	bl	800a49c <HAL_GetTick>
 800d6a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d6a6:	88fb      	ldrh	r3, [r7, #6]
 800d6a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d002      	beq.n	800d6bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d6b6:	2302      	movs	r3, #2
 800d6b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d6ba:	e116      	b.n	800d8ea <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <HAL_SPI_Transmit+0x52>
 800d6c2:	88fb      	ldrh	r3, [r7, #6]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d102      	bne.n	800d6ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d6cc:	e10d      	b.n	800d8ea <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2203      	movs	r2, #3
 800d6d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	88fa      	ldrh	r2, [r7, #6]
 800d6e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	88fa      	ldrh	r2, [r7, #6]
 800d6ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2200      	movs	r2, #0
 800d704:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2200      	movs	r2, #0
 800d70a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d714:	d10f      	bne.n	800d736 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d724:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d734:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d740:	2b40      	cmp	r3, #64	@ 0x40
 800d742:	d007      	beq.n	800d754 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d75c:	d14f      	bne.n	800d7fe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d002      	beq.n	800d76c <HAL_SPI_Transmit+0xf6>
 800d766:	8afb      	ldrh	r3, [r7, #22]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d142      	bne.n	800d7f2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d770:	881a      	ldrh	r2, [r3, #0]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d77c:	1c9a      	adds	r2, r3, #2
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d786:	b29b      	uxth	r3, r3
 800d788:	3b01      	subs	r3, #1
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d790:	e02f      	b.n	800d7f2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	f003 0302 	and.w	r3, r3, #2
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d112      	bne.n	800d7c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7a4:	881a      	ldrh	r2, [r3, #0]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7b0:	1c9a      	adds	r2, r3, #2
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d7c4:	e015      	b.n	800d7f2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7c6:	f7fc fe69 	bl	800a49c <HAL_GetTick>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	683a      	ldr	r2, [r7, #0]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d803      	bhi.n	800d7de <HAL_SPI_Transmit+0x168>
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7dc:	d102      	bne.n	800d7e4 <HAL_SPI_Transmit+0x16e>
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d106      	bne.n	800d7f2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800d7f0:	e07b      	b.n	800d8ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1ca      	bne.n	800d792 <HAL_SPI_Transmit+0x11c>
 800d7fc:	e050      	b.n	800d8a0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d002      	beq.n	800d80c <HAL_SPI_Transmit+0x196>
 800d806:	8afb      	ldrh	r3, [r7, #22]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d144      	bne.n	800d896 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	330c      	adds	r3, #12
 800d816:	7812      	ldrb	r2, [r2, #0]
 800d818:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d828:	b29b      	uxth	r3, r3
 800d82a:	3b01      	subs	r3, #1
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d832:	e030      	b.n	800d896 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	689b      	ldr	r3, [r3, #8]
 800d83a:	f003 0302 	and.w	r3, r3, #2
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d113      	bne.n	800d86a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	330c      	adds	r3, #12
 800d84c:	7812      	ldrb	r2, [r2, #0]
 800d84e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d854:	1c5a      	adds	r2, r3, #1
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d85e:	b29b      	uxth	r3, r3
 800d860:	3b01      	subs	r3, #1
 800d862:	b29a      	uxth	r2, r3
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d868:	e015      	b.n	800d896 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d86a:	f7fc fe17 	bl	800a49c <HAL_GetTick>
 800d86e:	4602      	mov	r2, r0
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	683a      	ldr	r2, [r7, #0]
 800d876:	429a      	cmp	r2, r3
 800d878:	d803      	bhi.n	800d882 <HAL_SPI_Transmit+0x20c>
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d880:	d102      	bne.n	800d888 <HAL_SPI_Transmit+0x212>
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d106      	bne.n	800d896 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800d888:	2303      	movs	r3, #3
 800d88a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2201      	movs	r2, #1
 800d890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800d894:	e029      	b.n	800d8ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1c9      	bne.n	800d834 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d8a0:	69ba      	ldr	r2, [r7, #24]
 800d8a2:	6839      	ldr	r1, [r7, #0]
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f000 f8b1 	bl	800da0c <SPI_EndRxTxTransaction>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d002      	beq.n	800d8b6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2220      	movs	r2, #32
 800d8b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d10a      	bne.n	800d8d4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8be:	2300      	movs	r3, #0
 800d8c0:	613b      	str	r3, [r7, #16]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	613b      	str	r3, [r7, #16]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	613b      	str	r3, [r7, #16]
 800d8d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	77fb      	strb	r3, [r7, #31]
 800d8e0:	e003      	b.n	800d8ea <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800d8f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3720      	adds	r7, #32
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b088      	sub	sp, #32
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	603b      	str	r3, [r7, #0]
 800d908:	4613      	mov	r3, r2
 800d90a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d90c:	f7fc fdc6 	bl	800a49c <HAL_GetTick>
 800d910:	4602      	mov	r2, r0
 800d912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d914:	1a9b      	subs	r3, r3, r2
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	4413      	add	r3, r2
 800d91a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d91c:	f7fc fdbe 	bl	800a49c <HAL_GetTick>
 800d920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d922:	4b39      	ldr	r3, [pc, #228]	@ (800da08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	015b      	lsls	r3, r3, #5
 800d928:	0d1b      	lsrs	r3, r3, #20
 800d92a:	69fa      	ldr	r2, [r7, #28]
 800d92c:	fb02 f303 	mul.w	r3, r2, r3
 800d930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d932:	e054      	b.n	800d9de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93a:	d050      	beq.n	800d9de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d93c:	f7fc fdae 	bl	800a49c <HAL_GetTick>
 800d940:	4602      	mov	r2, r0
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	69fa      	ldr	r2, [r7, #28]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d902      	bls.n	800d952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d13d      	bne.n	800d9ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	685a      	ldr	r2, [r3, #4]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d96a:	d111      	bne.n	800d990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d974:	d004      	beq.n	800d980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d97e:	d107      	bne.n	800d990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d98e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d998:	d10f      	bne.n	800d9ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d9b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800d9ca:	2303      	movs	r3, #3
 800d9cc:	e017      	b.n	800d9fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d101      	bne.n	800d9d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	689a      	ldr	r2, [r3, #8]
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	4013      	ands	r3, r2
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	bf0c      	ite	eq
 800d9ee:	2301      	moveq	r3, #1
 800d9f0:	2300      	movne	r3, #0
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	79fb      	ldrb	r3, [r7, #7]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d19b      	bne.n	800d934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3720      	adds	r7, #32
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	20000000 	.word	0x20000000

0800da0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b088      	sub	sp, #32
 800da10:	af02      	add	r7, sp, #8
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800da18:	4b1b      	ldr	r3, [pc, #108]	@ (800da88 <SPI_EndRxTxTransaction+0x7c>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a1b      	ldr	r2, [pc, #108]	@ (800da8c <SPI_EndRxTxTransaction+0x80>)
 800da1e:	fba2 2303 	umull	r2, r3, r2, r3
 800da22:	0d5b      	lsrs	r3, r3, #21
 800da24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800da28:	fb02 f303 	mul.w	r3, r2, r3
 800da2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800da36:	d112      	bne.n	800da5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	2200      	movs	r2, #0
 800da40:	2180      	movs	r1, #128	@ 0x80
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f7ff ff5a 	bl	800d8fc <SPI_WaitFlagStateUntilTimeout>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d016      	beq.n	800da7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da52:	f043 0220 	orr.w	r2, r3, #32
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800da5a:	2303      	movs	r3, #3
 800da5c:	e00f      	b.n	800da7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00a      	beq.n	800da7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	3b01      	subs	r3, #1
 800da68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da74:	2b80      	cmp	r3, #128	@ 0x80
 800da76:	d0f2      	beq.n	800da5e <SPI_EndRxTxTransaction+0x52>
 800da78:	e000      	b.n	800da7c <SPI_EndRxTxTransaction+0x70>
        break;
 800da7a:	bf00      	nop
  }

  return HAL_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3718      	adds	r7, #24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	20000000 	.word	0x20000000
 800da8c:	165e9f81 	.word	0x165e9f81

0800da90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	e031      	b.n	800db06 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d106      	bne.n	800dabc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7f4 fe58 	bl	800276c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2202      	movs	r2, #2
 800dac0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	3304      	adds	r3, #4
 800dacc:	4619      	mov	r1, r3
 800dace:	4610      	mov	r0, r2
 800dad0:	f000 fac4 	bl	800e05c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2201      	movs	r2, #1
 800db00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b082      	sub	sp, #8
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d101      	bne.n	800db20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800db1c:	2301      	movs	r3, #1
 800db1e:	e031      	b.n	800db84 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800db26:	b2db      	uxtb	r3, r3
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d106      	bne.n	800db3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 f829 	bl	800db8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2202      	movs	r2, #2
 800db3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	3304      	adds	r3, #4
 800db4a:	4619      	mov	r1, r3
 800db4c:	4610      	mov	r0, r2
 800db4e:	f000 fa85 	bl	800e05c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800db94:	bf00      	nop
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	bc80      	pop	{r7}
 800db9c:	4770      	bx	lr
	...

0800dba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d109      	bne.n	800dbc4 <HAL_TIM_PWM_Start+0x24>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	bf14      	ite	ne
 800dbbc:	2301      	movne	r3, #1
 800dbbe:	2300      	moveq	r3, #0
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	e022      	b.n	800dc0a <HAL_TIM_PWM_Start+0x6a>
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	2b04      	cmp	r3, #4
 800dbc8:	d109      	bne.n	800dbde <HAL_TIM_PWM_Start+0x3e>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	bf14      	ite	ne
 800dbd6:	2301      	movne	r3, #1
 800dbd8:	2300      	moveq	r3, #0
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	e015      	b.n	800dc0a <HAL_TIM_PWM_Start+0x6a>
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	2b08      	cmp	r3, #8
 800dbe2:	d109      	bne.n	800dbf8 <HAL_TIM_PWM_Start+0x58>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	bf14      	ite	ne
 800dbf0:	2301      	movne	r3, #1
 800dbf2:	2300      	moveq	r3, #0
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	e008      	b.n	800dc0a <HAL_TIM_PWM_Start+0x6a>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	bf14      	ite	ne
 800dc04:	2301      	movne	r3, #1
 800dc06:	2300      	moveq	r3, #0
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e051      	b.n	800dcb6 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d104      	bne.n	800dc22 <HAL_TIM_PWM_Start+0x82>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2202      	movs	r2, #2
 800dc1c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800dc20:	e013      	b.n	800dc4a <HAL_TIM_PWM_Start+0xaa>
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	2b04      	cmp	r3, #4
 800dc26:	d104      	bne.n	800dc32 <HAL_TIM_PWM_Start+0x92>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2202      	movs	r2, #2
 800dc2c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800dc30:	e00b      	b.n	800dc4a <HAL_TIM_PWM_Start+0xaa>
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b08      	cmp	r3, #8
 800dc36:	d104      	bne.n	800dc42 <HAL_TIM_PWM_Start+0xa2>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800dc40:	e003      	b.n	800dc4a <HAL_TIM_PWM_Start+0xaa>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2202      	movs	r2, #2
 800dc46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	6839      	ldr	r1, [r7, #0]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 fbfd 	bl	800e452 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc60:	d00e      	beq.n	800dc80 <HAL_TIM_PWM_Start+0xe0>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a16      	ldr	r2, [pc, #88]	@ (800dcc0 <HAL_TIM_PWM_Start+0x120>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d009      	beq.n	800dc80 <HAL_TIM_PWM_Start+0xe0>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a14      	ldr	r2, [pc, #80]	@ (800dcc4 <HAL_TIM_PWM_Start+0x124>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d004      	beq.n	800dc80 <HAL_TIM_PWM_Start+0xe0>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a13      	ldr	r2, [pc, #76]	@ (800dcc8 <HAL_TIM_PWM_Start+0x128>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d111      	bne.n	800dca4 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	f003 0307 	and.w	r3, r3, #7
 800dc8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2b06      	cmp	r3, #6
 800dc90:	d010      	beq.n	800dcb4 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f042 0201 	orr.w	r2, r2, #1
 800dca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dca2:	e007      	b.n	800dcb4 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f042 0201 	orr.w	r2, r2, #1
 800dcb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	40000400 	.word	0x40000400
 800dcc4:	40000800 	.word	0x40000800
 800dcc8:	40010800 	.word	0x40010800

0800dccc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f000 fbb7 	bl	800e452 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6a1a      	ldr	r2, [r3, #32]
 800dcea:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dcee:	4013      	ands	r3, r2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d107      	bne.n	800dd04 <HAL_TIM_PWM_Stop+0x38>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f022 0201 	bic.w	r2, r2, #1
 800dd02:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d104      	bne.n	800dd14 <HAL_TIM_PWM_Stop+0x48>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800dd12:	e013      	b.n	800dd3c <HAL_TIM_PWM_Stop+0x70>
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	2b04      	cmp	r3, #4
 800dd18:	d104      	bne.n	800dd24 <HAL_TIM_PWM_Stop+0x58>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800dd22:	e00b      	b.n	800dd3c <HAL_TIM_PWM_Stop+0x70>
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b08      	cmp	r3, #8
 800dd28:	d104      	bne.n	800dd34 <HAL_TIM_PWM_Stop+0x68>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800dd32:	e003      	b.n	800dd3c <HAL_TIM_PWM_Stop+0x70>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800dd3c:	2300      	movs	r3, #0
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
	...

0800dd48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d101      	bne.n	800dd66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd62:	2302      	movs	r3, #2
 800dd64:	e0ae      	b.n	800dec4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2201      	movs	r2, #1
 800dd6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2b0c      	cmp	r3, #12
 800dd72:	f200 809f 	bhi.w	800deb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800dd76:	a201      	add	r2, pc, #4	@ (adr r2, 800dd7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7c:	0800ddb1 	.word	0x0800ddb1
 800dd80:	0800deb5 	.word	0x0800deb5
 800dd84:	0800deb5 	.word	0x0800deb5
 800dd88:	0800deb5 	.word	0x0800deb5
 800dd8c:	0800ddf1 	.word	0x0800ddf1
 800dd90:	0800deb5 	.word	0x0800deb5
 800dd94:	0800deb5 	.word	0x0800deb5
 800dd98:	0800deb5 	.word	0x0800deb5
 800dd9c:	0800de33 	.word	0x0800de33
 800dda0:	0800deb5 	.word	0x0800deb5
 800dda4:	0800deb5 	.word	0x0800deb5
 800dda8:	0800deb5 	.word	0x0800deb5
 800ddac:	0800de73 	.word	0x0800de73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68b9      	ldr	r1, [r7, #8]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f000 f9c0 	bl	800e13c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	699a      	ldr	r2, [r3, #24]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f042 0208 	orr.w	r2, r2, #8
 800ddca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	699a      	ldr	r2, [r3, #24]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f022 0204 	bic.w	r2, r2, #4
 800ddda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	6999      	ldr	r1, [r3, #24]
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	68da      	ldr	r2, [r3, #12]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	430a      	orrs	r2, r1
 800ddec:	619a      	str	r2, [r3, #24]
      break;
 800ddee:	e064      	b.n	800deba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	68b9      	ldr	r1, [r7, #8]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 f9dc 	bl	800e1b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	699a      	ldr	r2, [r3, #24]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	699a      	ldr	r2, [r3, #24]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6999      	ldr	r1, [r3, #24]
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	021a      	lsls	r2, r3, #8
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	430a      	orrs	r2, r1
 800de2e:	619a      	str	r2, [r3, #24]
      break;
 800de30:	e043      	b.n	800deba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	68b9      	ldr	r1, [r7, #8]
 800de38:	4618      	mov	r0, r3
 800de3a:	f000 f9f9 	bl	800e230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	69da      	ldr	r2, [r3, #28]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f042 0208 	orr.w	r2, r2, #8
 800de4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	69da      	ldr	r2, [r3, #28]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f022 0204 	bic.w	r2, r2, #4
 800de5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	69d9      	ldr	r1, [r3, #28]
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	68da      	ldr	r2, [r3, #12]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	430a      	orrs	r2, r1
 800de6e:	61da      	str	r2, [r3, #28]
      break;
 800de70:	e023      	b.n	800deba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	68b9      	ldr	r1, [r7, #8]
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 fa16 	bl	800e2aa <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	69da      	ldr	r2, [r3, #28]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	69da      	ldr	r2, [r3, #28]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	69d9      	ldr	r1, [r3, #28]
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	021a      	lsls	r2, r3, #8
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	430a      	orrs	r2, r1
 800deb0:	61da      	str	r2, [r3, #28]
      break;
 800deb2:	e002      	b.n	800deba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800deb4:	2301      	movs	r3, #1
 800deb6:	75fb      	strb	r3, [r7, #23]
      break;
 800deb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2200      	movs	r2, #0
 800debe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800dec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3718      	adds	r7, #24
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ded6:	2300      	movs	r3, #0
 800ded8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d101      	bne.n	800dee8 <HAL_TIM_ConfigClockSource+0x1c>
 800dee4:	2302      	movs	r3, #2
 800dee6:	e0b4      	b.n	800e052 <HAL_TIM_ConfigClockSource+0x186>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2202      	movs	r2, #2
 800def4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800df06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	68ba      	ldr	r2, [r7, #8]
 800df16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df20:	d03e      	beq.n	800dfa0 <HAL_TIM_ConfigClockSource+0xd4>
 800df22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df26:	f200 8087 	bhi.w	800e038 <HAL_TIM_ConfigClockSource+0x16c>
 800df2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df2e:	f000 8086 	beq.w	800e03e <HAL_TIM_ConfigClockSource+0x172>
 800df32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df36:	d87f      	bhi.n	800e038 <HAL_TIM_ConfigClockSource+0x16c>
 800df38:	2b70      	cmp	r3, #112	@ 0x70
 800df3a:	d01a      	beq.n	800df72 <HAL_TIM_ConfigClockSource+0xa6>
 800df3c:	2b70      	cmp	r3, #112	@ 0x70
 800df3e:	d87b      	bhi.n	800e038 <HAL_TIM_ConfigClockSource+0x16c>
 800df40:	2b60      	cmp	r3, #96	@ 0x60
 800df42:	d050      	beq.n	800dfe6 <HAL_TIM_ConfigClockSource+0x11a>
 800df44:	2b60      	cmp	r3, #96	@ 0x60
 800df46:	d877      	bhi.n	800e038 <HAL_TIM_ConfigClockSource+0x16c>
 800df48:	2b50      	cmp	r3, #80	@ 0x50
 800df4a:	d03c      	beq.n	800dfc6 <HAL_TIM_ConfigClockSource+0xfa>
 800df4c:	2b50      	cmp	r3, #80	@ 0x50
 800df4e:	d873      	bhi.n	800e038 <HAL_TIM_ConfigClockSource+0x16c>
 800df50:	2b40      	cmp	r3, #64	@ 0x40
 800df52:	d058      	beq.n	800e006 <HAL_TIM_ConfigClockSource+0x13a>
 800df54:	2b40      	cmp	r3, #64	@ 0x40
 800df56:	d86f      	bhi.n	800e038 <HAL_TIM_ConfigClockSource+0x16c>
 800df58:	2b30      	cmp	r3, #48	@ 0x30
 800df5a:	d064      	beq.n	800e026 <HAL_TIM_ConfigClockSource+0x15a>
 800df5c:	2b30      	cmp	r3, #48	@ 0x30
 800df5e:	d86b      	bhi.n	800e038 <HAL_TIM_ConfigClockSource+0x16c>
 800df60:	2b20      	cmp	r3, #32
 800df62:	d060      	beq.n	800e026 <HAL_TIM_ConfigClockSource+0x15a>
 800df64:	2b20      	cmp	r3, #32
 800df66:	d867      	bhi.n	800e038 <HAL_TIM_ConfigClockSource+0x16c>
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d05c      	beq.n	800e026 <HAL_TIM_ConfigClockSource+0x15a>
 800df6c:	2b10      	cmp	r3, #16
 800df6e:	d05a      	beq.n	800e026 <HAL_TIM_ConfigClockSource+0x15a>
 800df70:	e062      	b.n	800e038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800df82:	f000 fa47 	bl	800e414 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800df94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	609a      	str	r2, [r3, #8]
      break;
 800df9e:	e04f      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dfb0:	f000 fa30 	bl	800e414 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	689a      	ldr	r2, [r3, #8]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dfc2:	609a      	str	r2, [r3, #8]
      break;
 800dfc4:	e03c      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	f000 f9a7 	bl	800e326 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2150      	movs	r1, #80	@ 0x50
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f000 f9fe 	bl	800e3e0 <TIM_ITRx_SetConfig>
      break;
 800dfe4:	e02c      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dff2:	461a      	mov	r2, r3
 800dff4:	f000 f9c5 	bl	800e382 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2160      	movs	r1, #96	@ 0x60
 800dffe:	4618      	mov	r0, r3
 800e000:	f000 f9ee 	bl	800e3e0 <TIM_ITRx_SetConfig>
      break;
 800e004:	e01c      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e012:	461a      	mov	r2, r3
 800e014:	f000 f987 	bl	800e326 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2140      	movs	r1, #64	@ 0x40
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 f9de 	bl	800e3e0 <TIM_ITRx_SetConfig>
      break;
 800e024:	e00c      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4619      	mov	r1, r3
 800e030:	4610      	mov	r0, r2
 800e032:	f000 f9d5 	bl	800e3e0 <TIM_ITRx_SetConfig>
      break;
 800e036:	e003      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e038:	2301      	movs	r3, #1
 800e03a:	73fb      	strb	r3, [r7, #15]
      break;
 800e03c:	e000      	b.n	800e040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e03e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800e050:	7bfb      	ldrb	r3, [r7, #15]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e072:	d00f      	beq.n	800e094 <TIM_Base_SetConfig+0x38>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4a2b      	ldr	r2, [pc, #172]	@ (800e124 <TIM_Base_SetConfig+0xc8>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d00b      	beq.n	800e094 <TIM_Base_SetConfig+0x38>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4a2a      	ldr	r2, [pc, #168]	@ (800e128 <TIM_Base_SetConfig+0xcc>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d007      	beq.n	800e094 <TIM_Base_SetConfig+0x38>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4a29      	ldr	r2, [pc, #164]	@ (800e12c <TIM_Base_SetConfig+0xd0>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d003      	beq.n	800e094 <TIM_Base_SetConfig+0x38>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	4a28      	ldr	r2, [pc, #160]	@ (800e130 <TIM_Base_SetConfig+0xd4>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d108      	bne.n	800e0a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e09a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0ac:	d017      	beq.n	800e0de <TIM_Base_SetConfig+0x82>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a1c      	ldr	r2, [pc, #112]	@ (800e124 <TIM_Base_SetConfig+0xc8>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d013      	beq.n	800e0de <TIM_Base_SetConfig+0x82>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4a1b      	ldr	r2, [pc, #108]	@ (800e128 <TIM_Base_SetConfig+0xcc>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d00f      	beq.n	800e0de <TIM_Base_SetConfig+0x82>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4a1a      	ldr	r2, [pc, #104]	@ (800e12c <TIM_Base_SetConfig+0xd0>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d00b      	beq.n	800e0de <TIM_Base_SetConfig+0x82>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	4a19      	ldr	r2, [pc, #100]	@ (800e130 <TIM_Base_SetConfig+0xd4>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d007      	beq.n	800e0de <TIM_Base_SetConfig+0x82>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	4a18      	ldr	r2, [pc, #96]	@ (800e134 <TIM_Base_SetConfig+0xd8>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d003      	beq.n	800e0de <TIM_Base_SetConfig+0x82>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4a17      	ldr	r2, [pc, #92]	@ (800e138 <TIM_Base_SetConfig+0xdc>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d108      	bne.n	800e0f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e0e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	689a      	ldr	r2, [r3, #8]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2201      	movs	r2, #1
 800e118:	615a      	str	r2, [r3, #20]
}
 800e11a:	bf00      	nop
 800e11c:	3714      	adds	r7, #20
 800e11e:	46bd      	mov	sp, r7
 800e120:	bc80      	pop	{r7}
 800e122:	4770      	bx	lr
 800e124:	40000400 	.word	0x40000400
 800e128:	40000800 	.word	0x40000800
 800e12c:	40000c00 	.word	0x40000c00
 800e130:	40010800 	.word	0x40010800
 800e134:	40010c00 	.word	0x40010c00
 800e138:	40011000 	.word	0x40011000

0800e13c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b087      	sub	sp, #28
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6a1b      	ldr	r3, [r3, #32]
 800e14a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6a1b      	ldr	r3, [r3, #32]
 800e150:	f023 0201 	bic.w	r2, r3, #1
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	699b      	ldr	r3, [r3, #24]
 800e162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f023 0303 	bic.w	r3, r3, #3
 800e172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	4313      	orrs	r3, r2
 800e17c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	f023 0302 	bic.w	r3, r3, #2
 800e184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	697a      	ldr	r2, [r7, #20]
 800e18c:	4313      	orrs	r3, r2
 800e18e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	693a      	ldr	r2, [r7, #16]
 800e194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	621a      	str	r2, [r3, #32]
}
 800e1aa:	bf00      	nop
 800e1ac:	371c      	adds	r7, #28
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bc80      	pop	{r7}
 800e1b2:	4770      	bx	lr

0800e1b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b087      	sub	sp, #28
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a1b      	ldr	r3, [r3, #32]
 800e1c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6a1b      	ldr	r3, [r3, #32]
 800e1c8:	f023 0210 	bic.w	r2, r3, #16
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	699b      	ldr	r3, [r3, #24]
 800e1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	021b      	lsls	r3, r3, #8
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	f023 0320 	bic.w	r3, r3, #32
 800e1fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	011b      	lsls	r3, r3, #4
 800e206:	697a      	ldr	r2, [r7, #20]
 800e208:	4313      	orrs	r3, r2
 800e20a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	693a      	ldr	r2, [r7, #16]
 800e210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	685a      	ldr	r2, [r3, #4]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	621a      	str	r2, [r3, #32]
}
 800e226:	bf00      	nop
 800e228:	371c      	adds	r7, #28
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bc80      	pop	{r7}
 800e22e:	4770      	bx	lr

0800e230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e230:	b480      	push	{r7}
 800e232:	b087      	sub	sp, #28
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6a1b      	ldr	r3, [r3, #32]
 800e23e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a1b      	ldr	r3, [r3, #32]
 800e244:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	69db      	ldr	r3, [r3, #28]
 800e256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f023 0303 	bic.w	r3, r3, #3
 800e266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	4313      	orrs	r3, r2
 800e270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	021b      	lsls	r3, r3, #8
 800e280:	697a      	ldr	r2, [r7, #20]
 800e282:	4313      	orrs	r3, r2
 800e284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	693a      	ldr	r2, [r7, #16]
 800e28a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	685a      	ldr	r2, [r3, #4]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	697a      	ldr	r2, [r7, #20]
 800e29e:	621a      	str	r2, [r3, #32]
}
 800e2a0:	bf00      	nop
 800e2a2:	371c      	adds	r7, #28
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bc80      	pop	{r7}
 800e2a8:	4770      	bx	lr

0800e2aa <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2aa:	b480      	push	{r7}
 800e2ac:	b087      	sub	sp, #28
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a1b      	ldr	r3, [r3, #32]
 800e2b8:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	69db      	ldr	r3, [r3, #28]
 800e2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e2e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	021b      	lsls	r3, r3, #8
 800e2e8:	68fa      	ldr	r2, [r7, #12]
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e2f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	031b      	lsls	r3, r3, #12
 800e2fc:	697a      	ldr	r2, [r7, #20]
 800e2fe:	4313      	orrs	r3, r2
 800e300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	693a      	ldr	r2, [r7, #16]
 800e306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	685a      	ldr	r2, [r3, #4]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	697a      	ldr	r2, [r7, #20]
 800e31a:	621a      	str	r2, [r3, #32]
}
 800e31c:	bf00      	nop
 800e31e:	371c      	adds	r7, #28
 800e320:	46bd      	mov	sp, r7
 800e322:	bc80      	pop	{r7}
 800e324:	4770      	bx	lr

0800e326 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e326:	b480      	push	{r7}
 800e328:	b087      	sub	sp, #28
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	60f8      	str	r0, [r7, #12]
 800e32e:	60b9      	str	r1, [r7, #8]
 800e330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6a1b      	ldr	r3, [r3, #32]
 800e336:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6a1b      	ldr	r3, [r3, #32]
 800e33c:	f023 0201 	bic.w	r2, r3, #1
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	699b      	ldr	r3, [r3, #24]
 800e348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	011b      	lsls	r3, r3, #4
 800e356:	693a      	ldr	r2, [r7, #16]
 800e358:	4313      	orrs	r3, r2
 800e35a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	f023 030a 	bic.w	r3, r3, #10
 800e362:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e364:	697a      	ldr	r2, [r7, #20]
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	4313      	orrs	r3, r2
 800e36a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	693a      	ldr	r2, [r7, #16]
 800e370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	697a      	ldr	r2, [r7, #20]
 800e376:	621a      	str	r2, [r3, #32]
}
 800e378:	bf00      	nop
 800e37a:	371c      	adds	r7, #28
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bc80      	pop	{r7}
 800e380:	4770      	bx	lr

0800e382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e382:	b480      	push	{r7}
 800e384:	b087      	sub	sp, #28
 800e386:	af00      	add	r7, sp, #0
 800e388:	60f8      	str	r0, [r7, #12]
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6a1b      	ldr	r3, [r3, #32]
 800e398:	f023 0210 	bic.w	r2, r3, #16
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	699b      	ldr	r3, [r3, #24]
 800e3a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e3ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	031b      	lsls	r3, r3, #12
 800e3b2:	693a      	ldr	r2, [r7, #16]
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e3be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	011b      	lsls	r3, r3, #4
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	693a      	ldr	r2, [r7, #16]
 800e3ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	621a      	str	r2, [r3, #32]
}
 800e3d6:	bf00      	nop
 800e3d8:	371c      	adds	r7, #28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bc80      	pop	{r7}
 800e3de:	4770      	bx	lr

0800e3e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	689b      	ldr	r3, [r3, #8]
 800e3ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e3f8:	683a      	ldr	r2, [r7, #0]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	f043 0307 	orr.w	r3, r3, #7
 800e402:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	609a      	str	r2, [r3, #8]
}
 800e40a:	bf00      	nop
 800e40c:	3714      	adds	r7, #20
 800e40e:	46bd      	mov	sp, r7
 800e410:	bc80      	pop	{r7}
 800e412:	4770      	bx	lr

0800e414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e414:	b480      	push	{r7}
 800e416:	b087      	sub	sp, #28
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	689b      	ldr	r3, [r3, #8]
 800e426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e42e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	021a      	lsls	r2, r3, #8
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	431a      	orrs	r2, r3
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	4313      	orrs	r3, r2
 800e43c:	697a      	ldr	r2, [r7, #20]
 800e43e:	4313      	orrs	r3, r2
 800e440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	697a      	ldr	r2, [r7, #20]
 800e446:	609a      	str	r2, [r3, #8]
}
 800e448:	bf00      	nop
 800e44a:	371c      	adds	r7, #28
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bc80      	pop	{r7}
 800e450:	4770      	bx	lr

0800e452 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e452:	b480      	push	{r7}
 800e454:	b087      	sub	sp, #28
 800e456:	af00      	add	r7, sp, #0
 800e458:	60f8      	str	r0, [r7, #12]
 800e45a:	60b9      	str	r1, [r7, #8]
 800e45c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	f003 031f 	and.w	r3, r3, #31
 800e464:	2201      	movs	r2, #1
 800e466:	fa02 f303 	lsl.w	r3, r2, r3
 800e46a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6a1a      	ldr	r2, [r3, #32]
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	43db      	mvns	r3, r3
 800e474:	401a      	ands	r2, r3
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6a1a      	ldr	r2, [r3, #32]
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	f003 031f 	and.w	r3, r3, #31
 800e484:	6879      	ldr	r1, [r7, #4]
 800e486:	fa01 f303 	lsl.w	r3, r1, r3
 800e48a:	431a      	orrs	r2, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	621a      	str	r2, [r3, #32]
}
 800e490:	bf00      	nop
 800e492:	371c      	adds	r7, #28
 800e494:	46bd      	mov	sp, r7
 800e496:	bc80      	pop	{r7}
 800e498:	4770      	bx	lr
	...

0800e49c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b085      	sub	sp, #20
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d101      	bne.n	800e4b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	e046      	b.n	800e542 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2202      	movs	r2, #2
 800e4c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	68fa      	ldr	r2, [r7, #12]
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4f6:	d00e      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a13      	ldr	r2, [pc, #76]	@ (800e54c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d009      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a12      	ldr	r2, [pc, #72]	@ (800e550 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d004      	beq.n	800e516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a10      	ldr	r2, [pc, #64]	@ (800e554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d10c      	bne.n	800e530 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e51c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	4313      	orrs	r3, r2
 800e526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	3714      	adds	r7, #20
 800e546:	46bd      	mov	sp, r7
 800e548:	bc80      	pop	{r7}
 800e54a:	4770      	bx	lr
 800e54c:	40000400 	.word	0x40000400
 800e550:	40000800 	.word	0x40000800
 800e554:	40010800 	.word	0x40010800

0800e558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e566:	2301      	movs	r3, #1
 800e568:	e042      	b.n	800e5f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e570:	b2db      	uxtb	r3, r3
 800e572:	2b00      	cmp	r3, #0
 800e574:	d106      	bne.n	800e584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7f4 f97a 	bl	8002878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2224      	movs	r2, #36	@ 0x24
 800e588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	68da      	ldr	r2, [r3, #12]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e59a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 f91d 	bl	800e7dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	691a      	ldr	r2, [r3, #16]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e5b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	695a      	ldr	r2, [r3, #20]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e5c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	68da      	ldr	r2, [r3, #12]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e5d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2220      	movs	r2, #32
 800e5dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2220      	movs	r2, #32
 800e5e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e5ee:	2300      	movs	r3, #0
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b08a      	sub	sp, #40	@ 0x28
 800e5fc:	af02      	add	r7, sp, #8
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	603b      	str	r3, [r7, #0]
 800e604:	4613      	mov	r3, r2
 800e606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e608:	2300      	movs	r3, #0
 800e60a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b20      	cmp	r3, #32
 800e616:	d16d      	bne.n	800e6f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d002      	beq.n	800e624 <HAL_UART_Transmit+0x2c>
 800e61e:	88fb      	ldrh	r3, [r7, #6]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e624:	2301      	movs	r3, #1
 800e626:	e066      	b.n	800e6f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2221      	movs	r2, #33	@ 0x21
 800e632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e636:	f7fb ff31 	bl	800a49c <HAL_GetTick>
 800e63a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	88fa      	ldrh	r2, [r7, #6]
 800e640:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	88fa      	ldrh	r2, [r7, #6]
 800e646:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e650:	d108      	bne.n	800e664 <HAL_UART_Transmit+0x6c>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	691b      	ldr	r3, [r3, #16]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d104      	bne.n	800e664 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e65a:	2300      	movs	r3, #0
 800e65c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	61bb      	str	r3, [r7, #24]
 800e662:	e003      	b.n	800e66c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e668:	2300      	movs	r3, #0
 800e66a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e66c:	e02a      	b.n	800e6c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	9300      	str	r3, [sp, #0]
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2200      	movs	r2, #0
 800e676:	2180      	movs	r1, #128	@ 0x80
 800e678:	68f8      	ldr	r0, [r7, #12]
 800e67a:	f000 f840 	bl	800e6fe <UART_WaitOnFlagUntilTimeout>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d001      	beq.n	800e688 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800e684:	2303      	movs	r3, #3
 800e686:	e036      	b.n	800e6f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10b      	bne.n	800e6a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	461a      	mov	r2, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e69c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	3302      	adds	r3, #2
 800e6a2:	61bb      	str	r3, [r7, #24]
 800e6a4:	e007      	b.n	800e6b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	781a      	ldrb	r2, [r3, #0]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1cf      	bne.n	800e66e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2140      	movs	r1, #64	@ 0x40
 800e6d8:	68f8      	ldr	r0, [r7, #12]
 800e6da:	f000 f810 	bl	800e6fe <UART_WaitOnFlagUntilTimeout>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d001      	beq.n	800e6e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800e6e4:	2303      	movs	r3, #3
 800e6e6:	e006      	b.n	800e6f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2220      	movs	r2, #32
 800e6ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	e000      	b.n	800e6f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e6f4:	2302      	movs	r3, #2
  }
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3720      	adds	r7, #32
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b090      	sub	sp, #64	@ 0x40
 800e702:	af00      	add	r7, sp, #0
 800e704:	60f8      	str	r0, [r7, #12]
 800e706:	60b9      	str	r1, [r7, #8]
 800e708:	603b      	str	r3, [r7, #0]
 800e70a:	4613      	mov	r3, r2
 800e70c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e70e:	e050      	b.n	800e7b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e716:	d04c      	beq.n	800e7b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d007      	beq.n	800e72e <UART_WaitOnFlagUntilTimeout+0x30>
 800e71e:	f7fb febd 	bl	800a49c <HAL_GetTick>
 800e722:	4602      	mov	r2, r0
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	1ad3      	subs	r3, r2, r3
 800e728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d241      	bcs.n	800e7b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	330c      	adds	r3, #12
 800e734:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e738:	e853 3f00 	ldrex	r3, [r3]
 800e73c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e740:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800e744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	330c      	adds	r3, #12
 800e74c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e74e:	637a      	str	r2, [r7, #52]	@ 0x34
 800e750:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e752:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e756:	e841 2300 	strex	r3, r2, [r1]
 800e75a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1e5      	bne.n	800e72e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	3314      	adds	r3, #20
 800e768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	e853 3f00 	ldrex	r3, [r3]
 800e770:	613b      	str	r3, [r7, #16]
   return(result);
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	f023 0301 	bic.w	r3, r3, #1
 800e778:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	3314      	adds	r3, #20
 800e780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e782:	623a      	str	r2, [r7, #32]
 800e784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e786:	69f9      	ldr	r1, [r7, #28]
 800e788:	6a3a      	ldr	r2, [r7, #32]
 800e78a:	e841 2300 	strex	r3, r2, [r1]
 800e78e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d1e5      	bne.n	800e762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2220      	movs	r2, #32
 800e79a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2220      	movs	r2, #32
 800e7a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	e00f      	b.n	800e7d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	bf0c      	ite	eq
 800e7c2:	2301      	moveq	r3, #1
 800e7c4:	2300      	movne	r3, #0
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d09f      	beq.n	800e710 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3740      	adds	r7, #64	@ 0x40
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
	...

0800e7dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	691b      	ldr	r3, [r3, #16]
 800e7ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68da      	ldr	r2, [r3, #12]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	430a      	orrs	r2, r1
 800e7f8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	689a      	ldr	r2, [r3, #8]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	431a      	orrs	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	431a      	orrs	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	69db      	ldr	r3, [r3, #28]
 800e80e:	4313      	orrs	r3, r2
 800e810:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800e81c:	f023 030c 	bic.w	r3, r3, #12
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	6812      	ldr	r2, [r2, #0]
 800e824:	68b9      	ldr	r1, [r7, #8]
 800e826:	430b      	orrs	r3, r1
 800e828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	695b      	ldr	r3, [r3, #20]
 800e830:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	699a      	ldr	r2, [r3, #24]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	430a      	orrs	r2, r1
 800e83e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a55      	ldr	r2, [pc, #340]	@ (800e99c <UART_SetConfig+0x1c0>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d103      	bne.n	800e852 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e84a:	f7fe fe17 	bl	800d47c <HAL_RCC_GetPCLK2Freq>
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	e002      	b.n	800e858 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e852:	f7fe fdff 	bl	800d454 <HAL_RCC_GetPCLK1Freq>
 800e856:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	69db      	ldr	r3, [r3, #28]
 800e85c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e860:	d14c      	bne.n	800e8fc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	4613      	mov	r3, r2
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4413      	add	r3, r2
 800e86a:	009a      	lsls	r2, r3, #2
 800e86c:	441a      	add	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	005b      	lsls	r3, r3, #1
 800e874:	fbb2 f3f3 	udiv	r3, r2, r3
 800e878:	4a49      	ldr	r2, [pc, #292]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e87a:	fba2 2303 	umull	r2, r3, r2, r3
 800e87e:	095b      	lsrs	r3, r3, #5
 800e880:	0119      	lsls	r1, r3, #4
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	4613      	mov	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4413      	add	r3, r2
 800e88a:	009a      	lsls	r2, r3, #2
 800e88c:	441a      	add	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	005b      	lsls	r3, r3, #1
 800e894:	fbb2 f2f3 	udiv	r2, r2, r3
 800e898:	4b41      	ldr	r3, [pc, #260]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e89a:	fba3 0302 	umull	r0, r3, r3, r2
 800e89e:	095b      	lsrs	r3, r3, #5
 800e8a0:	2064      	movs	r0, #100	@ 0x64
 800e8a2:	fb00 f303 	mul.w	r3, r0, r3
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	00db      	lsls	r3, r3, #3
 800e8aa:	3332      	adds	r3, #50	@ 0x32
 800e8ac:	4a3c      	ldr	r2, [pc, #240]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e8b2:	095b      	lsrs	r3, r3, #5
 800e8b4:	005b      	lsls	r3, r3, #1
 800e8b6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e8ba:	4419      	add	r1, r3
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009a      	lsls	r2, r3, #2
 800e8c6:	441a      	add	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	005b      	lsls	r3, r3, #1
 800e8ce:	fbb2 f2f3 	udiv	r2, r2, r3
 800e8d2:	4b33      	ldr	r3, [pc, #204]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e8d4:	fba3 0302 	umull	r0, r3, r3, r2
 800e8d8:	095b      	lsrs	r3, r3, #5
 800e8da:	2064      	movs	r0, #100	@ 0x64
 800e8dc:	fb00 f303 	mul.w	r3, r0, r3
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	00db      	lsls	r3, r3, #3
 800e8e4:	3332      	adds	r3, #50	@ 0x32
 800e8e6:	4a2e      	ldr	r2, [pc, #184]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e8ec:	095b      	lsrs	r3, r3, #5
 800e8ee:	f003 0207 	and.w	r2, r3, #7
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	440a      	add	r2, r1
 800e8f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e8fa:	e04a      	b.n	800e992 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	4613      	mov	r3, r2
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	4413      	add	r3, r2
 800e904:	009a      	lsls	r2, r3, #2
 800e906:	441a      	add	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e912:	4a23      	ldr	r2, [pc, #140]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e914:	fba2 2303 	umull	r2, r3, r2, r3
 800e918:	095b      	lsrs	r3, r3, #5
 800e91a:	0119      	lsls	r1, r3, #4
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	4613      	mov	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	4413      	add	r3, r2
 800e924:	009a      	lsls	r2, r3, #2
 800e926:	441a      	add	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	fbb2 f2f3 	udiv	r2, r2, r3
 800e932:	4b1b      	ldr	r3, [pc, #108]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e934:	fba3 0302 	umull	r0, r3, r3, r2
 800e938:	095b      	lsrs	r3, r3, #5
 800e93a:	2064      	movs	r0, #100	@ 0x64
 800e93c:	fb00 f303 	mul.w	r3, r0, r3
 800e940:	1ad3      	subs	r3, r2, r3
 800e942:	011b      	lsls	r3, r3, #4
 800e944:	3332      	adds	r3, #50	@ 0x32
 800e946:	4a16      	ldr	r2, [pc, #88]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e948:	fba2 2303 	umull	r2, r3, r2, r3
 800e94c:	095b      	lsrs	r3, r3, #5
 800e94e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e952:	4419      	add	r1, r3
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	4613      	mov	r3, r2
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	4413      	add	r3, r2
 800e95c:	009a      	lsls	r2, r3, #2
 800e95e:	441a      	add	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	fbb2 f2f3 	udiv	r2, r2, r3
 800e96a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e96c:	fba3 0302 	umull	r0, r3, r3, r2
 800e970:	095b      	lsrs	r3, r3, #5
 800e972:	2064      	movs	r0, #100	@ 0x64
 800e974:	fb00 f303 	mul.w	r3, r0, r3
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	011b      	lsls	r3, r3, #4
 800e97c:	3332      	adds	r3, #50	@ 0x32
 800e97e:	4a08      	ldr	r2, [pc, #32]	@ (800e9a0 <UART_SetConfig+0x1c4>)
 800e980:	fba2 2303 	umull	r2, r3, r2, r3
 800e984:	095b      	lsrs	r3, r3, #5
 800e986:	f003 020f 	and.w	r2, r3, #15
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	440a      	add	r2, r1
 800e990:	609a      	str	r2, [r3, #8]
}
 800e992:	bf00      	nop
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	40013800 	.word	0x40013800
 800e9a0:	51eb851f 	.word	0x51eb851f

0800e9a4 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e9ae:	4802      	ldr	r0, [pc, #8]	@ (800e9b8 <SPI_CS_High+0x14>)
 800e9b0:	f7fc ff26 	bl	800b800 <HAL_GPIO_WritePin>
}
 800e9b4:	bf00      	nop
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	40020000 	.word	0x40020000

0800e9bc <SPI_CS_Low>:

 void SPI_CS_Low()
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e9c6:	4802      	ldr	r0, [pc, #8]	@ (800e9d0 <SPI_CS_Low+0x14>)
 800e9c8:	f7fc ff1a 	bl	800b800 <HAL_GPIO_WritePin>
}
 800e9cc:	bf00      	nop
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	40020000 	.word	0x40020000

0800e9d4 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 800e9d8:	2107      	movs	r1, #7
 800e9da:	200b      	movs	r0, #11
 800e9dc:	f000 f88c 	bl	800eaf8 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	2009      	movs	r0, #9
 800e9e4:	f000 f888 	bl	800eaf8 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 800e9e8:	f000 f809 	bl	800e9fe <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 800e9ec:	f000 f817 	bl	800ea1e <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 800e9f0:	f000 f82f 	bl	800ea52 <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 800e9f4:	200f      	movs	r0, #15
 800e9f6:	f000 f81a 	bl	800ea2e <MAX7219_SetBrightness>
}
 800e9fa:	bf00      	nop
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 800ea02:	2101      	movs	r1, #1
 800ea04:	200c      	movs	r0, #12
 800ea06:	f000 f877 	bl	800eaf8 <MAX7219_Write>
}
 800ea0a:	bf00      	nop
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <MAX7219_DisplayTestStart>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStart (void)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 1);                 // put MAX7219 into "display test" mode
 800ea12:	2101      	movs	r1, #1
 800ea14:	200f      	movs	r0, #15
 800ea16:	f000 f86f 	bl	800eaf8 <MAX7219_Write>
}
 800ea1a:	bf00      	nop
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 800ea22:	2100      	movs	r1, #0
 800ea24:	200f      	movs	r0, #15
 800ea26:	f000 f867 	bl	800eaf8 <MAX7219_Write>
}
 800ea2a:	bf00      	nop
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b082      	sub	sp, #8
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	4603      	mov	r3, r0
 800ea36:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 800ea38:	79fb      	ldrb	r3, [r7, #7]
 800ea3a:	f003 030f 	and.w	r3, r3, #15
 800ea3e:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 800ea40:	79fb      	ldrb	r3, [r7, #7]
 800ea42:	4619      	mov	r1, r3
 800ea44:	200a      	movs	r0, #10
 800ea46:	f000 f857 	bl	800eaf8 <MAX7219_Write>
}
 800ea4a:	bf00      	nop
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b082      	sub	sp, #8
 800ea56:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 800ea58:	2300      	movs	r3, #0
 800ea5a:	71fb      	strb	r3, [r7, #7]
 800ea5c:	e007      	b.n	800ea6e <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 800ea5e:	79fb      	ldrb	r3, [r7, #7]
 800ea60:	2100      	movs	r1, #0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f000 f848 	bl	800eaf8 <MAX7219_Write>
  for (i=0; i < 8; i++)
 800ea68:	79fb      	ldrb	r3, [r7, #7]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	71fb      	strb	r3, [r7, #7]
 800ea6e:	79fb      	ldrb	r3, [r7, #7]
 800ea70:	2b07      	cmp	r3, #7
 800ea72:	d9f4      	bls.n	800ea5e <MAX7219_Clear+0xc>
}
 800ea74:	bf00      	nop
 800ea76:	bf00      	nop
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b082      	sub	sp, #8
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	4603      	mov	r3, r0
 800ea86:	460a      	mov	r2, r1
 800ea88:	71fb      	strb	r3, [r7, #7]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 800ea8e:	79bb      	ldrb	r3, [r7, #6]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f000 f80b 	bl	800eaac <MAX7219_LookupCode>
 800ea96:	4603      	mov	r3, r0
 800ea98:	461a      	mov	r2, r3
 800ea9a:	79fb      	ldrb	r3, [r7, #7]
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f000 f82a 	bl	800eaf8 <MAX7219_Write>
}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b085      	sub	sp, #20
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	4603      	mov	r3, r0
 800eab4:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800eab6:	2300      	movs	r3, #0
 800eab8:	73fb      	strb	r3, [r7, #15]
 800eaba:	e00f      	b.n	800eadc <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 800eabc:	7bfb      	ldrb	r3, [r7, #15]
 800eabe:	4a0d      	ldr	r2, [pc, #52]	@ (800eaf4 <MAX7219_LookupCode+0x48>)
 800eac0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800eac4:	79fa      	ldrb	r2, [r7, #7]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d105      	bne.n	800ead6 <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 800eaca:	7bfb      	ldrb	r3, [r7, #15]
 800eacc:	4a09      	ldr	r2, [pc, #36]	@ (800eaf4 <MAX7219_LookupCode+0x48>)
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	4413      	add	r3, r2
 800ead2:	785b      	ldrb	r3, [r3, #1]
 800ead4:	e009      	b.n	800eaea <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 800ead6:	7bfb      	ldrb	r3, [r7, #15]
 800ead8:	3301      	adds	r3, #1
 800eada:	73fb      	strb	r3, [r7, #15]
 800eadc:	7bfb      	ldrb	r3, [r7, #15]
 800eade:	4a05      	ldr	r2, [pc, #20]	@ (800eaf4 <MAX7219_LookupCode+0x48>)
 800eae0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d1e9      	bne.n	800eabc <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bc80      	pop	{r7}
 800eaf2:	4770      	bx	lr
 800eaf4:	0801464c 	.word	0x0801464c

0800eaf8 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	4603      	mov	r3, r0
 800eb00:	460a      	mov	r2, r1
 800eb02:	71fb      	strb	r3, [r7, #7]
 800eb04:	4613      	mov	r3, r2
 800eb06:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 800eb08:	f7ff ff58 	bl	800e9bc <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 f80c 	bl	800eb2c <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 800eb14:	79bb      	ldrb	r3, [r7, #6]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f000 f808 	bl	800eb2c <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 800eb1c:	f7ff ff42 	bl	800e9a4 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 800eb20:	f7ff ff4c 	bl	800e9bc <SPI_CS_Low>
}
 800eb24:	bf00      	nop
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	4603      	mov	r3, r0
 800eb34:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 800eb36:	1df9      	adds	r1, r7, #7
 800eb38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	4803      	ldr	r0, [pc, #12]	@ (800eb4c <MAX7219_SendByte+0x20>)
 800eb40:	f7fe fd99 	bl	800d676 <HAL_SPI_Transmit>
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	200003e0 	.word	0x200003e0

0800eb50 <__cvt>:
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb56:	461d      	mov	r5, r3
 800eb58:	bfbb      	ittet	lt
 800eb5a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800eb5e:	461d      	movlt	r5, r3
 800eb60:	2300      	movge	r3, #0
 800eb62:	232d      	movlt	r3, #45	@ 0x2d
 800eb64:	b088      	sub	sp, #32
 800eb66:	4614      	mov	r4, r2
 800eb68:	bfb8      	it	lt
 800eb6a:	4614      	movlt	r4, r2
 800eb6c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800eb6e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800eb70:	7013      	strb	r3, [r2, #0]
 800eb72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eb74:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800eb78:	f023 0820 	bic.w	r8, r3, #32
 800eb7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eb80:	d005      	beq.n	800eb8e <__cvt+0x3e>
 800eb82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eb86:	d100      	bne.n	800eb8a <__cvt+0x3a>
 800eb88:	3601      	adds	r6, #1
 800eb8a:	2302      	movs	r3, #2
 800eb8c:	e000      	b.n	800eb90 <__cvt+0x40>
 800eb8e:	2303      	movs	r3, #3
 800eb90:	aa07      	add	r2, sp, #28
 800eb92:	9204      	str	r2, [sp, #16]
 800eb94:	aa06      	add	r2, sp, #24
 800eb96:	e9cd a202 	strd	sl, r2, [sp, #8]
 800eb9a:	e9cd 3600 	strd	r3, r6, [sp]
 800eb9e:	4622      	mov	r2, r4
 800eba0:	462b      	mov	r3, r5
 800eba2:	f001 f985 	bl	800feb0 <_dtoa_r>
 800eba6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ebaa:	4607      	mov	r7, r0
 800ebac:	d119      	bne.n	800ebe2 <__cvt+0x92>
 800ebae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ebb0:	07db      	lsls	r3, r3, #31
 800ebb2:	d50e      	bpl.n	800ebd2 <__cvt+0x82>
 800ebb4:	eb00 0906 	add.w	r9, r0, r6
 800ebb8:	2200      	movs	r2, #0
 800ebba:	2300      	movs	r3, #0
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	f7f1 ff0a 	bl	80009d8 <__aeabi_dcmpeq>
 800ebc4:	b108      	cbz	r0, 800ebca <__cvt+0x7a>
 800ebc6:	f8cd 901c 	str.w	r9, [sp, #28]
 800ebca:	2230      	movs	r2, #48	@ 0x30
 800ebcc:	9b07      	ldr	r3, [sp, #28]
 800ebce:	454b      	cmp	r3, r9
 800ebd0:	d31e      	bcc.n	800ec10 <__cvt+0xc0>
 800ebd2:	4638      	mov	r0, r7
 800ebd4:	9b07      	ldr	r3, [sp, #28]
 800ebd6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ebd8:	1bdb      	subs	r3, r3, r7
 800ebda:	6013      	str	r3, [r2, #0]
 800ebdc:	b008      	add	sp, #32
 800ebde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ebe6:	eb00 0906 	add.w	r9, r0, r6
 800ebea:	d1e5      	bne.n	800ebb8 <__cvt+0x68>
 800ebec:	7803      	ldrb	r3, [r0, #0]
 800ebee:	2b30      	cmp	r3, #48	@ 0x30
 800ebf0:	d10a      	bne.n	800ec08 <__cvt+0xb8>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	f7f1 feed 	bl	80009d8 <__aeabi_dcmpeq>
 800ebfe:	b918      	cbnz	r0, 800ec08 <__cvt+0xb8>
 800ec00:	f1c6 0601 	rsb	r6, r6, #1
 800ec04:	f8ca 6000 	str.w	r6, [sl]
 800ec08:	f8da 3000 	ldr.w	r3, [sl]
 800ec0c:	4499      	add	r9, r3
 800ec0e:	e7d3      	b.n	800ebb8 <__cvt+0x68>
 800ec10:	1c59      	adds	r1, r3, #1
 800ec12:	9107      	str	r1, [sp, #28]
 800ec14:	701a      	strb	r2, [r3, #0]
 800ec16:	e7d9      	b.n	800ebcc <__cvt+0x7c>

0800ec18 <__exponent>:
 800ec18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec1a:	2900      	cmp	r1, #0
 800ec1c:	bfb6      	itet	lt
 800ec1e:	232d      	movlt	r3, #45	@ 0x2d
 800ec20:	232b      	movge	r3, #43	@ 0x2b
 800ec22:	4249      	neglt	r1, r1
 800ec24:	2909      	cmp	r1, #9
 800ec26:	7002      	strb	r2, [r0, #0]
 800ec28:	7043      	strb	r3, [r0, #1]
 800ec2a:	dd29      	ble.n	800ec80 <__exponent+0x68>
 800ec2c:	f10d 0307 	add.w	r3, sp, #7
 800ec30:	461d      	mov	r5, r3
 800ec32:	270a      	movs	r7, #10
 800ec34:	fbb1 f6f7 	udiv	r6, r1, r7
 800ec38:	461a      	mov	r2, r3
 800ec3a:	fb07 1416 	mls	r4, r7, r6, r1
 800ec3e:	3430      	adds	r4, #48	@ 0x30
 800ec40:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ec44:	460c      	mov	r4, r1
 800ec46:	2c63      	cmp	r4, #99	@ 0x63
 800ec48:	4631      	mov	r1, r6
 800ec4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec4e:	dcf1      	bgt.n	800ec34 <__exponent+0x1c>
 800ec50:	3130      	adds	r1, #48	@ 0x30
 800ec52:	1e94      	subs	r4, r2, #2
 800ec54:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ec58:	4623      	mov	r3, r4
 800ec5a:	1c41      	adds	r1, r0, #1
 800ec5c:	42ab      	cmp	r3, r5
 800ec5e:	d30a      	bcc.n	800ec76 <__exponent+0x5e>
 800ec60:	f10d 0309 	add.w	r3, sp, #9
 800ec64:	1a9b      	subs	r3, r3, r2
 800ec66:	42ac      	cmp	r4, r5
 800ec68:	bf88      	it	hi
 800ec6a:	2300      	movhi	r3, #0
 800ec6c:	3302      	adds	r3, #2
 800ec6e:	4403      	add	r3, r0
 800ec70:	1a18      	subs	r0, r3, r0
 800ec72:	b003      	add	sp, #12
 800ec74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec76:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ec7a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ec7e:	e7ed      	b.n	800ec5c <__exponent+0x44>
 800ec80:	2330      	movs	r3, #48	@ 0x30
 800ec82:	3130      	adds	r1, #48	@ 0x30
 800ec84:	7083      	strb	r3, [r0, #2]
 800ec86:	70c1      	strb	r1, [r0, #3]
 800ec88:	1d03      	adds	r3, r0, #4
 800ec8a:	e7f1      	b.n	800ec70 <__exponent+0x58>

0800ec8c <_printf_float>:
 800ec8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec90:	b091      	sub	sp, #68	@ 0x44
 800ec92:	460c      	mov	r4, r1
 800ec94:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800ec98:	4616      	mov	r6, r2
 800ec9a:	461f      	mov	r7, r3
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	f000 fff5 	bl	800fc8c <_localeconv_r>
 800eca2:	6803      	ldr	r3, [r0, #0]
 800eca4:	4618      	mov	r0, r3
 800eca6:	9308      	str	r3, [sp, #32]
 800eca8:	f7f1 fa6a 	bl	8000180 <strlen>
 800ecac:	2300      	movs	r3, #0
 800ecae:	930e      	str	r3, [sp, #56]	@ 0x38
 800ecb0:	f8d8 3000 	ldr.w	r3, [r8]
 800ecb4:	9009      	str	r0, [sp, #36]	@ 0x24
 800ecb6:	3307      	adds	r3, #7
 800ecb8:	f023 0307 	bic.w	r3, r3, #7
 800ecbc:	f103 0208 	add.w	r2, r3, #8
 800ecc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ecc4:	f8d4 b000 	ldr.w	fp, [r4]
 800ecc8:	f8c8 2000 	str.w	r2, [r8]
 800eccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ecd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ecd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ecd6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ecda:	f04f 32ff 	mov.w	r2, #4294967295
 800ecde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ece2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ece6:	4b9c      	ldr	r3, [pc, #624]	@ (800ef58 <_printf_float+0x2cc>)
 800ece8:	f7f1 fea8 	bl	8000a3c <__aeabi_dcmpun>
 800ecec:	bb70      	cbnz	r0, 800ed4c <_printf_float+0xc0>
 800ecee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ecf2:	f04f 32ff 	mov.w	r2, #4294967295
 800ecf6:	4b98      	ldr	r3, [pc, #608]	@ (800ef58 <_printf_float+0x2cc>)
 800ecf8:	f7f1 fe82 	bl	8000a00 <__aeabi_dcmple>
 800ecfc:	bb30      	cbnz	r0, 800ed4c <_printf_float+0xc0>
 800ecfe:	2200      	movs	r2, #0
 800ed00:	2300      	movs	r3, #0
 800ed02:	4640      	mov	r0, r8
 800ed04:	4649      	mov	r1, r9
 800ed06:	f7f1 fe71 	bl	80009ec <__aeabi_dcmplt>
 800ed0a:	b110      	cbz	r0, 800ed12 <_printf_float+0x86>
 800ed0c:	232d      	movs	r3, #45	@ 0x2d
 800ed0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed12:	4a92      	ldr	r2, [pc, #584]	@ (800ef5c <_printf_float+0x2d0>)
 800ed14:	4b92      	ldr	r3, [pc, #584]	@ (800ef60 <_printf_float+0x2d4>)
 800ed16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ed1a:	bf94      	ite	ls
 800ed1c:	4690      	movls	r8, r2
 800ed1e:	4698      	movhi	r8, r3
 800ed20:	2303      	movs	r3, #3
 800ed22:	f04f 0900 	mov.w	r9, #0
 800ed26:	6123      	str	r3, [r4, #16]
 800ed28:	f02b 0304 	bic.w	r3, fp, #4
 800ed2c:	6023      	str	r3, [r4, #0]
 800ed2e:	4633      	mov	r3, r6
 800ed30:	4621      	mov	r1, r4
 800ed32:	4628      	mov	r0, r5
 800ed34:	9700      	str	r7, [sp, #0]
 800ed36:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ed38:	f000 f9d4 	bl	800f0e4 <_printf_common>
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	f040 8090 	bne.w	800ee62 <_printf_float+0x1d6>
 800ed42:	f04f 30ff 	mov.w	r0, #4294967295
 800ed46:	b011      	add	sp, #68	@ 0x44
 800ed48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4c:	4642      	mov	r2, r8
 800ed4e:	464b      	mov	r3, r9
 800ed50:	4640      	mov	r0, r8
 800ed52:	4649      	mov	r1, r9
 800ed54:	f7f1 fe72 	bl	8000a3c <__aeabi_dcmpun>
 800ed58:	b148      	cbz	r0, 800ed6e <_printf_float+0xe2>
 800ed5a:	464b      	mov	r3, r9
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	bfb8      	it	lt
 800ed60:	232d      	movlt	r3, #45	@ 0x2d
 800ed62:	4a80      	ldr	r2, [pc, #512]	@ (800ef64 <_printf_float+0x2d8>)
 800ed64:	bfb8      	it	lt
 800ed66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ed6a:	4b7f      	ldr	r3, [pc, #508]	@ (800ef68 <_printf_float+0x2dc>)
 800ed6c:	e7d3      	b.n	800ed16 <_printf_float+0x8a>
 800ed6e:	6863      	ldr	r3, [r4, #4]
 800ed70:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800ed74:	1c5a      	adds	r2, r3, #1
 800ed76:	d13f      	bne.n	800edf8 <_printf_float+0x16c>
 800ed78:	2306      	movs	r3, #6
 800ed7a:	6063      	str	r3, [r4, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800ed82:	6023      	str	r3, [r4, #0]
 800ed84:	9206      	str	r2, [sp, #24]
 800ed86:	aa0e      	add	r2, sp, #56	@ 0x38
 800ed88:	e9cd a204 	strd	sl, r2, [sp, #16]
 800ed8c:	aa0d      	add	r2, sp, #52	@ 0x34
 800ed8e:	9203      	str	r2, [sp, #12]
 800ed90:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800ed94:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ed98:	6863      	ldr	r3, [r4, #4]
 800ed9a:	4642      	mov	r2, r8
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	4628      	mov	r0, r5
 800eda0:	464b      	mov	r3, r9
 800eda2:	910a      	str	r1, [sp, #40]	@ 0x28
 800eda4:	f7ff fed4 	bl	800eb50 <__cvt>
 800eda8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800edaa:	4680      	mov	r8, r0
 800edac:	2947      	cmp	r1, #71	@ 0x47
 800edae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800edb0:	d128      	bne.n	800ee04 <_printf_float+0x178>
 800edb2:	1cc8      	adds	r0, r1, #3
 800edb4:	db02      	blt.n	800edbc <_printf_float+0x130>
 800edb6:	6863      	ldr	r3, [r4, #4]
 800edb8:	4299      	cmp	r1, r3
 800edba:	dd40      	ble.n	800ee3e <_printf_float+0x1b2>
 800edbc:	f1aa 0a02 	sub.w	sl, sl, #2
 800edc0:	fa5f fa8a 	uxtb.w	sl, sl
 800edc4:	4652      	mov	r2, sl
 800edc6:	3901      	subs	r1, #1
 800edc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800edcc:	910d      	str	r1, [sp, #52]	@ 0x34
 800edce:	f7ff ff23 	bl	800ec18 <__exponent>
 800edd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edd4:	4681      	mov	r9, r0
 800edd6:	1813      	adds	r3, r2, r0
 800edd8:	2a01      	cmp	r2, #1
 800edda:	6123      	str	r3, [r4, #16]
 800eddc:	dc02      	bgt.n	800ede4 <_printf_float+0x158>
 800edde:	6822      	ldr	r2, [r4, #0]
 800ede0:	07d2      	lsls	r2, r2, #31
 800ede2:	d501      	bpl.n	800ede8 <_printf_float+0x15c>
 800ede4:	3301      	adds	r3, #1
 800ede6:	6123      	str	r3, [r4, #16]
 800ede8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800edec:	2b00      	cmp	r3, #0
 800edee:	d09e      	beq.n	800ed2e <_printf_float+0xa2>
 800edf0:	232d      	movs	r3, #45	@ 0x2d
 800edf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edf6:	e79a      	b.n	800ed2e <_printf_float+0xa2>
 800edf8:	2947      	cmp	r1, #71	@ 0x47
 800edfa:	d1bf      	bne.n	800ed7c <_printf_float+0xf0>
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d1bd      	bne.n	800ed7c <_printf_float+0xf0>
 800ee00:	2301      	movs	r3, #1
 800ee02:	e7ba      	b.n	800ed7a <_printf_float+0xee>
 800ee04:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ee08:	d9dc      	bls.n	800edc4 <_printf_float+0x138>
 800ee0a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ee0e:	d118      	bne.n	800ee42 <_printf_float+0x1b6>
 800ee10:	2900      	cmp	r1, #0
 800ee12:	6863      	ldr	r3, [r4, #4]
 800ee14:	dd0b      	ble.n	800ee2e <_printf_float+0x1a2>
 800ee16:	6121      	str	r1, [r4, #16]
 800ee18:	b913      	cbnz	r3, 800ee20 <_printf_float+0x194>
 800ee1a:	6822      	ldr	r2, [r4, #0]
 800ee1c:	07d0      	lsls	r0, r2, #31
 800ee1e:	d502      	bpl.n	800ee26 <_printf_float+0x19a>
 800ee20:	3301      	adds	r3, #1
 800ee22:	440b      	add	r3, r1
 800ee24:	6123      	str	r3, [r4, #16]
 800ee26:	f04f 0900 	mov.w	r9, #0
 800ee2a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ee2c:	e7dc      	b.n	800ede8 <_printf_float+0x15c>
 800ee2e:	b913      	cbnz	r3, 800ee36 <_printf_float+0x1aa>
 800ee30:	6822      	ldr	r2, [r4, #0]
 800ee32:	07d2      	lsls	r2, r2, #31
 800ee34:	d501      	bpl.n	800ee3a <_printf_float+0x1ae>
 800ee36:	3302      	adds	r3, #2
 800ee38:	e7f4      	b.n	800ee24 <_printf_float+0x198>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e7f2      	b.n	800ee24 <_printf_float+0x198>
 800ee3e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ee42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee44:	4299      	cmp	r1, r3
 800ee46:	db05      	blt.n	800ee54 <_printf_float+0x1c8>
 800ee48:	6823      	ldr	r3, [r4, #0]
 800ee4a:	6121      	str	r1, [r4, #16]
 800ee4c:	07d8      	lsls	r0, r3, #31
 800ee4e:	d5ea      	bpl.n	800ee26 <_printf_float+0x19a>
 800ee50:	1c4b      	adds	r3, r1, #1
 800ee52:	e7e7      	b.n	800ee24 <_printf_float+0x198>
 800ee54:	2900      	cmp	r1, #0
 800ee56:	bfcc      	ite	gt
 800ee58:	2201      	movgt	r2, #1
 800ee5a:	f1c1 0202 	rsble	r2, r1, #2
 800ee5e:	4413      	add	r3, r2
 800ee60:	e7e0      	b.n	800ee24 <_printf_float+0x198>
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	055a      	lsls	r2, r3, #21
 800ee66:	d407      	bmi.n	800ee78 <_printf_float+0x1ec>
 800ee68:	6923      	ldr	r3, [r4, #16]
 800ee6a:	4642      	mov	r2, r8
 800ee6c:	4631      	mov	r1, r6
 800ee6e:	4628      	mov	r0, r5
 800ee70:	47b8      	blx	r7
 800ee72:	3001      	adds	r0, #1
 800ee74:	d12b      	bne.n	800eece <_printf_float+0x242>
 800ee76:	e764      	b.n	800ed42 <_printf_float+0xb6>
 800ee78:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ee7c:	f240 80dc 	bls.w	800f038 <_printf_float+0x3ac>
 800ee80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ee84:	2200      	movs	r2, #0
 800ee86:	2300      	movs	r3, #0
 800ee88:	f7f1 fda6 	bl	80009d8 <__aeabi_dcmpeq>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d033      	beq.n	800eef8 <_printf_float+0x26c>
 800ee90:	2301      	movs	r3, #1
 800ee92:	4631      	mov	r1, r6
 800ee94:	4628      	mov	r0, r5
 800ee96:	4a35      	ldr	r2, [pc, #212]	@ (800ef6c <_printf_float+0x2e0>)
 800ee98:	47b8      	blx	r7
 800ee9a:	3001      	adds	r0, #1
 800ee9c:	f43f af51 	beq.w	800ed42 <_printf_float+0xb6>
 800eea0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800eea4:	4543      	cmp	r3, r8
 800eea6:	db02      	blt.n	800eeae <_printf_float+0x222>
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	07d8      	lsls	r0, r3, #31
 800eeac:	d50f      	bpl.n	800eece <_printf_float+0x242>
 800eeae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eeb2:	4631      	mov	r1, r6
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	47b8      	blx	r7
 800eeb8:	3001      	adds	r0, #1
 800eeba:	f43f af42 	beq.w	800ed42 <_printf_float+0xb6>
 800eebe:	f04f 0900 	mov.w	r9, #0
 800eec2:	f108 38ff 	add.w	r8, r8, #4294967295
 800eec6:	f104 0a1a 	add.w	sl, r4, #26
 800eeca:	45c8      	cmp	r8, r9
 800eecc:	dc09      	bgt.n	800eee2 <_printf_float+0x256>
 800eece:	6823      	ldr	r3, [r4, #0]
 800eed0:	079b      	lsls	r3, r3, #30
 800eed2:	f100 8102 	bmi.w	800f0da <_printf_float+0x44e>
 800eed6:	68e0      	ldr	r0, [r4, #12]
 800eed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eeda:	4298      	cmp	r0, r3
 800eedc:	bfb8      	it	lt
 800eede:	4618      	movlt	r0, r3
 800eee0:	e731      	b.n	800ed46 <_printf_float+0xba>
 800eee2:	2301      	movs	r3, #1
 800eee4:	4652      	mov	r2, sl
 800eee6:	4631      	mov	r1, r6
 800eee8:	4628      	mov	r0, r5
 800eeea:	47b8      	blx	r7
 800eeec:	3001      	adds	r0, #1
 800eeee:	f43f af28 	beq.w	800ed42 <_printf_float+0xb6>
 800eef2:	f109 0901 	add.w	r9, r9, #1
 800eef6:	e7e8      	b.n	800eeca <_printf_float+0x23e>
 800eef8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	dc38      	bgt.n	800ef70 <_printf_float+0x2e4>
 800eefe:	2301      	movs	r3, #1
 800ef00:	4631      	mov	r1, r6
 800ef02:	4628      	mov	r0, r5
 800ef04:	4a19      	ldr	r2, [pc, #100]	@ (800ef6c <_printf_float+0x2e0>)
 800ef06:	47b8      	blx	r7
 800ef08:	3001      	adds	r0, #1
 800ef0a:	f43f af1a 	beq.w	800ed42 <_printf_float+0xb6>
 800ef0e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ef12:	ea59 0303 	orrs.w	r3, r9, r3
 800ef16:	d102      	bne.n	800ef1e <_printf_float+0x292>
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	07d9      	lsls	r1, r3, #31
 800ef1c:	d5d7      	bpl.n	800eece <_printf_float+0x242>
 800ef1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ef22:	4631      	mov	r1, r6
 800ef24:	4628      	mov	r0, r5
 800ef26:	47b8      	blx	r7
 800ef28:	3001      	adds	r0, #1
 800ef2a:	f43f af0a 	beq.w	800ed42 <_printf_float+0xb6>
 800ef2e:	f04f 0a00 	mov.w	sl, #0
 800ef32:	f104 0b1a 	add.w	fp, r4, #26
 800ef36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef38:	425b      	negs	r3, r3
 800ef3a:	4553      	cmp	r3, sl
 800ef3c:	dc01      	bgt.n	800ef42 <_printf_float+0x2b6>
 800ef3e:	464b      	mov	r3, r9
 800ef40:	e793      	b.n	800ee6a <_printf_float+0x1de>
 800ef42:	2301      	movs	r3, #1
 800ef44:	465a      	mov	r2, fp
 800ef46:	4631      	mov	r1, r6
 800ef48:	4628      	mov	r0, r5
 800ef4a:	47b8      	blx	r7
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	f43f aef8 	beq.w	800ed42 <_printf_float+0xb6>
 800ef52:	f10a 0a01 	add.w	sl, sl, #1
 800ef56:	e7ee      	b.n	800ef36 <_printf_float+0x2aa>
 800ef58:	7fefffff 	.word	0x7fefffff
 800ef5c:	08014686 	.word	0x08014686
 800ef60:	0801468a 	.word	0x0801468a
 800ef64:	0801468e 	.word	0x0801468e
 800ef68:	08014692 	.word	0x08014692
 800ef6c:	08014696 	.word	0x08014696
 800ef70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ef72:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ef76:	4553      	cmp	r3, sl
 800ef78:	bfa8      	it	ge
 800ef7a:	4653      	movge	r3, sl
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	4699      	mov	r9, r3
 800ef80:	dc36      	bgt.n	800eff0 <_printf_float+0x364>
 800ef82:	f04f 0b00 	mov.w	fp, #0
 800ef86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef8a:	f104 021a 	add.w	r2, r4, #26
 800ef8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ef90:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef92:	eba3 0309 	sub.w	r3, r3, r9
 800ef96:	455b      	cmp	r3, fp
 800ef98:	dc31      	bgt.n	800effe <_printf_float+0x372>
 800ef9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef9c:	459a      	cmp	sl, r3
 800ef9e:	dc3a      	bgt.n	800f016 <_printf_float+0x38a>
 800efa0:	6823      	ldr	r3, [r4, #0]
 800efa2:	07da      	lsls	r2, r3, #31
 800efa4:	d437      	bmi.n	800f016 <_printf_float+0x38a>
 800efa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800efa8:	ebaa 0903 	sub.w	r9, sl, r3
 800efac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efae:	ebaa 0303 	sub.w	r3, sl, r3
 800efb2:	4599      	cmp	r9, r3
 800efb4:	bfa8      	it	ge
 800efb6:	4699      	movge	r9, r3
 800efb8:	f1b9 0f00 	cmp.w	r9, #0
 800efbc:	dc33      	bgt.n	800f026 <_printf_float+0x39a>
 800efbe:	f04f 0800 	mov.w	r8, #0
 800efc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800efc6:	f104 0b1a 	add.w	fp, r4, #26
 800efca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800efcc:	ebaa 0303 	sub.w	r3, sl, r3
 800efd0:	eba3 0309 	sub.w	r3, r3, r9
 800efd4:	4543      	cmp	r3, r8
 800efd6:	f77f af7a 	ble.w	800eece <_printf_float+0x242>
 800efda:	2301      	movs	r3, #1
 800efdc:	465a      	mov	r2, fp
 800efde:	4631      	mov	r1, r6
 800efe0:	4628      	mov	r0, r5
 800efe2:	47b8      	blx	r7
 800efe4:	3001      	adds	r0, #1
 800efe6:	f43f aeac 	beq.w	800ed42 <_printf_float+0xb6>
 800efea:	f108 0801 	add.w	r8, r8, #1
 800efee:	e7ec      	b.n	800efca <_printf_float+0x33e>
 800eff0:	4642      	mov	r2, r8
 800eff2:	4631      	mov	r1, r6
 800eff4:	4628      	mov	r0, r5
 800eff6:	47b8      	blx	r7
 800eff8:	3001      	adds	r0, #1
 800effa:	d1c2      	bne.n	800ef82 <_printf_float+0x2f6>
 800effc:	e6a1      	b.n	800ed42 <_printf_float+0xb6>
 800effe:	2301      	movs	r3, #1
 800f000:	4631      	mov	r1, r6
 800f002:	4628      	mov	r0, r5
 800f004:	920a      	str	r2, [sp, #40]	@ 0x28
 800f006:	47b8      	blx	r7
 800f008:	3001      	adds	r0, #1
 800f00a:	f43f ae9a 	beq.w	800ed42 <_printf_float+0xb6>
 800f00e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f010:	f10b 0b01 	add.w	fp, fp, #1
 800f014:	e7bb      	b.n	800ef8e <_printf_float+0x302>
 800f016:	4631      	mov	r1, r6
 800f018:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f01c:	4628      	mov	r0, r5
 800f01e:	47b8      	blx	r7
 800f020:	3001      	adds	r0, #1
 800f022:	d1c0      	bne.n	800efa6 <_printf_float+0x31a>
 800f024:	e68d      	b.n	800ed42 <_printf_float+0xb6>
 800f026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f028:	464b      	mov	r3, r9
 800f02a:	4631      	mov	r1, r6
 800f02c:	4628      	mov	r0, r5
 800f02e:	4442      	add	r2, r8
 800f030:	47b8      	blx	r7
 800f032:	3001      	adds	r0, #1
 800f034:	d1c3      	bne.n	800efbe <_printf_float+0x332>
 800f036:	e684      	b.n	800ed42 <_printf_float+0xb6>
 800f038:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800f03c:	f1ba 0f01 	cmp.w	sl, #1
 800f040:	dc01      	bgt.n	800f046 <_printf_float+0x3ba>
 800f042:	07db      	lsls	r3, r3, #31
 800f044:	d536      	bpl.n	800f0b4 <_printf_float+0x428>
 800f046:	2301      	movs	r3, #1
 800f048:	4642      	mov	r2, r8
 800f04a:	4631      	mov	r1, r6
 800f04c:	4628      	mov	r0, r5
 800f04e:	47b8      	blx	r7
 800f050:	3001      	adds	r0, #1
 800f052:	f43f ae76 	beq.w	800ed42 <_printf_float+0xb6>
 800f056:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f05a:	4631      	mov	r1, r6
 800f05c:	4628      	mov	r0, r5
 800f05e:	47b8      	blx	r7
 800f060:	3001      	adds	r0, #1
 800f062:	f43f ae6e 	beq.w	800ed42 <_printf_float+0xb6>
 800f066:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f06a:	2200      	movs	r2, #0
 800f06c:	2300      	movs	r3, #0
 800f06e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f072:	f7f1 fcb1 	bl	80009d8 <__aeabi_dcmpeq>
 800f076:	b9c0      	cbnz	r0, 800f0aa <_printf_float+0x41e>
 800f078:	4653      	mov	r3, sl
 800f07a:	f108 0201 	add.w	r2, r8, #1
 800f07e:	4631      	mov	r1, r6
 800f080:	4628      	mov	r0, r5
 800f082:	47b8      	blx	r7
 800f084:	3001      	adds	r0, #1
 800f086:	d10c      	bne.n	800f0a2 <_printf_float+0x416>
 800f088:	e65b      	b.n	800ed42 <_printf_float+0xb6>
 800f08a:	2301      	movs	r3, #1
 800f08c:	465a      	mov	r2, fp
 800f08e:	4631      	mov	r1, r6
 800f090:	4628      	mov	r0, r5
 800f092:	47b8      	blx	r7
 800f094:	3001      	adds	r0, #1
 800f096:	f43f ae54 	beq.w	800ed42 <_printf_float+0xb6>
 800f09a:	f108 0801 	add.w	r8, r8, #1
 800f09e:	45d0      	cmp	r8, sl
 800f0a0:	dbf3      	blt.n	800f08a <_printf_float+0x3fe>
 800f0a2:	464b      	mov	r3, r9
 800f0a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f0a8:	e6e0      	b.n	800ee6c <_printf_float+0x1e0>
 800f0aa:	f04f 0800 	mov.w	r8, #0
 800f0ae:	f104 0b1a 	add.w	fp, r4, #26
 800f0b2:	e7f4      	b.n	800f09e <_printf_float+0x412>
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	4642      	mov	r2, r8
 800f0b8:	e7e1      	b.n	800f07e <_printf_float+0x3f2>
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	464a      	mov	r2, r9
 800f0be:	4631      	mov	r1, r6
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	47b8      	blx	r7
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	f43f ae3c 	beq.w	800ed42 <_printf_float+0xb6>
 800f0ca:	f108 0801 	add.w	r8, r8, #1
 800f0ce:	68e3      	ldr	r3, [r4, #12]
 800f0d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f0d2:	1a5b      	subs	r3, r3, r1
 800f0d4:	4543      	cmp	r3, r8
 800f0d6:	dcf0      	bgt.n	800f0ba <_printf_float+0x42e>
 800f0d8:	e6fd      	b.n	800eed6 <_printf_float+0x24a>
 800f0da:	f04f 0800 	mov.w	r8, #0
 800f0de:	f104 0919 	add.w	r9, r4, #25
 800f0e2:	e7f4      	b.n	800f0ce <_printf_float+0x442>

0800f0e4 <_printf_common>:
 800f0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e8:	4616      	mov	r6, r2
 800f0ea:	4698      	mov	r8, r3
 800f0ec:	688a      	ldr	r2, [r1, #8]
 800f0ee:	690b      	ldr	r3, [r1, #16]
 800f0f0:	4607      	mov	r7, r0
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	bfb8      	it	lt
 800f0f6:	4613      	movlt	r3, r2
 800f0f8:	6033      	str	r3, [r6, #0]
 800f0fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f0fe:	460c      	mov	r4, r1
 800f100:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f104:	b10a      	cbz	r2, 800f10a <_printf_common+0x26>
 800f106:	3301      	adds	r3, #1
 800f108:	6033      	str	r3, [r6, #0]
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	0699      	lsls	r1, r3, #26
 800f10e:	bf42      	ittt	mi
 800f110:	6833      	ldrmi	r3, [r6, #0]
 800f112:	3302      	addmi	r3, #2
 800f114:	6033      	strmi	r3, [r6, #0]
 800f116:	6825      	ldr	r5, [r4, #0]
 800f118:	f015 0506 	ands.w	r5, r5, #6
 800f11c:	d106      	bne.n	800f12c <_printf_common+0x48>
 800f11e:	f104 0a19 	add.w	sl, r4, #25
 800f122:	68e3      	ldr	r3, [r4, #12]
 800f124:	6832      	ldr	r2, [r6, #0]
 800f126:	1a9b      	subs	r3, r3, r2
 800f128:	42ab      	cmp	r3, r5
 800f12a:	dc2b      	bgt.n	800f184 <_printf_common+0xa0>
 800f12c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f130:	6822      	ldr	r2, [r4, #0]
 800f132:	3b00      	subs	r3, #0
 800f134:	bf18      	it	ne
 800f136:	2301      	movne	r3, #1
 800f138:	0692      	lsls	r2, r2, #26
 800f13a:	d430      	bmi.n	800f19e <_printf_common+0xba>
 800f13c:	4641      	mov	r1, r8
 800f13e:	4638      	mov	r0, r7
 800f140:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f144:	47c8      	blx	r9
 800f146:	3001      	adds	r0, #1
 800f148:	d023      	beq.n	800f192 <_printf_common+0xae>
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	6922      	ldr	r2, [r4, #16]
 800f14e:	f003 0306 	and.w	r3, r3, #6
 800f152:	2b04      	cmp	r3, #4
 800f154:	bf14      	ite	ne
 800f156:	2500      	movne	r5, #0
 800f158:	6833      	ldreq	r3, [r6, #0]
 800f15a:	f04f 0600 	mov.w	r6, #0
 800f15e:	bf08      	it	eq
 800f160:	68e5      	ldreq	r5, [r4, #12]
 800f162:	f104 041a 	add.w	r4, r4, #26
 800f166:	bf08      	it	eq
 800f168:	1aed      	subeq	r5, r5, r3
 800f16a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f16e:	bf08      	it	eq
 800f170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f174:	4293      	cmp	r3, r2
 800f176:	bfc4      	itt	gt
 800f178:	1a9b      	subgt	r3, r3, r2
 800f17a:	18ed      	addgt	r5, r5, r3
 800f17c:	42b5      	cmp	r5, r6
 800f17e:	d11a      	bne.n	800f1b6 <_printf_common+0xd2>
 800f180:	2000      	movs	r0, #0
 800f182:	e008      	b.n	800f196 <_printf_common+0xb2>
 800f184:	2301      	movs	r3, #1
 800f186:	4652      	mov	r2, sl
 800f188:	4641      	mov	r1, r8
 800f18a:	4638      	mov	r0, r7
 800f18c:	47c8      	blx	r9
 800f18e:	3001      	adds	r0, #1
 800f190:	d103      	bne.n	800f19a <_printf_common+0xb6>
 800f192:	f04f 30ff 	mov.w	r0, #4294967295
 800f196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f19a:	3501      	adds	r5, #1
 800f19c:	e7c1      	b.n	800f122 <_printf_common+0x3e>
 800f19e:	2030      	movs	r0, #48	@ 0x30
 800f1a0:	18e1      	adds	r1, r4, r3
 800f1a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f1a6:	1c5a      	adds	r2, r3, #1
 800f1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f1ac:	4422      	add	r2, r4
 800f1ae:	3302      	adds	r3, #2
 800f1b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f1b4:	e7c2      	b.n	800f13c <_printf_common+0x58>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	4622      	mov	r2, r4
 800f1ba:	4641      	mov	r1, r8
 800f1bc:	4638      	mov	r0, r7
 800f1be:	47c8      	blx	r9
 800f1c0:	3001      	adds	r0, #1
 800f1c2:	d0e6      	beq.n	800f192 <_printf_common+0xae>
 800f1c4:	3601      	adds	r6, #1
 800f1c6:	e7d9      	b.n	800f17c <_printf_common+0x98>

0800f1c8 <_printf_i>:
 800f1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1cc:	7e0f      	ldrb	r7, [r1, #24]
 800f1ce:	4691      	mov	r9, r2
 800f1d0:	2f78      	cmp	r7, #120	@ 0x78
 800f1d2:	4680      	mov	r8, r0
 800f1d4:	460c      	mov	r4, r1
 800f1d6:	469a      	mov	sl, r3
 800f1d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f1da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f1de:	d807      	bhi.n	800f1f0 <_printf_i+0x28>
 800f1e0:	2f62      	cmp	r7, #98	@ 0x62
 800f1e2:	d80a      	bhi.n	800f1fa <_printf_i+0x32>
 800f1e4:	2f00      	cmp	r7, #0
 800f1e6:	f000 80d3 	beq.w	800f390 <_printf_i+0x1c8>
 800f1ea:	2f58      	cmp	r7, #88	@ 0x58
 800f1ec:	f000 80ba 	beq.w	800f364 <_printf_i+0x19c>
 800f1f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f1f8:	e03a      	b.n	800f270 <_printf_i+0xa8>
 800f1fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f1fe:	2b15      	cmp	r3, #21
 800f200:	d8f6      	bhi.n	800f1f0 <_printf_i+0x28>
 800f202:	a101      	add	r1, pc, #4	@ (adr r1, 800f208 <_printf_i+0x40>)
 800f204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f208:	0800f261 	.word	0x0800f261
 800f20c:	0800f275 	.word	0x0800f275
 800f210:	0800f1f1 	.word	0x0800f1f1
 800f214:	0800f1f1 	.word	0x0800f1f1
 800f218:	0800f1f1 	.word	0x0800f1f1
 800f21c:	0800f1f1 	.word	0x0800f1f1
 800f220:	0800f275 	.word	0x0800f275
 800f224:	0800f1f1 	.word	0x0800f1f1
 800f228:	0800f1f1 	.word	0x0800f1f1
 800f22c:	0800f1f1 	.word	0x0800f1f1
 800f230:	0800f1f1 	.word	0x0800f1f1
 800f234:	0800f377 	.word	0x0800f377
 800f238:	0800f29f 	.word	0x0800f29f
 800f23c:	0800f331 	.word	0x0800f331
 800f240:	0800f1f1 	.word	0x0800f1f1
 800f244:	0800f1f1 	.word	0x0800f1f1
 800f248:	0800f399 	.word	0x0800f399
 800f24c:	0800f1f1 	.word	0x0800f1f1
 800f250:	0800f29f 	.word	0x0800f29f
 800f254:	0800f1f1 	.word	0x0800f1f1
 800f258:	0800f1f1 	.word	0x0800f1f1
 800f25c:	0800f339 	.word	0x0800f339
 800f260:	6833      	ldr	r3, [r6, #0]
 800f262:	1d1a      	adds	r2, r3, #4
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	6032      	str	r2, [r6, #0]
 800f268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f26c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f270:	2301      	movs	r3, #1
 800f272:	e09e      	b.n	800f3b2 <_printf_i+0x1ea>
 800f274:	6833      	ldr	r3, [r6, #0]
 800f276:	6820      	ldr	r0, [r4, #0]
 800f278:	1d19      	adds	r1, r3, #4
 800f27a:	6031      	str	r1, [r6, #0]
 800f27c:	0606      	lsls	r6, r0, #24
 800f27e:	d501      	bpl.n	800f284 <_printf_i+0xbc>
 800f280:	681d      	ldr	r5, [r3, #0]
 800f282:	e003      	b.n	800f28c <_printf_i+0xc4>
 800f284:	0645      	lsls	r5, r0, #25
 800f286:	d5fb      	bpl.n	800f280 <_printf_i+0xb8>
 800f288:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f28c:	2d00      	cmp	r5, #0
 800f28e:	da03      	bge.n	800f298 <_printf_i+0xd0>
 800f290:	232d      	movs	r3, #45	@ 0x2d
 800f292:	426d      	negs	r5, r5
 800f294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f298:	230a      	movs	r3, #10
 800f29a:	4859      	ldr	r0, [pc, #356]	@ (800f400 <_printf_i+0x238>)
 800f29c:	e011      	b.n	800f2c2 <_printf_i+0xfa>
 800f29e:	6821      	ldr	r1, [r4, #0]
 800f2a0:	6833      	ldr	r3, [r6, #0]
 800f2a2:	0608      	lsls	r0, r1, #24
 800f2a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f2a8:	d402      	bmi.n	800f2b0 <_printf_i+0xe8>
 800f2aa:	0649      	lsls	r1, r1, #25
 800f2ac:	bf48      	it	mi
 800f2ae:	b2ad      	uxthmi	r5, r5
 800f2b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f2b2:	6033      	str	r3, [r6, #0]
 800f2b4:	bf14      	ite	ne
 800f2b6:	230a      	movne	r3, #10
 800f2b8:	2308      	moveq	r3, #8
 800f2ba:	4851      	ldr	r0, [pc, #324]	@ (800f400 <_printf_i+0x238>)
 800f2bc:	2100      	movs	r1, #0
 800f2be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f2c2:	6866      	ldr	r6, [r4, #4]
 800f2c4:	2e00      	cmp	r6, #0
 800f2c6:	bfa8      	it	ge
 800f2c8:	6821      	ldrge	r1, [r4, #0]
 800f2ca:	60a6      	str	r6, [r4, #8]
 800f2cc:	bfa4      	itt	ge
 800f2ce:	f021 0104 	bicge.w	r1, r1, #4
 800f2d2:	6021      	strge	r1, [r4, #0]
 800f2d4:	b90d      	cbnz	r5, 800f2da <_printf_i+0x112>
 800f2d6:	2e00      	cmp	r6, #0
 800f2d8:	d04b      	beq.n	800f372 <_printf_i+0x1aa>
 800f2da:	4616      	mov	r6, r2
 800f2dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800f2e0:	fb03 5711 	mls	r7, r3, r1, r5
 800f2e4:	5dc7      	ldrb	r7, [r0, r7]
 800f2e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f2ea:	462f      	mov	r7, r5
 800f2ec:	42bb      	cmp	r3, r7
 800f2ee:	460d      	mov	r5, r1
 800f2f0:	d9f4      	bls.n	800f2dc <_printf_i+0x114>
 800f2f2:	2b08      	cmp	r3, #8
 800f2f4:	d10b      	bne.n	800f30e <_printf_i+0x146>
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	07df      	lsls	r7, r3, #31
 800f2fa:	d508      	bpl.n	800f30e <_printf_i+0x146>
 800f2fc:	6923      	ldr	r3, [r4, #16]
 800f2fe:	6861      	ldr	r1, [r4, #4]
 800f300:	4299      	cmp	r1, r3
 800f302:	bfde      	ittt	le
 800f304:	2330      	movle	r3, #48	@ 0x30
 800f306:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f30a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f30e:	1b92      	subs	r2, r2, r6
 800f310:	6122      	str	r2, [r4, #16]
 800f312:	464b      	mov	r3, r9
 800f314:	4621      	mov	r1, r4
 800f316:	4640      	mov	r0, r8
 800f318:	f8cd a000 	str.w	sl, [sp]
 800f31c:	aa03      	add	r2, sp, #12
 800f31e:	f7ff fee1 	bl	800f0e4 <_printf_common>
 800f322:	3001      	adds	r0, #1
 800f324:	d14a      	bne.n	800f3bc <_printf_i+0x1f4>
 800f326:	f04f 30ff 	mov.w	r0, #4294967295
 800f32a:	b004      	add	sp, #16
 800f32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	f043 0320 	orr.w	r3, r3, #32
 800f336:	6023      	str	r3, [r4, #0]
 800f338:	2778      	movs	r7, #120	@ 0x78
 800f33a:	4832      	ldr	r0, [pc, #200]	@ (800f404 <_printf_i+0x23c>)
 800f33c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f340:	6823      	ldr	r3, [r4, #0]
 800f342:	6831      	ldr	r1, [r6, #0]
 800f344:	061f      	lsls	r7, r3, #24
 800f346:	f851 5b04 	ldr.w	r5, [r1], #4
 800f34a:	d402      	bmi.n	800f352 <_printf_i+0x18a>
 800f34c:	065f      	lsls	r7, r3, #25
 800f34e:	bf48      	it	mi
 800f350:	b2ad      	uxthmi	r5, r5
 800f352:	6031      	str	r1, [r6, #0]
 800f354:	07d9      	lsls	r1, r3, #31
 800f356:	bf44      	itt	mi
 800f358:	f043 0320 	orrmi.w	r3, r3, #32
 800f35c:	6023      	strmi	r3, [r4, #0]
 800f35e:	b11d      	cbz	r5, 800f368 <_printf_i+0x1a0>
 800f360:	2310      	movs	r3, #16
 800f362:	e7ab      	b.n	800f2bc <_printf_i+0xf4>
 800f364:	4826      	ldr	r0, [pc, #152]	@ (800f400 <_printf_i+0x238>)
 800f366:	e7e9      	b.n	800f33c <_printf_i+0x174>
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	f023 0320 	bic.w	r3, r3, #32
 800f36e:	6023      	str	r3, [r4, #0]
 800f370:	e7f6      	b.n	800f360 <_printf_i+0x198>
 800f372:	4616      	mov	r6, r2
 800f374:	e7bd      	b.n	800f2f2 <_printf_i+0x12a>
 800f376:	6833      	ldr	r3, [r6, #0]
 800f378:	6825      	ldr	r5, [r4, #0]
 800f37a:	1d18      	adds	r0, r3, #4
 800f37c:	6961      	ldr	r1, [r4, #20]
 800f37e:	6030      	str	r0, [r6, #0]
 800f380:	062e      	lsls	r6, r5, #24
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	d501      	bpl.n	800f38a <_printf_i+0x1c2>
 800f386:	6019      	str	r1, [r3, #0]
 800f388:	e002      	b.n	800f390 <_printf_i+0x1c8>
 800f38a:	0668      	lsls	r0, r5, #25
 800f38c:	d5fb      	bpl.n	800f386 <_printf_i+0x1be>
 800f38e:	8019      	strh	r1, [r3, #0]
 800f390:	2300      	movs	r3, #0
 800f392:	4616      	mov	r6, r2
 800f394:	6123      	str	r3, [r4, #16]
 800f396:	e7bc      	b.n	800f312 <_printf_i+0x14a>
 800f398:	6833      	ldr	r3, [r6, #0]
 800f39a:	2100      	movs	r1, #0
 800f39c:	1d1a      	adds	r2, r3, #4
 800f39e:	6032      	str	r2, [r6, #0]
 800f3a0:	681e      	ldr	r6, [r3, #0]
 800f3a2:	6862      	ldr	r2, [r4, #4]
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	f000 fce8 	bl	800fd7a <memchr>
 800f3aa:	b108      	cbz	r0, 800f3b0 <_printf_i+0x1e8>
 800f3ac:	1b80      	subs	r0, r0, r6
 800f3ae:	6060      	str	r0, [r4, #4]
 800f3b0:	6863      	ldr	r3, [r4, #4]
 800f3b2:	6123      	str	r3, [r4, #16]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3ba:	e7aa      	b.n	800f312 <_printf_i+0x14a>
 800f3bc:	4632      	mov	r2, r6
 800f3be:	4649      	mov	r1, r9
 800f3c0:	4640      	mov	r0, r8
 800f3c2:	6923      	ldr	r3, [r4, #16]
 800f3c4:	47d0      	blx	sl
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	d0ad      	beq.n	800f326 <_printf_i+0x15e>
 800f3ca:	6823      	ldr	r3, [r4, #0]
 800f3cc:	079b      	lsls	r3, r3, #30
 800f3ce:	d413      	bmi.n	800f3f8 <_printf_i+0x230>
 800f3d0:	68e0      	ldr	r0, [r4, #12]
 800f3d2:	9b03      	ldr	r3, [sp, #12]
 800f3d4:	4298      	cmp	r0, r3
 800f3d6:	bfb8      	it	lt
 800f3d8:	4618      	movlt	r0, r3
 800f3da:	e7a6      	b.n	800f32a <_printf_i+0x162>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	4632      	mov	r2, r6
 800f3e0:	4649      	mov	r1, r9
 800f3e2:	4640      	mov	r0, r8
 800f3e4:	47d0      	blx	sl
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	d09d      	beq.n	800f326 <_printf_i+0x15e>
 800f3ea:	3501      	adds	r5, #1
 800f3ec:	68e3      	ldr	r3, [r4, #12]
 800f3ee:	9903      	ldr	r1, [sp, #12]
 800f3f0:	1a5b      	subs	r3, r3, r1
 800f3f2:	42ab      	cmp	r3, r5
 800f3f4:	dcf2      	bgt.n	800f3dc <_printf_i+0x214>
 800f3f6:	e7eb      	b.n	800f3d0 <_printf_i+0x208>
 800f3f8:	2500      	movs	r5, #0
 800f3fa:	f104 0619 	add.w	r6, r4, #25
 800f3fe:	e7f5      	b.n	800f3ec <_printf_i+0x224>
 800f400:	08014698 	.word	0x08014698
 800f404:	080146a9 	.word	0x080146a9

0800f408 <_scanf_float>:
 800f408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40c:	b087      	sub	sp, #28
 800f40e:	9303      	str	r3, [sp, #12]
 800f410:	688b      	ldr	r3, [r1, #8]
 800f412:	4617      	mov	r7, r2
 800f414:	1e5a      	subs	r2, r3, #1
 800f416:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f41a:	bf82      	ittt	hi
 800f41c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f420:	eb03 0b05 	addhi.w	fp, r3, r5
 800f424:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f428:	460a      	mov	r2, r1
 800f42a:	f04f 0500 	mov.w	r5, #0
 800f42e:	bf88      	it	hi
 800f430:	608b      	strhi	r3, [r1, #8]
 800f432:	680b      	ldr	r3, [r1, #0]
 800f434:	4680      	mov	r8, r0
 800f436:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f43a:	f842 3b1c 	str.w	r3, [r2], #28
 800f43e:	460c      	mov	r4, r1
 800f440:	bf98      	it	ls
 800f442:	f04f 0b00 	movls.w	fp, #0
 800f446:	4616      	mov	r6, r2
 800f448:	46aa      	mov	sl, r5
 800f44a:	46a9      	mov	r9, r5
 800f44c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f450:	9201      	str	r2, [sp, #4]
 800f452:	9502      	str	r5, [sp, #8]
 800f454:	68a2      	ldr	r2, [r4, #8]
 800f456:	b152      	cbz	r2, 800f46e <_scanf_float+0x66>
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	2b4e      	cmp	r3, #78	@ 0x4e
 800f45e:	d865      	bhi.n	800f52c <_scanf_float+0x124>
 800f460:	2b40      	cmp	r3, #64	@ 0x40
 800f462:	d83d      	bhi.n	800f4e0 <_scanf_float+0xd8>
 800f464:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f468:	b2c8      	uxtb	r0, r1
 800f46a:	280e      	cmp	r0, #14
 800f46c:	d93b      	bls.n	800f4e6 <_scanf_float+0xde>
 800f46e:	f1b9 0f00 	cmp.w	r9, #0
 800f472:	d003      	beq.n	800f47c <_scanf_float+0x74>
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f47a:	6023      	str	r3, [r4, #0]
 800f47c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f480:	f1ba 0f01 	cmp.w	sl, #1
 800f484:	f200 8118 	bhi.w	800f6b8 <_scanf_float+0x2b0>
 800f488:	9b01      	ldr	r3, [sp, #4]
 800f48a:	429e      	cmp	r6, r3
 800f48c:	f200 8109 	bhi.w	800f6a2 <_scanf_float+0x29a>
 800f490:	2001      	movs	r0, #1
 800f492:	b007      	add	sp, #28
 800f494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f498:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f49c:	2a0d      	cmp	r2, #13
 800f49e:	d8e6      	bhi.n	800f46e <_scanf_float+0x66>
 800f4a0:	a101      	add	r1, pc, #4	@ (adr r1, 800f4a8 <_scanf_float+0xa0>)
 800f4a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f4a6:	bf00      	nop
 800f4a8:	0800f5ef 	.word	0x0800f5ef
 800f4ac:	0800f46f 	.word	0x0800f46f
 800f4b0:	0800f46f 	.word	0x0800f46f
 800f4b4:	0800f46f 	.word	0x0800f46f
 800f4b8:	0800f64f 	.word	0x0800f64f
 800f4bc:	0800f627 	.word	0x0800f627
 800f4c0:	0800f46f 	.word	0x0800f46f
 800f4c4:	0800f46f 	.word	0x0800f46f
 800f4c8:	0800f5fd 	.word	0x0800f5fd
 800f4cc:	0800f46f 	.word	0x0800f46f
 800f4d0:	0800f46f 	.word	0x0800f46f
 800f4d4:	0800f46f 	.word	0x0800f46f
 800f4d8:	0800f46f 	.word	0x0800f46f
 800f4dc:	0800f5b5 	.word	0x0800f5b5
 800f4e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f4e4:	e7da      	b.n	800f49c <_scanf_float+0x94>
 800f4e6:	290e      	cmp	r1, #14
 800f4e8:	d8c1      	bhi.n	800f46e <_scanf_float+0x66>
 800f4ea:	a001      	add	r0, pc, #4	@ (adr r0, 800f4f0 <_scanf_float+0xe8>)
 800f4ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f4f0:	0800f5a5 	.word	0x0800f5a5
 800f4f4:	0800f46f 	.word	0x0800f46f
 800f4f8:	0800f5a5 	.word	0x0800f5a5
 800f4fc:	0800f63b 	.word	0x0800f63b
 800f500:	0800f46f 	.word	0x0800f46f
 800f504:	0800f54d 	.word	0x0800f54d
 800f508:	0800f58b 	.word	0x0800f58b
 800f50c:	0800f58b 	.word	0x0800f58b
 800f510:	0800f58b 	.word	0x0800f58b
 800f514:	0800f58b 	.word	0x0800f58b
 800f518:	0800f58b 	.word	0x0800f58b
 800f51c:	0800f58b 	.word	0x0800f58b
 800f520:	0800f58b 	.word	0x0800f58b
 800f524:	0800f58b 	.word	0x0800f58b
 800f528:	0800f58b 	.word	0x0800f58b
 800f52c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f52e:	d809      	bhi.n	800f544 <_scanf_float+0x13c>
 800f530:	2b60      	cmp	r3, #96	@ 0x60
 800f532:	d8b1      	bhi.n	800f498 <_scanf_float+0x90>
 800f534:	2b54      	cmp	r3, #84	@ 0x54
 800f536:	d07b      	beq.n	800f630 <_scanf_float+0x228>
 800f538:	2b59      	cmp	r3, #89	@ 0x59
 800f53a:	d198      	bne.n	800f46e <_scanf_float+0x66>
 800f53c:	2d07      	cmp	r5, #7
 800f53e:	d196      	bne.n	800f46e <_scanf_float+0x66>
 800f540:	2508      	movs	r5, #8
 800f542:	e02c      	b.n	800f59e <_scanf_float+0x196>
 800f544:	2b74      	cmp	r3, #116	@ 0x74
 800f546:	d073      	beq.n	800f630 <_scanf_float+0x228>
 800f548:	2b79      	cmp	r3, #121	@ 0x79
 800f54a:	e7f6      	b.n	800f53a <_scanf_float+0x132>
 800f54c:	6821      	ldr	r1, [r4, #0]
 800f54e:	05c8      	lsls	r0, r1, #23
 800f550:	d51b      	bpl.n	800f58a <_scanf_float+0x182>
 800f552:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f556:	6021      	str	r1, [r4, #0]
 800f558:	f109 0901 	add.w	r9, r9, #1
 800f55c:	f1bb 0f00 	cmp.w	fp, #0
 800f560:	d003      	beq.n	800f56a <_scanf_float+0x162>
 800f562:	3201      	adds	r2, #1
 800f564:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f568:	60a2      	str	r2, [r4, #8]
 800f56a:	68a3      	ldr	r3, [r4, #8]
 800f56c:	3b01      	subs	r3, #1
 800f56e:	60a3      	str	r3, [r4, #8]
 800f570:	6923      	ldr	r3, [r4, #16]
 800f572:	3301      	adds	r3, #1
 800f574:	6123      	str	r3, [r4, #16]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	3b01      	subs	r3, #1
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	607b      	str	r3, [r7, #4]
 800f57e:	f340 8087 	ble.w	800f690 <_scanf_float+0x288>
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	3301      	adds	r3, #1
 800f586:	603b      	str	r3, [r7, #0]
 800f588:	e764      	b.n	800f454 <_scanf_float+0x4c>
 800f58a:	eb1a 0105 	adds.w	r1, sl, r5
 800f58e:	f47f af6e 	bne.w	800f46e <_scanf_float+0x66>
 800f592:	460d      	mov	r5, r1
 800f594:	468a      	mov	sl, r1
 800f596:	6822      	ldr	r2, [r4, #0]
 800f598:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f59c:	6022      	str	r2, [r4, #0]
 800f59e:	f806 3b01 	strb.w	r3, [r6], #1
 800f5a2:	e7e2      	b.n	800f56a <_scanf_float+0x162>
 800f5a4:	6822      	ldr	r2, [r4, #0]
 800f5a6:	0610      	lsls	r0, r2, #24
 800f5a8:	f57f af61 	bpl.w	800f46e <_scanf_float+0x66>
 800f5ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f5b0:	6022      	str	r2, [r4, #0]
 800f5b2:	e7f4      	b.n	800f59e <_scanf_float+0x196>
 800f5b4:	f1ba 0f00 	cmp.w	sl, #0
 800f5b8:	d10e      	bne.n	800f5d8 <_scanf_float+0x1d0>
 800f5ba:	f1b9 0f00 	cmp.w	r9, #0
 800f5be:	d10e      	bne.n	800f5de <_scanf_float+0x1d6>
 800f5c0:	6822      	ldr	r2, [r4, #0]
 800f5c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f5c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f5ca:	d108      	bne.n	800f5de <_scanf_float+0x1d6>
 800f5cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f5d0:	f04f 0a01 	mov.w	sl, #1
 800f5d4:	6022      	str	r2, [r4, #0]
 800f5d6:	e7e2      	b.n	800f59e <_scanf_float+0x196>
 800f5d8:	f1ba 0f02 	cmp.w	sl, #2
 800f5dc:	d055      	beq.n	800f68a <_scanf_float+0x282>
 800f5de:	2d01      	cmp	r5, #1
 800f5e0:	d002      	beq.n	800f5e8 <_scanf_float+0x1e0>
 800f5e2:	2d04      	cmp	r5, #4
 800f5e4:	f47f af43 	bne.w	800f46e <_scanf_float+0x66>
 800f5e8:	3501      	adds	r5, #1
 800f5ea:	b2ed      	uxtb	r5, r5
 800f5ec:	e7d7      	b.n	800f59e <_scanf_float+0x196>
 800f5ee:	f1ba 0f01 	cmp.w	sl, #1
 800f5f2:	f47f af3c 	bne.w	800f46e <_scanf_float+0x66>
 800f5f6:	f04f 0a02 	mov.w	sl, #2
 800f5fa:	e7d0      	b.n	800f59e <_scanf_float+0x196>
 800f5fc:	b97d      	cbnz	r5, 800f61e <_scanf_float+0x216>
 800f5fe:	f1b9 0f00 	cmp.w	r9, #0
 800f602:	f47f af37 	bne.w	800f474 <_scanf_float+0x6c>
 800f606:	6822      	ldr	r2, [r4, #0]
 800f608:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f60c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f610:	f040 8103 	bne.w	800f81a <_scanf_float+0x412>
 800f614:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f618:	2501      	movs	r5, #1
 800f61a:	6022      	str	r2, [r4, #0]
 800f61c:	e7bf      	b.n	800f59e <_scanf_float+0x196>
 800f61e:	2d03      	cmp	r5, #3
 800f620:	d0e2      	beq.n	800f5e8 <_scanf_float+0x1e0>
 800f622:	2d05      	cmp	r5, #5
 800f624:	e7de      	b.n	800f5e4 <_scanf_float+0x1dc>
 800f626:	2d02      	cmp	r5, #2
 800f628:	f47f af21 	bne.w	800f46e <_scanf_float+0x66>
 800f62c:	2503      	movs	r5, #3
 800f62e:	e7b6      	b.n	800f59e <_scanf_float+0x196>
 800f630:	2d06      	cmp	r5, #6
 800f632:	f47f af1c 	bne.w	800f46e <_scanf_float+0x66>
 800f636:	2507      	movs	r5, #7
 800f638:	e7b1      	b.n	800f59e <_scanf_float+0x196>
 800f63a:	6822      	ldr	r2, [r4, #0]
 800f63c:	0591      	lsls	r1, r2, #22
 800f63e:	f57f af16 	bpl.w	800f46e <_scanf_float+0x66>
 800f642:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f646:	6022      	str	r2, [r4, #0]
 800f648:	f8cd 9008 	str.w	r9, [sp, #8]
 800f64c:	e7a7      	b.n	800f59e <_scanf_float+0x196>
 800f64e:	6822      	ldr	r2, [r4, #0]
 800f650:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f654:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f658:	d006      	beq.n	800f668 <_scanf_float+0x260>
 800f65a:	0550      	lsls	r0, r2, #21
 800f65c:	f57f af07 	bpl.w	800f46e <_scanf_float+0x66>
 800f660:	f1b9 0f00 	cmp.w	r9, #0
 800f664:	f000 80d9 	beq.w	800f81a <_scanf_float+0x412>
 800f668:	0591      	lsls	r1, r2, #22
 800f66a:	bf58      	it	pl
 800f66c:	9902      	ldrpl	r1, [sp, #8]
 800f66e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f672:	bf58      	it	pl
 800f674:	eba9 0101 	subpl.w	r1, r9, r1
 800f678:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f67c:	f04f 0900 	mov.w	r9, #0
 800f680:	bf58      	it	pl
 800f682:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f686:	6022      	str	r2, [r4, #0]
 800f688:	e789      	b.n	800f59e <_scanf_float+0x196>
 800f68a:	f04f 0a03 	mov.w	sl, #3
 800f68e:	e786      	b.n	800f59e <_scanf_float+0x196>
 800f690:	4639      	mov	r1, r7
 800f692:	4640      	mov	r0, r8
 800f694:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f698:	4798      	blx	r3
 800f69a:	2800      	cmp	r0, #0
 800f69c:	f43f aeda 	beq.w	800f454 <_scanf_float+0x4c>
 800f6a0:	e6e5      	b.n	800f46e <_scanf_float+0x66>
 800f6a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f6a6:	463a      	mov	r2, r7
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f6ae:	4798      	blx	r3
 800f6b0:	6923      	ldr	r3, [r4, #16]
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	6123      	str	r3, [r4, #16]
 800f6b6:	e6e7      	b.n	800f488 <_scanf_float+0x80>
 800f6b8:	1e6b      	subs	r3, r5, #1
 800f6ba:	2b06      	cmp	r3, #6
 800f6bc:	d824      	bhi.n	800f708 <_scanf_float+0x300>
 800f6be:	2d02      	cmp	r5, #2
 800f6c0:	d836      	bhi.n	800f730 <_scanf_float+0x328>
 800f6c2:	9b01      	ldr	r3, [sp, #4]
 800f6c4:	429e      	cmp	r6, r3
 800f6c6:	f67f aee3 	bls.w	800f490 <_scanf_float+0x88>
 800f6ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f6ce:	463a      	mov	r2, r7
 800f6d0:	4640      	mov	r0, r8
 800f6d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f6d6:	4798      	blx	r3
 800f6d8:	6923      	ldr	r3, [r4, #16]
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	6123      	str	r3, [r4, #16]
 800f6de:	e7f0      	b.n	800f6c2 <_scanf_float+0x2ba>
 800f6e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f6e4:	463a      	mov	r2, r7
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f6ec:	4798      	blx	r3
 800f6ee:	6923      	ldr	r3, [r4, #16]
 800f6f0:	3b01      	subs	r3, #1
 800f6f2:	6123      	str	r3, [r4, #16]
 800f6f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6f8:	fa5f fa8a 	uxtb.w	sl, sl
 800f6fc:	f1ba 0f02 	cmp.w	sl, #2
 800f700:	d1ee      	bne.n	800f6e0 <_scanf_float+0x2d8>
 800f702:	3d03      	subs	r5, #3
 800f704:	b2ed      	uxtb	r5, r5
 800f706:	1b76      	subs	r6, r6, r5
 800f708:	6823      	ldr	r3, [r4, #0]
 800f70a:	05da      	lsls	r2, r3, #23
 800f70c:	d530      	bpl.n	800f770 <_scanf_float+0x368>
 800f70e:	055b      	lsls	r3, r3, #21
 800f710:	d511      	bpl.n	800f736 <_scanf_float+0x32e>
 800f712:	9b01      	ldr	r3, [sp, #4]
 800f714:	429e      	cmp	r6, r3
 800f716:	f67f aebb 	bls.w	800f490 <_scanf_float+0x88>
 800f71a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f71e:	463a      	mov	r2, r7
 800f720:	4640      	mov	r0, r8
 800f722:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f726:	4798      	blx	r3
 800f728:	6923      	ldr	r3, [r4, #16]
 800f72a:	3b01      	subs	r3, #1
 800f72c:	6123      	str	r3, [r4, #16]
 800f72e:	e7f0      	b.n	800f712 <_scanf_float+0x30a>
 800f730:	46aa      	mov	sl, r5
 800f732:	46b3      	mov	fp, r6
 800f734:	e7de      	b.n	800f6f4 <_scanf_float+0x2ec>
 800f736:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f73a:	6923      	ldr	r3, [r4, #16]
 800f73c:	2965      	cmp	r1, #101	@ 0x65
 800f73e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f742:	f106 35ff 	add.w	r5, r6, #4294967295
 800f746:	6123      	str	r3, [r4, #16]
 800f748:	d00c      	beq.n	800f764 <_scanf_float+0x35c>
 800f74a:	2945      	cmp	r1, #69	@ 0x45
 800f74c:	d00a      	beq.n	800f764 <_scanf_float+0x35c>
 800f74e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f752:	463a      	mov	r2, r7
 800f754:	4640      	mov	r0, r8
 800f756:	4798      	blx	r3
 800f758:	6923      	ldr	r3, [r4, #16]
 800f75a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f75e:	3b01      	subs	r3, #1
 800f760:	1eb5      	subs	r5, r6, #2
 800f762:	6123      	str	r3, [r4, #16]
 800f764:	463a      	mov	r2, r7
 800f766:	4640      	mov	r0, r8
 800f768:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f76c:	4798      	blx	r3
 800f76e:	462e      	mov	r6, r5
 800f770:	6822      	ldr	r2, [r4, #0]
 800f772:	f012 0210 	ands.w	r2, r2, #16
 800f776:	d001      	beq.n	800f77c <_scanf_float+0x374>
 800f778:	2000      	movs	r0, #0
 800f77a:	e68a      	b.n	800f492 <_scanf_float+0x8a>
 800f77c:	7032      	strb	r2, [r6, #0]
 800f77e:	6823      	ldr	r3, [r4, #0]
 800f780:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f788:	d11c      	bne.n	800f7c4 <_scanf_float+0x3bc>
 800f78a:	9b02      	ldr	r3, [sp, #8]
 800f78c:	454b      	cmp	r3, r9
 800f78e:	eba3 0209 	sub.w	r2, r3, r9
 800f792:	d123      	bne.n	800f7dc <_scanf_float+0x3d4>
 800f794:	2200      	movs	r2, #0
 800f796:	4640      	mov	r0, r8
 800f798:	9901      	ldr	r1, [sp, #4]
 800f79a:	f002 fcf1 	bl	8012180 <_strtod_r>
 800f79e:	9b03      	ldr	r3, [sp, #12]
 800f7a0:	6825      	ldr	r5, [r4, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f015 0f02 	tst.w	r5, #2
 800f7a8:	4606      	mov	r6, r0
 800f7aa:	460f      	mov	r7, r1
 800f7ac:	f103 0204 	add.w	r2, r3, #4
 800f7b0:	d01f      	beq.n	800f7f2 <_scanf_float+0x3ea>
 800f7b2:	9903      	ldr	r1, [sp, #12]
 800f7b4:	600a      	str	r2, [r1, #0]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	e9c3 6700 	strd	r6, r7, [r3]
 800f7bc:	68e3      	ldr	r3, [r4, #12]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	60e3      	str	r3, [r4, #12]
 800f7c2:	e7d9      	b.n	800f778 <_scanf_float+0x370>
 800f7c4:	9b04      	ldr	r3, [sp, #16]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d0e4      	beq.n	800f794 <_scanf_float+0x38c>
 800f7ca:	9905      	ldr	r1, [sp, #20]
 800f7cc:	230a      	movs	r3, #10
 800f7ce:	4640      	mov	r0, r8
 800f7d0:	3101      	adds	r1, #1
 800f7d2:	f002 fd55 	bl	8012280 <_strtol_r>
 800f7d6:	9b04      	ldr	r3, [sp, #16]
 800f7d8:	9e05      	ldr	r6, [sp, #20]
 800f7da:	1ac2      	subs	r2, r0, r3
 800f7dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f7e0:	429e      	cmp	r6, r3
 800f7e2:	bf28      	it	cs
 800f7e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	490d      	ldr	r1, [pc, #52]	@ (800f820 <_scanf_float+0x418>)
 800f7ec:	f000 f94e 	bl	800fa8c <siprintf>
 800f7f0:	e7d0      	b.n	800f794 <_scanf_float+0x38c>
 800f7f2:	076d      	lsls	r5, r5, #29
 800f7f4:	d4dd      	bmi.n	800f7b2 <_scanf_float+0x3aa>
 800f7f6:	9d03      	ldr	r5, [sp, #12]
 800f7f8:	602a      	str	r2, [r5, #0]
 800f7fa:	681d      	ldr	r5, [r3, #0]
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	f7f1 f91c 	bl	8000a3c <__aeabi_dcmpun>
 800f804:	b120      	cbz	r0, 800f810 <_scanf_float+0x408>
 800f806:	4807      	ldr	r0, [pc, #28]	@ (800f824 <_scanf_float+0x41c>)
 800f808:	f000 fac6 	bl	800fd98 <nanf>
 800f80c:	6028      	str	r0, [r5, #0]
 800f80e:	e7d5      	b.n	800f7bc <_scanf_float+0x3b4>
 800f810:	4630      	mov	r0, r6
 800f812:	4639      	mov	r1, r7
 800f814:	f7f1 f970 	bl	8000af8 <__aeabi_d2f>
 800f818:	e7f8      	b.n	800f80c <_scanf_float+0x404>
 800f81a:	f04f 0900 	mov.w	r9, #0
 800f81e:	e62d      	b.n	800f47c <_scanf_float+0x74>
 800f820:	080146ba 	.word	0x080146ba
 800f824:	08014a55 	.word	0x08014a55

0800f828 <std>:
 800f828:	2300      	movs	r3, #0
 800f82a:	b510      	push	{r4, lr}
 800f82c:	4604      	mov	r4, r0
 800f82e:	e9c0 3300 	strd	r3, r3, [r0]
 800f832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f836:	6083      	str	r3, [r0, #8]
 800f838:	8181      	strh	r1, [r0, #12]
 800f83a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f83c:	81c2      	strh	r2, [r0, #14]
 800f83e:	6183      	str	r3, [r0, #24]
 800f840:	4619      	mov	r1, r3
 800f842:	2208      	movs	r2, #8
 800f844:	305c      	adds	r0, #92	@ 0x5c
 800f846:	f000 fa19 	bl	800fc7c <memset>
 800f84a:	4b0d      	ldr	r3, [pc, #52]	@ (800f880 <std+0x58>)
 800f84c:	6224      	str	r4, [r4, #32]
 800f84e:	6263      	str	r3, [r4, #36]	@ 0x24
 800f850:	4b0c      	ldr	r3, [pc, #48]	@ (800f884 <std+0x5c>)
 800f852:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f854:	4b0c      	ldr	r3, [pc, #48]	@ (800f888 <std+0x60>)
 800f856:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f858:	4b0c      	ldr	r3, [pc, #48]	@ (800f88c <std+0x64>)
 800f85a:	6323      	str	r3, [r4, #48]	@ 0x30
 800f85c:	4b0c      	ldr	r3, [pc, #48]	@ (800f890 <std+0x68>)
 800f85e:	429c      	cmp	r4, r3
 800f860:	d006      	beq.n	800f870 <std+0x48>
 800f862:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f866:	4294      	cmp	r4, r2
 800f868:	d002      	beq.n	800f870 <std+0x48>
 800f86a:	33d0      	adds	r3, #208	@ 0xd0
 800f86c:	429c      	cmp	r4, r3
 800f86e:	d105      	bne.n	800f87c <std+0x54>
 800f870:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f878:	f000 ba7c 	b.w	800fd74 <__retarget_lock_init_recursive>
 800f87c:	bd10      	pop	{r4, pc}
 800f87e:	bf00      	nop
 800f880:	0800facd 	.word	0x0800facd
 800f884:	0800faef 	.word	0x0800faef
 800f888:	0800fb27 	.word	0x0800fb27
 800f88c:	0800fb4b 	.word	0x0800fb4b
 800f890:	2000077c 	.word	0x2000077c

0800f894 <stdio_exit_handler>:
 800f894:	4a02      	ldr	r2, [pc, #8]	@ (800f8a0 <stdio_exit_handler+0xc>)
 800f896:	4903      	ldr	r1, [pc, #12]	@ (800f8a4 <stdio_exit_handler+0x10>)
 800f898:	4803      	ldr	r0, [pc, #12]	@ (800f8a8 <stdio_exit_handler+0x14>)
 800f89a:	f000 b869 	b.w	800f970 <_fwalk_sglue>
 800f89e:	bf00      	nop
 800f8a0:	20000198 	.word	0x20000198
 800f8a4:	080128b5 	.word	0x080128b5
 800f8a8:	200001a8 	.word	0x200001a8

0800f8ac <cleanup_stdio>:
 800f8ac:	6841      	ldr	r1, [r0, #4]
 800f8ae:	4b0c      	ldr	r3, [pc, #48]	@ (800f8e0 <cleanup_stdio+0x34>)
 800f8b0:	b510      	push	{r4, lr}
 800f8b2:	4299      	cmp	r1, r3
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	d001      	beq.n	800f8bc <cleanup_stdio+0x10>
 800f8b8:	f002 fffc 	bl	80128b4 <_fflush_r>
 800f8bc:	68a1      	ldr	r1, [r4, #8]
 800f8be:	4b09      	ldr	r3, [pc, #36]	@ (800f8e4 <cleanup_stdio+0x38>)
 800f8c0:	4299      	cmp	r1, r3
 800f8c2:	d002      	beq.n	800f8ca <cleanup_stdio+0x1e>
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f002 fff5 	bl	80128b4 <_fflush_r>
 800f8ca:	68e1      	ldr	r1, [r4, #12]
 800f8cc:	4b06      	ldr	r3, [pc, #24]	@ (800f8e8 <cleanup_stdio+0x3c>)
 800f8ce:	4299      	cmp	r1, r3
 800f8d0:	d004      	beq.n	800f8dc <cleanup_stdio+0x30>
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8d8:	f002 bfec 	b.w	80128b4 <_fflush_r>
 800f8dc:	bd10      	pop	{r4, pc}
 800f8de:	bf00      	nop
 800f8e0:	2000077c 	.word	0x2000077c
 800f8e4:	200007e4 	.word	0x200007e4
 800f8e8:	2000084c 	.word	0x2000084c

0800f8ec <global_stdio_init.part.0>:
 800f8ec:	b510      	push	{r4, lr}
 800f8ee:	4b0b      	ldr	r3, [pc, #44]	@ (800f91c <global_stdio_init.part.0+0x30>)
 800f8f0:	4c0b      	ldr	r4, [pc, #44]	@ (800f920 <global_stdio_init.part.0+0x34>)
 800f8f2:	4a0c      	ldr	r2, [pc, #48]	@ (800f924 <global_stdio_init.part.0+0x38>)
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	601a      	str	r2, [r3, #0]
 800f8f8:	2104      	movs	r1, #4
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f7ff ff94 	bl	800f828 <std>
 800f900:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f904:	2201      	movs	r2, #1
 800f906:	2109      	movs	r1, #9
 800f908:	f7ff ff8e 	bl	800f828 <std>
 800f90c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f910:	2202      	movs	r2, #2
 800f912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f916:	2112      	movs	r1, #18
 800f918:	f7ff bf86 	b.w	800f828 <std>
 800f91c:	200008b4 	.word	0x200008b4
 800f920:	2000077c 	.word	0x2000077c
 800f924:	0800f895 	.word	0x0800f895

0800f928 <__sfp_lock_acquire>:
 800f928:	4801      	ldr	r0, [pc, #4]	@ (800f930 <__sfp_lock_acquire+0x8>)
 800f92a:	f000 ba24 	b.w	800fd76 <__retarget_lock_acquire_recursive>
 800f92e:	bf00      	nop
 800f930:	200008bd 	.word	0x200008bd

0800f934 <__sfp_lock_release>:
 800f934:	4801      	ldr	r0, [pc, #4]	@ (800f93c <__sfp_lock_release+0x8>)
 800f936:	f000 ba1f 	b.w	800fd78 <__retarget_lock_release_recursive>
 800f93a:	bf00      	nop
 800f93c:	200008bd 	.word	0x200008bd

0800f940 <__sinit>:
 800f940:	b510      	push	{r4, lr}
 800f942:	4604      	mov	r4, r0
 800f944:	f7ff fff0 	bl	800f928 <__sfp_lock_acquire>
 800f948:	6a23      	ldr	r3, [r4, #32]
 800f94a:	b11b      	cbz	r3, 800f954 <__sinit+0x14>
 800f94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f950:	f7ff bff0 	b.w	800f934 <__sfp_lock_release>
 800f954:	4b04      	ldr	r3, [pc, #16]	@ (800f968 <__sinit+0x28>)
 800f956:	6223      	str	r3, [r4, #32]
 800f958:	4b04      	ldr	r3, [pc, #16]	@ (800f96c <__sinit+0x2c>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1f5      	bne.n	800f94c <__sinit+0xc>
 800f960:	f7ff ffc4 	bl	800f8ec <global_stdio_init.part.0>
 800f964:	e7f2      	b.n	800f94c <__sinit+0xc>
 800f966:	bf00      	nop
 800f968:	0800f8ad 	.word	0x0800f8ad
 800f96c:	200008b4 	.word	0x200008b4

0800f970 <_fwalk_sglue>:
 800f970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f974:	4607      	mov	r7, r0
 800f976:	4688      	mov	r8, r1
 800f978:	4614      	mov	r4, r2
 800f97a:	2600      	movs	r6, #0
 800f97c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f980:	f1b9 0901 	subs.w	r9, r9, #1
 800f984:	d505      	bpl.n	800f992 <_fwalk_sglue+0x22>
 800f986:	6824      	ldr	r4, [r4, #0]
 800f988:	2c00      	cmp	r4, #0
 800f98a:	d1f7      	bne.n	800f97c <_fwalk_sglue+0xc>
 800f98c:	4630      	mov	r0, r6
 800f98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f992:	89ab      	ldrh	r3, [r5, #12]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d907      	bls.n	800f9a8 <_fwalk_sglue+0x38>
 800f998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f99c:	3301      	adds	r3, #1
 800f99e:	d003      	beq.n	800f9a8 <_fwalk_sglue+0x38>
 800f9a0:	4629      	mov	r1, r5
 800f9a2:	4638      	mov	r0, r7
 800f9a4:	47c0      	blx	r8
 800f9a6:	4306      	orrs	r6, r0
 800f9a8:	3568      	adds	r5, #104	@ 0x68
 800f9aa:	e7e9      	b.n	800f980 <_fwalk_sglue+0x10>

0800f9ac <iprintf>:
 800f9ac:	b40f      	push	{r0, r1, r2, r3}
 800f9ae:	b507      	push	{r0, r1, r2, lr}
 800f9b0:	4906      	ldr	r1, [pc, #24]	@ (800f9cc <iprintf+0x20>)
 800f9b2:	ab04      	add	r3, sp, #16
 800f9b4:	6808      	ldr	r0, [r1, #0]
 800f9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9ba:	6881      	ldr	r1, [r0, #8]
 800f9bc:	9301      	str	r3, [sp, #4]
 800f9be:	f002 fde1 	bl	8012584 <_vfiprintf_r>
 800f9c2:	b003      	add	sp, #12
 800f9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9c8:	b004      	add	sp, #16
 800f9ca:	4770      	bx	lr
 800f9cc:	200001a4 	.word	0x200001a4

0800f9d0 <_puts_r>:
 800f9d0:	6a03      	ldr	r3, [r0, #32]
 800f9d2:	b570      	push	{r4, r5, r6, lr}
 800f9d4:	4605      	mov	r5, r0
 800f9d6:	460e      	mov	r6, r1
 800f9d8:	6884      	ldr	r4, [r0, #8]
 800f9da:	b90b      	cbnz	r3, 800f9e0 <_puts_r+0x10>
 800f9dc:	f7ff ffb0 	bl	800f940 <__sinit>
 800f9e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f9e2:	07db      	lsls	r3, r3, #31
 800f9e4:	d405      	bmi.n	800f9f2 <_puts_r+0x22>
 800f9e6:	89a3      	ldrh	r3, [r4, #12]
 800f9e8:	0598      	lsls	r0, r3, #22
 800f9ea:	d402      	bmi.n	800f9f2 <_puts_r+0x22>
 800f9ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9ee:	f000 f9c2 	bl	800fd76 <__retarget_lock_acquire_recursive>
 800f9f2:	89a3      	ldrh	r3, [r4, #12]
 800f9f4:	0719      	lsls	r1, r3, #28
 800f9f6:	d502      	bpl.n	800f9fe <_puts_r+0x2e>
 800f9f8:	6923      	ldr	r3, [r4, #16]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d135      	bne.n	800fa6a <_puts_r+0x9a>
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4628      	mov	r0, r5
 800fa02:	f000 f8e5 	bl	800fbd0 <__swsetup_r>
 800fa06:	b380      	cbz	r0, 800fa6a <_puts_r+0x9a>
 800fa08:	f04f 35ff 	mov.w	r5, #4294967295
 800fa0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa0e:	07da      	lsls	r2, r3, #31
 800fa10:	d405      	bmi.n	800fa1e <_puts_r+0x4e>
 800fa12:	89a3      	ldrh	r3, [r4, #12]
 800fa14:	059b      	lsls	r3, r3, #22
 800fa16:	d402      	bmi.n	800fa1e <_puts_r+0x4e>
 800fa18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa1a:	f000 f9ad 	bl	800fd78 <__retarget_lock_release_recursive>
 800fa1e:	4628      	mov	r0, r5
 800fa20:	bd70      	pop	{r4, r5, r6, pc}
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	da04      	bge.n	800fa30 <_puts_r+0x60>
 800fa26:	69a2      	ldr	r2, [r4, #24]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	dc17      	bgt.n	800fa5c <_puts_r+0x8c>
 800fa2c:	290a      	cmp	r1, #10
 800fa2e:	d015      	beq.n	800fa5c <_puts_r+0x8c>
 800fa30:	6823      	ldr	r3, [r4, #0]
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	6022      	str	r2, [r4, #0]
 800fa36:	7019      	strb	r1, [r3, #0]
 800fa38:	68a3      	ldr	r3, [r4, #8]
 800fa3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	60a3      	str	r3, [r4, #8]
 800fa42:	2900      	cmp	r1, #0
 800fa44:	d1ed      	bne.n	800fa22 <_puts_r+0x52>
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	da11      	bge.n	800fa6e <_puts_r+0x9e>
 800fa4a:	4622      	mov	r2, r4
 800fa4c:	210a      	movs	r1, #10
 800fa4e:	4628      	mov	r0, r5
 800fa50:	f000 f87f 	bl	800fb52 <__swbuf_r>
 800fa54:	3001      	adds	r0, #1
 800fa56:	d0d7      	beq.n	800fa08 <_puts_r+0x38>
 800fa58:	250a      	movs	r5, #10
 800fa5a:	e7d7      	b.n	800fa0c <_puts_r+0x3c>
 800fa5c:	4622      	mov	r2, r4
 800fa5e:	4628      	mov	r0, r5
 800fa60:	f000 f877 	bl	800fb52 <__swbuf_r>
 800fa64:	3001      	adds	r0, #1
 800fa66:	d1e7      	bne.n	800fa38 <_puts_r+0x68>
 800fa68:	e7ce      	b.n	800fa08 <_puts_r+0x38>
 800fa6a:	3e01      	subs	r6, #1
 800fa6c:	e7e4      	b.n	800fa38 <_puts_r+0x68>
 800fa6e:	6823      	ldr	r3, [r4, #0]
 800fa70:	1c5a      	adds	r2, r3, #1
 800fa72:	6022      	str	r2, [r4, #0]
 800fa74:	220a      	movs	r2, #10
 800fa76:	701a      	strb	r2, [r3, #0]
 800fa78:	e7ee      	b.n	800fa58 <_puts_r+0x88>
	...

0800fa7c <puts>:
 800fa7c:	4b02      	ldr	r3, [pc, #8]	@ (800fa88 <puts+0xc>)
 800fa7e:	4601      	mov	r1, r0
 800fa80:	6818      	ldr	r0, [r3, #0]
 800fa82:	f7ff bfa5 	b.w	800f9d0 <_puts_r>
 800fa86:	bf00      	nop
 800fa88:	200001a4 	.word	0x200001a4

0800fa8c <siprintf>:
 800fa8c:	b40e      	push	{r1, r2, r3}
 800fa8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fa92:	b500      	push	{lr}
 800fa94:	b09c      	sub	sp, #112	@ 0x70
 800fa96:	ab1d      	add	r3, sp, #116	@ 0x74
 800fa98:	9002      	str	r0, [sp, #8]
 800fa9a:	9006      	str	r0, [sp, #24]
 800fa9c:	9107      	str	r1, [sp, #28]
 800fa9e:	9104      	str	r1, [sp, #16]
 800faa0:	4808      	ldr	r0, [pc, #32]	@ (800fac4 <siprintf+0x38>)
 800faa2:	4909      	ldr	r1, [pc, #36]	@ (800fac8 <siprintf+0x3c>)
 800faa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800faa8:	9105      	str	r1, [sp, #20]
 800faaa:	6800      	ldr	r0, [r0, #0]
 800faac:	a902      	add	r1, sp, #8
 800faae:	9301      	str	r3, [sp, #4]
 800fab0:	f002 fc44 	bl	801233c <_svfiprintf_r>
 800fab4:	2200      	movs	r2, #0
 800fab6:	9b02      	ldr	r3, [sp, #8]
 800fab8:	701a      	strb	r2, [r3, #0]
 800faba:	b01c      	add	sp, #112	@ 0x70
 800fabc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fac0:	b003      	add	sp, #12
 800fac2:	4770      	bx	lr
 800fac4:	200001a4 	.word	0x200001a4
 800fac8:	ffff0208 	.word	0xffff0208

0800facc <__sread>:
 800facc:	b510      	push	{r4, lr}
 800face:	460c      	mov	r4, r1
 800fad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad4:	f000 f900 	bl	800fcd8 <_read_r>
 800fad8:	2800      	cmp	r0, #0
 800fada:	bfab      	itete	ge
 800fadc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fade:	89a3      	ldrhlt	r3, [r4, #12]
 800fae0:	181b      	addge	r3, r3, r0
 800fae2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fae6:	bfac      	ite	ge
 800fae8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800faea:	81a3      	strhlt	r3, [r4, #12]
 800faec:	bd10      	pop	{r4, pc}

0800faee <__swrite>:
 800faee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf2:	461f      	mov	r7, r3
 800faf4:	898b      	ldrh	r3, [r1, #12]
 800faf6:	4605      	mov	r5, r0
 800faf8:	05db      	lsls	r3, r3, #23
 800fafa:	460c      	mov	r4, r1
 800fafc:	4616      	mov	r6, r2
 800fafe:	d505      	bpl.n	800fb0c <__swrite+0x1e>
 800fb00:	2302      	movs	r3, #2
 800fb02:	2200      	movs	r2, #0
 800fb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb08:	f000 f8d4 	bl	800fcb4 <_lseek_r>
 800fb0c:	89a3      	ldrh	r3, [r4, #12]
 800fb0e:	4632      	mov	r2, r6
 800fb10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb14:	81a3      	strh	r3, [r4, #12]
 800fb16:	4628      	mov	r0, r5
 800fb18:	463b      	mov	r3, r7
 800fb1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb22:	f000 b8eb 	b.w	800fcfc <_write_r>

0800fb26 <__sseek>:
 800fb26:	b510      	push	{r4, lr}
 800fb28:	460c      	mov	r4, r1
 800fb2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb2e:	f000 f8c1 	bl	800fcb4 <_lseek_r>
 800fb32:	1c43      	adds	r3, r0, #1
 800fb34:	89a3      	ldrh	r3, [r4, #12]
 800fb36:	bf15      	itete	ne
 800fb38:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fb3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fb3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fb42:	81a3      	strheq	r3, [r4, #12]
 800fb44:	bf18      	it	ne
 800fb46:	81a3      	strhne	r3, [r4, #12]
 800fb48:	bd10      	pop	{r4, pc}

0800fb4a <__sclose>:
 800fb4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb4e:	f000 b8a1 	b.w	800fc94 <_close_r>

0800fb52 <__swbuf_r>:
 800fb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb54:	460e      	mov	r6, r1
 800fb56:	4614      	mov	r4, r2
 800fb58:	4605      	mov	r5, r0
 800fb5a:	b118      	cbz	r0, 800fb64 <__swbuf_r+0x12>
 800fb5c:	6a03      	ldr	r3, [r0, #32]
 800fb5e:	b90b      	cbnz	r3, 800fb64 <__swbuf_r+0x12>
 800fb60:	f7ff feee 	bl	800f940 <__sinit>
 800fb64:	69a3      	ldr	r3, [r4, #24]
 800fb66:	60a3      	str	r3, [r4, #8]
 800fb68:	89a3      	ldrh	r3, [r4, #12]
 800fb6a:	071a      	lsls	r2, r3, #28
 800fb6c:	d501      	bpl.n	800fb72 <__swbuf_r+0x20>
 800fb6e:	6923      	ldr	r3, [r4, #16]
 800fb70:	b943      	cbnz	r3, 800fb84 <__swbuf_r+0x32>
 800fb72:	4621      	mov	r1, r4
 800fb74:	4628      	mov	r0, r5
 800fb76:	f000 f82b 	bl	800fbd0 <__swsetup_r>
 800fb7a:	b118      	cbz	r0, 800fb84 <__swbuf_r+0x32>
 800fb7c:	f04f 37ff 	mov.w	r7, #4294967295
 800fb80:	4638      	mov	r0, r7
 800fb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb84:	6823      	ldr	r3, [r4, #0]
 800fb86:	6922      	ldr	r2, [r4, #16]
 800fb88:	b2f6      	uxtb	r6, r6
 800fb8a:	1a98      	subs	r0, r3, r2
 800fb8c:	6963      	ldr	r3, [r4, #20]
 800fb8e:	4637      	mov	r7, r6
 800fb90:	4283      	cmp	r3, r0
 800fb92:	dc05      	bgt.n	800fba0 <__swbuf_r+0x4e>
 800fb94:	4621      	mov	r1, r4
 800fb96:	4628      	mov	r0, r5
 800fb98:	f002 fe8c 	bl	80128b4 <_fflush_r>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d1ed      	bne.n	800fb7c <__swbuf_r+0x2a>
 800fba0:	68a3      	ldr	r3, [r4, #8]
 800fba2:	3b01      	subs	r3, #1
 800fba4:	60a3      	str	r3, [r4, #8]
 800fba6:	6823      	ldr	r3, [r4, #0]
 800fba8:	1c5a      	adds	r2, r3, #1
 800fbaa:	6022      	str	r2, [r4, #0]
 800fbac:	701e      	strb	r6, [r3, #0]
 800fbae:	6962      	ldr	r2, [r4, #20]
 800fbb0:	1c43      	adds	r3, r0, #1
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d004      	beq.n	800fbc0 <__swbuf_r+0x6e>
 800fbb6:	89a3      	ldrh	r3, [r4, #12]
 800fbb8:	07db      	lsls	r3, r3, #31
 800fbba:	d5e1      	bpl.n	800fb80 <__swbuf_r+0x2e>
 800fbbc:	2e0a      	cmp	r6, #10
 800fbbe:	d1df      	bne.n	800fb80 <__swbuf_r+0x2e>
 800fbc0:	4621      	mov	r1, r4
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f002 fe76 	bl	80128b4 <_fflush_r>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d0d9      	beq.n	800fb80 <__swbuf_r+0x2e>
 800fbcc:	e7d6      	b.n	800fb7c <__swbuf_r+0x2a>
	...

0800fbd0 <__swsetup_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4b29      	ldr	r3, [pc, #164]	@ (800fc78 <__swsetup_r+0xa8>)
 800fbd4:	4605      	mov	r5, r0
 800fbd6:	6818      	ldr	r0, [r3, #0]
 800fbd8:	460c      	mov	r4, r1
 800fbda:	b118      	cbz	r0, 800fbe4 <__swsetup_r+0x14>
 800fbdc:	6a03      	ldr	r3, [r0, #32]
 800fbde:	b90b      	cbnz	r3, 800fbe4 <__swsetup_r+0x14>
 800fbe0:	f7ff feae 	bl	800f940 <__sinit>
 800fbe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbe8:	0719      	lsls	r1, r3, #28
 800fbea:	d422      	bmi.n	800fc32 <__swsetup_r+0x62>
 800fbec:	06da      	lsls	r2, r3, #27
 800fbee:	d407      	bmi.n	800fc00 <__swsetup_r+0x30>
 800fbf0:	2209      	movs	r2, #9
 800fbf2:	602a      	str	r2, [r5, #0]
 800fbf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbfc:	81a3      	strh	r3, [r4, #12]
 800fbfe:	e033      	b.n	800fc68 <__swsetup_r+0x98>
 800fc00:	0758      	lsls	r0, r3, #29
 800fc02:	d512      	bpl.n	800fc2a <__swsetup_r+0x5a>
 800fc04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc06:	b141      	cbz	r1, 800fc1a <__swsetup_r+0x4a>
 800fc08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc0c:	4299      	cmp	r1, r3
 800fc0e:	d002      	beq.n	800fc16 <__swsetup_r+0x46>
 800fc10:	4628      	mov	r0, r5
 800fc12:	f000 ff15 	bl	8010a40 <_free_r>
 800fc16:	2300      	movs	r3, #0
 800fc18:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc1a:	89a3      	ldrh	r3, [r4, #12]
 800fc1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fc20:	81a3      	strh	r3, [r4, #12]
 800fc22:	2300      	movs	r3, #0
 800fc24:	6063      	str	r3, [r4, #4]
 800fc26:	6923      	ldr	r3, [r4, #16]
 800fc28:	6023      	str	r3, [r4, #0]
 800fc2a:	89a3      	ldrh	r3, [r4, #12]
 800fc2c:	f043 0308 	orr.w	r3, r3, #8
 800fc30:	81a3      	strh	r3, [r4, #12]
 800fc32:	6923      	ldr	r3, [r4, #16]
 800fc34:	b94b      	cbnz	r3, 800fc4a <__swsetup_r+0x7a>
 800fc36:	89a3      	ldrh	r3, [r4, #12]
 800fc38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fc3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc40:	d003      	beq.n	800fc4a <__swsetup_r+0x7a>
 800fc42:	4621      	mov	r1, r4
 800fc44:	4628      	mov	r0, r5
 800fc46:	f002 fe82 	bl	801294e <__smakebuf_r>
 800fc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc4e:	f013 0201 	ands.w	r2, r3, #1
 800fc52:	d00a      	beq.n	800fc6a <__swsetup_r+0x9a>
 800fc54:	2200      	movs	r2, #0
 800fc56:	60a2      	str	r2, [r4, #8]
 800fc58:	6962      	ldr	r2, [r4, #20]
 800fc5a:	4252      	negs	r2, r2
 800fc5c:	61a2      	str	r2, [r4, #24]
 800fc5e:	6922      	ldr	r2, [r4, #16]
 800fc60:	b942      	cbnz	r2, 800fc74 <__swsetup_r+0xa4>
 800fc62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fc66:	d1c5      	bne.n	800fbf4 <__swsetup_r+0x24>
 800fc68:	bd38      	pop	{r3, r4, r5, pc}
 800fc6a:	0799      	lsls	r1, r3, #30
 800fc6c:	bf58      	it	pl
 800fc6e:	6962      	ldrpl	r2, [r4, #20]
 800fc70:	60a2      	str	r2, [r4, #8]
 800fc72:	e7f4      	b.n	800fc5e <__swsetup_r+0x8e>
 800fc74:	2000      	movs	r0, #0
 800fc76:	e7f7      	b.n	800fc68 <__swsetup_r+0x98>
 800fc78:	200001a4 	.word	0x200001a4

0800fc7c <memset>:
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	4402      	add	r2, r0
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d100      	bne.n	800fc86 <memset+0xa>
 800fc84:	4770      	bx	lr
 800fc86:	f803 1b01 	strb.w	r1, [r3], #1
 800fc8a:	e7f9      	b.n	800fc80 <memset+0x4>

0800fc8c <_localeconv_r>:
 800fc8c:	4800      	ldr	r0, [pc, #0]	@ (800fc90 <_localeconv_r+0x4>)
 800fc8e:	4770      	bx	lr
 800fc90:	200002e4 	.word	0x200002e4

0800fc94 <_close_r>:
 800fc94:	b538      	push	{r3, r4, r5, lr}
 800fc96:	2300      	movs	r3, #0
 800fc98:	4d05      	ldr	r5, [pc, #20]	@ (800fcb0 <_close_r+0x1c>)
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	4608      	mov	r0, r1
 800fc9e:	602b      	str	r3, [r5, #0]
 800fca0:	f7f3 f877 	bl	8002d92 <_close>
 800fca4:	1c43      	adds	r3, r0, #1
 800fca6:	d102      	bne.n	800fcae <_close_r+0x1a>
 800fca8:	682b      	ldr	r3, [r5, #0]
 800fcaa:	b103      	cbz	r3, 800fcae <_close_r+0x1a>
 800fcac:	6023      	str	r3, [r4, #0]
 800fcae:	bd38      	pop	{r3, r4, r5, pc}
 800fcb0:	200008b8 	.word	0x200008b8

0800fcb4 <_lseek_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	4608      	mov	r0, r1
 800fcba:	4611      	mov	r1, r2
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	4d05      	ldr	r5, [pc, #20]	@ (800fcd4 <_lseek_r+0x20>)
 800fcc0:	602a      	str	r2, [r5, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f7f3 f889 	bl	8002dda <_lseek>
 800fcc8:	1c43      	adds	r3, r0, #1
 800fcca:	d102      	bne.n	800fcd2 <_lseek_r+0x1e>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	b103      	cbz	r3, 800fcd2 <_lseek_r+0x1e>
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	bd38      	pop	{r3, r4, r5, pc}
 800fcd4:	200008b8 	.word	0x200008b8

0800fcd8 <_read_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4604      	mov	r4, r0
 800fcdc:	4608      	mov	r0, r1
 800fcde:	4611      	mov	r1, r2
 800fce0:	2200      	movs	r2, #0
 800fce2:	4d05      	ldr	r5, [pc, #20]	@ (800fcf8 <_read_r+0x20>)
 800fce4:	602a      	str	r2, [r5, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	f7f3 f81a 	bl	8002d20 <_read>
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	d102      	bne.n	800fcf6 <_read_r+0x1e>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	b103      	cbz	r3, 800fcf6 <_read_r+0x1e>
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	bd38      	pop	{r3, r4, r5, pc}
 800fcf8:	200008b8 	.word	0x200008b8

0800fcfc <_write_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	4604      	mov	r4, r0
 800fd00:	4608      	mov	r0, r1
 800fd02:	4611      	mov	r1, r2
 800fd04:	2200      	movs	r2, #0
 800fd06:	4d05      	ldr	r5, [pc, #20]	@ (800fd1c <_write_r+0x20>)
 800fd08:	602a      	str	r2, [r5, #0]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	f7f3 f825 	bl	8002d5a <_write>
 800fd10:	1c43      	adds	r3, r0, #1
 800fd12:	d102      	bne.n	800fd1a <_write_r+0x1e>
 800fd14:	682b      	ldr	r3, [r5, #0]
 800fd16:	b103      	cbz	r3, 800fd1a <_write_r+0x1e>
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}
 800fd1c:	200008b8 	.word	0x200008b8

0800fd20 <__errno>:
 800fd20:	4b01      	ldr	r3, [pc, #4]	@ (800fd28 <__errno+0x8>)
 800fd22:	6818      	ldr	r0, [r3, #0]
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop
 800fd28:	200001a4 	.word	0x200001a4

0800fd2c <__libc_init_array>:
 800fd2c:	b570      	push	{r4, r5, r6, lr}
 800fd2e:	2600      	movs	r6, #0
 800fd30:	4d0c      	ldr	r5, [pc, #48]	@ (800fd64 <__libc_init_array+0x38>)
 800fd32:	4c0d      	ldr	r4, [pc, #52]	@ (800fd68 <__libc_init_array+0x3c>)
 800fd34:	1b64      	subs	r4, r4, r5
 800fd36:	10a4      	asrs	r4, r4, #2
 800fd38:	42a6      	cmp	r6, r4
 800fd3a:	d109      	bne.n	800fd50 <__libc_init_array+0x24>
 800fd3c:	f004 fb96 	bl	801446c <_init>
 800fd40:	2600      	movs	r6, #0
 800fd42:	4d0a      	ldr	r5, [pc, #40]	@ (800fd6c <__libc_init_array+0x40>)
 800fd44:	4c0a      	ldr	r4, [pc, #40]	@ (800fd70 <__libc_init_array+0x44>)
 800fd46:	1b64      	subs	r4, r4, r5
 800fd48:	10a4      	asrs	r4, r4, #2
 800fd4a:	42a6      	cmp	r6, r4
 800fd4c:	d105      	bne.n	800fd5a <__libc_init_array+0x2e>
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}
 800fd50:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd54:	4798      	blx	r3
 800fd56:	3601      	adds	r6, #1
 800fd58:	e7ee      	b.n	800fd38 <__libc_init_array+0xc>
 800fd5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd5e:	4798      	blx	r3
 800fd60:	3601      	adds	r6, #1
 800fd62:	e7f2      	b.n	800fd4a <__libc_init_array+0x1e>
 800fd64:	08014b30 	.word	0x08014b30
 800fd68:	08014b30 	.word	0x08014b30
 800fd6c:	08014b30 	.word	0x08014b30
 800fd70:	08014b34 	.word	0x08014b34

0800fd74 <__retarget_lock_init_recursive>:
 800fd74:	4770      	bx	lr

0800fd76 <__retarget_lock_acquire_recursive>:
 800fd76:	4770      	bx	lr

0800fd78 <__retarget_lock_release_recursive>:
 800fd78:	4770      	bx	lr

0800fd7a <memchr>:
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	b510      	push	{r4, lr}
 800fd7e:	b2c9      	uxtb	r1, r1
 800fd80:	4402      	add	r2, r0
 800fd82:	4293      	cmp	r3, r2
 800fd84:	4618      	mov	r0, r3
 800fd86:	d101      	bne.n	800fd8c <memchr+0x12>
 800fd88:	2000      	movs	r0, #0
 800fd8a:	e003      	b.n	800fd94 <memchr+0x1a>
 800fd8c:	7804      	ldrb	r4, [r0, #0]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	428c      	cmp	r4, r1
 800fd92:	d1f6      	bne.n	800fd82 <memchr+0x8>
 800fd94:	bd10      	pop	{r4, pc}
	...

0800fd98 <nanf>:
 800fd98:	4800      	ldr	r0, [pc, #0]	@ (800fd9c <nanf+0x4>)
 800fd9a:	4770      	bx	lr
 800fd9c:	7fc00000 	.word	0x7fc00000

0800fda0 <quorem>:
 800fda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda4:	6903      	ldr	r3, [r0, #16]
 800fda6:	690c      	ldr	r4, [r1, #16]
 800fda8:	4607      	mov	r7, r0
 800fdaa:	42a3      	cmp	r3, r4
 800fdac:	db7e      	blt.n	800feac <quorem+0x10c>
 800fdae:	3c01      	subs	r4, #1
 800fdb0:	00a3      	lsls	r3, r4, #2
 800fdb2:	f100 0514 	add.w	r5, r0, #20
 800fdb6:	f101 0814 	add.w	r8, r1, #20
 800fdba:	9300      	str	r3, [sp, #0]
 800fdbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fdc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	fbb2 f6f3 	udiv	r6, r2, r3
 800fdd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdd6:	d32e      	bcc.n	800fe36 <quorem+0x96>
 800fdd8:	f04f 0a00 	mov.w	sl, #0
 800fddc:	46c4      	mov	ip, r8
 800fdde:	46ae      	mov	lr, r5
 800fde0:	46d3      	mov	fp, sl
 800fde2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fde6:	b298      	uxth	r0, r3
 800fde8:	fb06 a000 	mla	r0, r6, r0, sl
 800fdec:	0c1b      	lsrs	r3, r3, #16
 800fdee:	0c02      	lsrs	r2, r0, #16
 800fdf0:	fb06 2303 	mla	r3, r6, r3, r2
 800fdf4:	f8de 2000 	ldr.w	r2, [lr]
 800fdf8:	b280      	uxth	r0, r0
 800fdfa:	b292      	uxth	r2, r2
 800fdfc:	1a12      	subs	r2, r2, r0
 800fdfe:	445a      	add	r2, fp
 800fe00:	f8de 0000 	ldr.w	r0, [lr]
 800fe04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fe0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fe12:	b292      	uxth	r2, r2
 800fe14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fe18:	45e1      	cmp	r9, ip
 800fe1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fe1e:	f84e 2b04 	str.w	r2, [lr], #4
 800fe22:	d2de      	bcs.n	800fde2 <quorem+0x42>
 800fe24:	9b00      	ldr	r3, [sp, #0]
 800fe26:	58eb      	ldr	r3, [r5, r3]
 800fe28:	b92b      	cbnz	r3, 800fe36 <quorem+0x96>
 800fe2a:	9b01      	ldr	r3, [sp, #4]
 800fe2c:	3b04      	subs	r3, #4
 800fe2e:	429d      	cmp	r5, r3
 800fe30:	461a      	mov	r2, r3
 800fe32:	d32f      	bcc.n	800fe94 <quorem+0xf4>
 800fe34:	613c      	str	r4, [r7, #16]
 800fe36:	4638      	mov	r0, r7
 800fe38:	f001 f9c2 	bl	80111c0 <__mcmp>
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	db25      	blt.n	800fe8c <quorem+0xec>
 800fe40:	4629      	mov	r1, r5
 800fe42:	2000      	movs	r0, #0
 800fe44:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe48:	f8d1 c000 	ldr.w	ip, [r1]
 800fe4c:	fa1f fe82 	uxth.w	lr, r2
 800fe50:	fa1f f38c 	uxth.w	r3, ip
 800fe54:	eba3 030e 	sub.w	r3, r3, lr
 800fe58:	4403      	add	r3, r0
 800fe5a:	0c12      	lsrs	r2, r2, #16
 800fe5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe6a:	45c1      	cmp	r9, r8
 800fe6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe70:	f841 3b04 	str.w	r3, [r1], #4
 800fe74:	d2e6      	bcs.n	800fe44 <quorem+0xa4>
 800fe76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe7e:	b922      	cbnz	r2, 800fe8a <quorem+0xea>
 800fe80:	3b04      	subs	r3, #4
 800fe82:	429d      	cmp	r5, r3
 800fe84:	461a      	mov	r2, r3
 800fe86:	d30b      	bcc.n	800fea0 <quorem+0x100>
 800fe88:	613c      	str	r4, [r7, #16]
 800fe8a:	3601      	adds	r6, #1
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	b003      	add	sp, #12
 800fe90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe94:	6812      	ldr	r2, [r2, #0]
 800fe96:	3b04      	subs	r3, #4
 800fe98:	2a00      	cmp	r2, #0
 800fe9a:	d1cb      	bne.n	800fe34 <quorem+0x94>
 800fe9c:	3c01      	subs	r4, #1
 800fe9e:	e7c6      	b.n	800fe2e <quorem+0x8e>
 800fea0:	6812      	ldr	r2, [r2, #0]
 800fea2:	3b04      	subs	r3, #4
 800fea4:	2a00      	cmp	r2, #0
 800fea6:	d1ef      	bne.n	800fe88 <quorem+0xe8>
 800fea8:	3c01      	subs	r4, #1
 800feaa:	e7ea      	b.n	800fe82 <quorem+0xe2>
 800feac:	2000      	movs	r0, #0
 800feae:	e7ee      	b.n	800fe8e <quorem+0xee>

0800feb0 <_dtoa_r>:
 800feb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	4614      	mov	r4, r2
 800feb6:	461d      	mov	r5, r3
 800feb8:	69c7      	ldr	r7, [r0, #28]
 800feba:	b097      	sub	sp, #92	@ 0x5c
 800febc:	4683      	mov	fp, r0
 800febe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800fec2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800fec4:	b97f      	cbnz	r7, 800fee6 <_dtoa_r+0x36>
 800fec6:	2010      	movs	r0, #16
 800fec8:	f000 fe02 	bl	8010ad0 <malloc>
 800fecc:	4602      	mov	r2, r0
 800fece:	f8cb 001c 	str.w	r0, [fp, #28]
 800fed2:	b920      	cbnz	r0, 800fede <_dtoa_r+0x2e>
 800fed4:	21ef      	movs	r1, #239	@ 0xef
 800fed6:	4ba8      	ldr	r3, [pc, #672]	@ (8010178 <_dtoa_r+0x2c8>)
 800fed8:	48a8      	ldr	r0, [pc, #672]	@ (801017c <_dtoa_r+0x2cc>)
 800feda:	f002 fde7 	bl	8012aac <__assert_func>
 800fede:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fee2:	6007      	str	r7, [r0, #0]
 800fee4:	60c7      	str	r7, [r0, #12]
 800fee6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800feea:	6819      	ldr	r1, [r3, #0]
 800feec:	b159      	cbz	r1, 800ff06 <_dtoa_r+0x56>
 800feee:	685a      	ldr	r2, [r3, #4]
 800fef0:	2301      	movs	r3, #1
 800fef2:	4093      	lsls	r3, r2
 800fef4:	604a      	str	r2, [r1, #4]
 800fef6:	608b      	str	r3, [r1, #8]
 800fef8:	4658      	mov	r0, fp
 800fefa:	f000 fedf 	bl	8010cbc <_Bfree>
 800fefe:	2200      	movs	r2, #0
 800ff00:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff04:	601a      	str	r2, [r3, #0]
 800ff06:	1e2b      	subs	r3, r5, #0
 800ff08:	bfaf      	iteee	ge
 800ff0a:	2300      	movge	r3, #0
 800ff0c:	2201      	movlt	r2, #1
 800ff0e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ff12:	9303      	strlt	r3, [sp, #12]
 800ff14:	bfa8      	it	ge
 800ff16:	6033      	strge	r3, [r6, #0]
 800ff18:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ff1c:	4b98      	ldr	r3, [pc, #608]	@ (8010180 <_dtoa_r+0x2d0>)
 800ff1e:	bfb8      	it	lt
 800ff20:	6032      	strlt	r2, [r6, #0]
 800ff22:	ea33 0308 	bics.w	r3, r3, r8
 800ff26:	d112      	bne.n	800ff4e <_dtoa_r+0x9e>
 800ff28:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ff2e:	6013      	str	r3, [r2, #0]
 800ff30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ff34:	4323      	orrs	r3, r4
 800ff36:	f000 8550 	beq.w	80109da <_dtoa_r+0xb2a>
 800ff3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ff3c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8010184 <_dtoa_r+0x2d4>
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	f000 8552 	beq.w	80109ea <_dtoa_r+0xb3a>
 800ff46:	f10a 0303 	add.w	r3, sl, #3
 800ff4a:	f000 bd4c 	b.w	80109e6 <_dtoa_r+0xb36>
 800ff4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ff56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f7f0 fd3b 	bl	80009d8 <__aeabi_dcmpeq>
 800ff62:	4607      	mov	r7, r0
 800ff64:	b158      	cbz	r0, 800ff7e <_dtoa_r+0xce>
 800ff66:	2301      	movs	r3, #1
 800ff68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ff6a:	6013      	str	r3, [r2, #0]
 800ff6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ff6e:	b113      	cbz	r3, 800ff76 <_dtoa_r+0xc6>
 800ff70:	4b85      	ldr	r3, [pc, #532]	@ (8010188 <_dtoa_r+0x2d8>)
 800ff72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ff74:	6013      	str	r3, [r2, #0]
 800ff76:	f8df a214 	ldr.w	sl, [pc, #532]	@ 801018c <_dtoa_r+0x2dc>
 800ff7a:	f000 bd36 	b.w	80109ea <_dtoa_r+0xb3a>
 800ff7e:	ab14      	add	r3, sp, #80	@ 0x50
 800ff80:	9301      	str	r3, [sp, #4]
 800ff82:	ab15      	add	r3, sp, #84	@ 0x54
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	4658      	mov	r0, fp
 800ff88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ff8c:	f001 fa30 	bl	80113f0 <__d2b>
 800ff90:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ff94:	4681      	mov	r9, r0
 800ff96:	2e00      	cmp	r6, #0
 800ff98:	d077      	beq.n	801008a <_dtoa_r+0x1da>
 800ff9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffa0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ffa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffa8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ffac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ffb0:	9712      	str	r7, [sp, #72]	@ 0x48
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	4b76      	ldr	r3, [pc, #472]	@ (8010190 <_dtoa_r+0x2e0>)
 800ffb8:	f7f0 f8ee 	bl	8000198 <__aeabi_dsub>
 800ffbc:	a368      	add	r3, pc, #416	@ (adr r3, 8010160 <_dtoa_r+0x2b0>)
 800ffbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc2:	f7f0 faa1 	bl	8000508 <__aeabi_dmul>
 800ffc6:	a368      	add	r3, pc, #416	@ (adr r3, 8010168 <_dtoa_r+0x2b8>)
 800ffc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffcc:	f7f0 f8e6 	bl	800019c <__adddf3>
 800ffd0:	4604      	mov	r4, r0
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	460d      	mov	r5, r1
 800ffd6:	f7f0 fa2d 	bl	8000434 <__aeabi_i2d>
 800ffda:	a365      	add	r3, pc, #404	@ (adr r3, 8010170 <_dtoa_r+0x2c0>)
 800ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe0:	f7f0 fa92 	bl	8000508 <__aeabi_dmul>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	4620      	mov	r0, r4
 800ffea:	4629      	mov	r1, r5
 800ffec:	f7f0 f8d6 	bl	800019c <__adddf3>
 800fff0:	4604      	mov	r4, r0
 800fff2:	460d      	mov	r5, r1
 800fff4:	f7f0 fd38 	bl	8000a68 <__aeabi_d2iz>
 800fff8:	2200      	movs	r2, #0
 800fffa:	4607      	mov	r7, r0
 800fffc:	2300      	movs	r3, #0
 800fffe:	4620      	mov	r0, r4
 8010000:	4629      	mov	r1, r5
 8010002:	f7f0 fcf3 	bl	80009ec <__aeabi_dcmplt>
 8010006:	b140      	cbz	r0, 801001a <_dtoa_r+0x16a>
 8010008:	4638      	mov	r0, r7
 801000a:	f7f0 fa13 	bl	8000434 <__aeabi_i2d>
 801000e:	4622      	mov	r2, r4
 8010010:	462b      	mov	r3, r5
 8010012:	f7f0 fce1 	bl	80009d8 <__aeabi_dcmpeq>
 8010016:	b900      	cbnz	r0, 801001a <_dtoa_r+0x16a>
 8010018:	3f01      	subs	r7, #1
 801001a:	2f16      	cmp	r7, #22
 801001c:	d853      	bhi.n	80100c6 <_dtoa_r+0x216>
 801001e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010022:	4b5c      	ldr	r3, [pc, #368]	@ (8010194 <_dtoa_r+0x2e4>)
 8010024:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002c:	f7f0 fcde 	bl	80009ec <__aeabi_dcmplt>
 8010030:	2800      	cmp	r0, #0
 8010032:	d04a      	beq.n	80100ca <_dtoa_r+0x21a>
 8010034:	2300      	movs	r3, #0
 8010036:	3f01      	subs	r7, #1
 8010038:	930f      	str	r3, [sp, #60]	@ 0x3c
 801003a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801003c:	1b9b      	subs	r3, r3, r6
 801003e:	1e5a      	subs	r2, r3, #1
 8010040:	bf46      	itte	mi
 8010042:	f1c3 0801 	rsbmi	r8, r3, #1
 8010046:	2300      	movmi	r3, #0
 8010048:	f04f 0800 	movpl.w	r8, #0
 801004c:	9209      	str	r2, [sp, #36]	@ 0x24
 801004e:	bf48      	it	mi
 8010050:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8010052:	2f00      	cmp	r7, #0
 8010054:	db3b      	blt.n	80100ce <_dtoa_r+0x21e>
 8010056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010058:	970e      	str	r7, [sp, #56]	@ 0x38
 801005a:	443b      	add	r3, r7
 801005c:	9309      	str	r3, [sp, #36]	@ 0x24
 801005e:	2300      	movs	r3, #0
 8010060:	930a      	str	r3, [sp, #40]	@ 0x28
 8010062:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010064:	2b09      	cmp	r3, #9
 8010066:	d866      	bhi.n	8010136 <_dtoa_r+0x286>
 8010068:	2b05      	cmp	r3, #5
 801006a:	bfc4      	itt	gt
 801006c:	3b04      	subgt	r3, #4
 801006e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8010070:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010072:	bfc8      	it	gt
 8010074:	2400      	movgt	r4, #0
 8010076:	f1a3 0302 	sub.w	r3, r3, #2
 801007a:	bfd8      	it	le
 801007c:	2401      	movle	r4, #1
 801007e:	2b03      	cmp	r3, #3
 8010080:	d864      	bhi.n	801014c <_dtoa_r+0x29c>
 8010082:	e8df f003 	tbb	[pc, r3]
 8010086:	382b      	.short	0x382b
 8010088:	5636      	.short	0x5636
 801008a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801008e:	441e      	add	r6, r3
 8010090:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010094:	2b20      	cmp	r3, #32
 8010096:	bfc1      	itttt	gt
 8010098:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801009c:	fa08 f803 	lslgt.w	r8, r8, r3
 80100a0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80100a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80100a8:	bfd6      	itet	le
 80100aa:	f1c3 0320 	rsble	r3, r3, #32
 80100ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80100b2:	fa04 f003 	lslle.w	r0, r4, r3
 80100b6:	f7f0 f9ad 	bl	8000414 <__aeabi_ui2d>
 80100ba:	2201      	movs	r2, #1
 80100bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80100c0:	3e01      	subs	r6, #1
 80100c2:	9212      	str	r2, [sp, #72]	@ 0x48
 80100c4:	e775      	b.n	800ffb2 <_dtoa_r+0x102>
 80100c6:	2301      	movs	r3, #1
 80100c8:	e7b6      	b.n	8010038 <_dtoa_r+0x188>
 80100ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 80100cc:	e7b5      	b.n	801003a <_dtoa_r+0x18a>
 80100ce:	427b      	negs	r3, r7
 80100d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80100d2:	2300      	movs	r3, #0
 80100d4:	eba8 0807 	sub.w	r8, r8, r7
 80100d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80100da:	e7c2      	b.n	8010062 <_dtoa_r+0x1b2>
 80100dc:	2300      	movs	r3, #0
 80100de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	dc35      	bgt.n	8010152 <_dtoa_r+0x2a2>
 80100e6:	2301      	movs	r3, #1
 80100e8:	461a      	mov	r2, r3
 80100ea:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80100ee:	9221      	str	r2, [sp, #132]	@ 0x84
 80100f0:	e00b      	b.n	801010a <_dtoa_r+0x25a>
 80100f2:	2301      	movs	r3, #1
 80100f4:	e7f3      	b.n	80100de <_dtoa_r+0x22e>
 80100f6:	2300      	movs	r3, #0
 80100f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100fc:	18fb      	adds	r3, r7, r3
 80100fe:	9308      	str	r3, [sp, #32]
 8010100:	3301      	adds	r3, #1
 8010102:	2b01      	cmp	r3, #1
 8010104:	9307      	str	r3, [sp, #28]
 8010106:	bfb8      	it	lt
 8010108:	2301      	movlt	r3, #1
 801010a:	2100      	movs	r1, #0
 801010c:	2204      	movs	r2, #4
 801010e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010112:	f102 0514 	add.w	r5, r2, #20
 8010116:	429d      	cmp	r5, r3
 8010118:	d91f      	bls.n	801015a <_dtoa_r+0x2aa>
 801011a:	6041      	str	r1, [r0, #4]
 801011c:	4658      	mov	r0, fp
 801011e:	f000 fd8d 	bl	8010c3c <_Balloc>
 8010122:	4682      	mov	sl, r0
 8010124:	2800      	cmp	r0, #0
 8010126:	d139      	bne.n	801019c <_dtoa_r+0x2ec>
 8010128:	4602      	mov	r2, r0
 801012a:	f240 11af 	movw	r1, #431	@ 0x1af
 801012e:	4b1a      	ldr	r3, [pc, #104]	@ (8010198 <_dtoa_r+0x2e8>)
 8010130:	e6d2      	b.n	800fed8 <_dtoa_r+0x28>
 8010132:	2301      	movs	r3, #1
 8010134:	e7e0      	b.n	80100f8 <_dtoa_r+0x248>
 8010136:	2401      	movs	r4, #1
 8010138:	2300      	movs	r3, #0
 801013a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801013c:	9320      	str	r3, [sp, #128]	@ 0x80
 801013e:	f04f 33ff 	mov.w	r3, #4294967295
 8010142:	2200      	movs	r2, #0
 8010144:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8010148:	2312      	movs	r3, #18
 801014a:	e7d0      	b.n	80100ee <_dtoa_r+0x23e>
 801014c:	2301      	movs	r3, #1
 801014e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010150:	e7f5      	b.n	801013e <_dtoa_r+0x28e>
 8010152:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010154:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8010158:	e7d7      	b.n	801010a <_dtoa_r+0x25a>
 801015a:	3101      	adds	r1, #1
 801015c:	0052      	lsls	r2, r2, #1
 801015e:	e7d8      	b.n	8010112 <_dtoa_r+0x262>
 8010160:	636f4361 	.word	0x636f4361
 8010164:	3fd287a7 	.word	0x3fd287a7
 8010168:	8b60c8b3 	.word	0x8b60c8b3
 801016c:	3fc68a28 	.word	0x3fc68a28
 8010170:	509f79fb 	.word	0x509f79fb
 8010174:	3fd34413 	.word	0x3fd34413
 8010178:	080146cc 	.word	0x080146cc
 801017c:	080146e3 	.word	0x080146e3
 8010180:	7ff00000 	.word	0x7ff00000
 8010184:	080146c8 	.word	0x080146c8
 8010188:	08014697 	.word	0x08014697
 801018c:	08014696 	.word	0x08014696
 8010190:	3ff80000 	.word	0x3ff80000
 8010194:	080147e0 	.word	0x080147e0
 8010198:	0801473b 	.word	0x0801473b
 801019c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80101a0:	6018      	str	r0, [r3, #0]
 80101a2:	9b07      	ldr	r3, [sp, #28]
 80101a4:	2b0e      	cmp	r3, #14
 80101a6:	f200 80a4 	bhi.w	80102f2 <_dtoa_r+0x442>
 80101aa:	2c00      	cmp	r4, #0
 80101ac:	f000 80a1 	beq.w	80102f2 <_dtoa_r+0x442>
 80101b0:	2f00      	cmp	r7, #0
 80101b2:	dd33      	ble.n	801021c <_dtoa_r+0x36c>
 80101b4:	4b86      	ldr	r3, [pc, #536]	@ (80103d0 <_dtoa_r+0x520>)
 80101b6:	f007 020f 	and.w	r2, r7, #15
 80101ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101be:	05f8      	lsls	r0, r7, #23
 80101c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80101c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80101c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80101cc:	d516      	bpl.n	80101fc <_dtoa_r+0x34c>
 80101ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101d2:	4b80      	ldr	r3, [pc, #512]	@ (80103d4 <_dtoa_r+0x524>)
 80101d4:	2603      	movs	r6, #3
 80101d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101da:	f7f0 fabf 	bl	800075c <__aeabi_ddiv>
 80101de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101e2:	f004 040f 	and.w	r4, r4, #15
 80101e6:	4d7b      	ldr	r5, [pc, #492]	@ (80103d4 <_dtoa_r+0x524>)
 80101e8:	b954      	cbnz	r4, 8010200 <_dtoa_r+0x350>
 80101ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101f2:	f7f0 fab3 	bl	800075c <__aeabi_ddiv>
 80101f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101fa:	e028      	b.n	801024e <_dtoa_r+0x39e>
 80101fc:	2602      	movs	r6, #2
 80101fe:	e7f2      	b.n	80101e6 <_dtoa_r+0x336>
 8010200:	07e1      	lsls	r1, r4, #31
 8010202:	d508      	bpl.n	8010216 <_dtoa_r+0x366>
 8010204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010208:	e9d5 2300 	ldrd	r2, r3, [r5]
 801020c:	f7f0 f97c 	bl	8000508 <__aeabi_dmul>
 8010210:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010214:	3601      	adds	r6, #1
 8010216:	1064      	asrs	r4, r4, #1
 8010218:	3508      	adds	r5, #8
 801021a:	e7e5      	b.n	80101e8 <_dtoa_r+0x338>
 801021c:	f000 80d2 	beq.w	80103c4 <_dtoa_r+0x514>
 8010220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010224:	427c      	negs	r4, r7
 8010226:	4b6a      	ldr	r3, [pc, #424]	@ (80103d0 <_dtoa_r+0x520>)
 8010228:	f004 020f 	and.w	r2, r4, #15
 801022c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	f7f0 f968 	bl	8000508 <__aeabi_dmul>
 8010238:	2602      	movs	r6, #2
 801023a:	2300      	movs	r3, #0
 801023c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010240:	4d64      	ldr	r5, [pc, #400]	@ (80103d4 <_dtoa_r+0x524>)
 8010242:	1124      	asrs	r4, r4, #4
 8010244:	2c00      	cmp	r4, #0
 8010246:	f040 80b2 	bne.w	80103ae <_dtoa_r+0x4fe>
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1d3      	bne.n	80101f6 <_dtoa_r+0x346>
 801024e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 80b7 	beq.w	80103c8 <_dtoa_r+0x518>
 801025a:	2200      	movs	r2, #0
 801025c:	4620      	mov	r0, r4
 801025e:	4629      	mov	r1, r5
 8010260:	4b5d      	ldr	r3, [pc, #372]	@ (80103d8 <_dtoa_r+0x528>)
 8010262:	f7f0 fbc3 	bl	80009ec <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	f000 80ae 	beq.w	80103c8 <_dtoa_r+0x518>
 801026c:	9b07      	ldr	r3, [sp, #28]
 801026e:	2b00      	cmp	r3, #0
 8010270:	f000 80aa 	beq.w	80103c8 <_dtoa_r+0x518>
 8010274:	9b08      	ldr	r3, [sp, #32]
 8010276:	2b00      	cmp	r3, #0
 8010278:	dd37      	ble.n	80102ea <_dtoa_r+0x43a>
 801027a:	1e7b      	subs	r3, r7, #1
 801027c:	4620      	mov	r0, r4
 801027e:	9304      	str	r3, [sp, #16]
 8010280:	2200      	movs	r2, #0
 8010282:	4629      	mov	r1, r5
 8010284:	4b55      	ldr	r3, [pc, #340]	@ (80103dc <_dtoa_r+0x52c>)
 8010286:	f7f0 f93f 	bl	8000508 <__aeabi_dmul>
 801028a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801028e:	9c08      	ldr	r4, [sp, #32]
 8010290:	3601      	adds	r6, #1
 8010292:	4630      	mov	r0, r6
 8010294:	f7f0 f8ce 	bl	8000434 <__aeabi_i2d>
 8010298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801029c:	f7f0 f934 	bl	8000508 <__aeabi_dmul>
 80102a0:	2200      	movs	r2, #0
 80102a2:	4b4f      	ldr	r3, [pc, #316]	@ (80103e0 <_dtoa_r+0x530>)
 80102a4:	f7ef ff7a 	bl	800019c <__adddf3>
 80102a8:	4605      	mov	r5, r0
 80102aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80102ae:	2c00      	cmp	r4, #0
 80102b0:	f040 809a 	bne.w	80103e8 <_dtoa_r+0x538>
 80102b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102b8:	2200      	movs	r2, #0
 80102ba:	4b4a      	ldr	r3, [pc, #296]	@ (80103e4 <_dtoa_r+0x534>)
 80102bc:	f7ef ff6c 	bl	8000198 <__aeabi_dsub>
 80102c0:	4602      	mov	r2, r0
 80102c2:	460b      	mov	r3, r1
 80102c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80102c8:	462a      	mov	r2, r5
 80102ca:	4633      	mov	r3, r6
 80102cc:	f7f0 fbac 	bl	8000a28 <__aeabi_dcmpgt>
 80102d0:	2800      	cmp	r0, #0
 80102d2:	f040 828e 	bne.w	80107f2 <_dtoa_r+0x942>
 80102d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102da:	462a      	mov	r2, r5
 80102dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80102e0:	f7f0 fb84 	bl	80009ec <__aeabi_dcmplt>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	f040 8127 	bne.w	8010538 <_dtoa_r+0x688>
 80102ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80102ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80102f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f2c0 8163 	blt.w	80105c0 <_dtoa_r+0x710>
 80102fa:	2f0e      	cmp	r7, #14
 80102fc:	f300 8160 	bgt.w	80105c0 <_dtoa_r+0x710>
 8010300:	4b33      	ldr	r3, [pc, #204]	@ (80103d0 <_dtoa_r+0x520>)
 8010302:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010306:	e9d3 3400 	ldrd	r3, r4, [r3]
 801030a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801030e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010310:	2b00      	cmp	r3, #0
 8010312:	da03      	bge.n	801031c <_dtoa_r+0x46c>
 8010314:	9b07      	ldr	r3, [sp, #28]
 8010316:	2b00      	cmp	r3, #0
 8010318:	f340 8100 	ble.w	801051c <_dtoa_r+0x66c>
 801031c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010320:	4656      	mov	r6, sl
 8010322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010326:	4620      	mov	r0, r4
 8010328:	4629      	mov	r1, r5
 801032a:	f7f0 fa17 	bl	800075c <__aeabi_ddiv>
 801032e:	f7f0 fb9b 	bl	8000a68 <__aeabi_d2iz>
 8010332:	4680      	mov	r8, r0
 8010334:	f7f0 f87e 	bl	8000434 <__aeabi_i2d>
 8010338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801033c:	f7f0 f8e4 	bl	8000508 <__aeabi_dmul>
 8010340:	4602      	mov	r2, r0
 8010342:	460b      	mov	r3, r1
 8010344:	4620      	mov	r0, r4
 8010346:	4629      	mov	r1, r5
 8010348:	f7ef ff26 	bl	8000198 <__aeabi_dsub>
 801034c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010350:	9d07      	ldr	r5, [sp, #28]
 8010352:	f806 4b01 	strb.w	r4, [r6], #1
 8010356:	eba6 040a 	sub.w	r4, r6, sl
 801035a:	42a5      	cmp	r5, r4
 801035c:	4602      	mov	r2, r0
 801035e:	460b      	mov	r3, r1
 8010360:	f040 8116 	bne.w	8010590 <_dtoa_r+0x6e0>
 8010364:	f7ef ff1a 	bl	800019c <__adddf3>
 8010368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801036c:	4604      	mov	r4, r0
 801036e:	460d      	mov	r5, r1
 8010370:	f7f0 fb5a 	bl	8000a28 <__aeabi_dcmpgt>
 8010374:	2800      	cmp	r0, #0
 8010376:	f040 80f8 	bne.w	801056a <_dtoa_r+0x6ba>
 801037a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801037e:	4620      	mov	r0, r4
 8010380:	4629      	mov	r1, r5
 8010382:	f7f0 fb29 	bl	80009d8 <__aeabi_dcmpeq>
 8010386:	b118      	cbz	r0, 8010390 <_dtoa_r+0x4e0>
 8010388:	f018 0f01 	tst.w	r8, #1
 801038c:	f040 80ed 	bne.w	801056a <_dtoa_r+0x6ba>
 8010390:	4649      	mov	r1, r9
 8010392:	4658      	mov	r0, fp
 8010394:	f000 fc92 	bl	8010cbc <_Bfree>
 8010398:	2300      	movs	r3, #0
 801039a:	7033      	strb	r3, [r6, #0]
 801039c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801039e:	3701      	adds	r7, #1
 80103a0:	601f      	str	r7, [r3, #0]
 80103a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f000 8320 	beq.w	80109ea <_dtoa_r+0xb3a>
 80103aa:	601e      	str	r6, [r3, #0]
 80103ac:	e31d      	b.n	80109ea <_dtoa_r+0xb3a>
 80103ae:	07e2      	lsls	r2, r4, #31
 80103b0:	d505      	bpl.n	80103be <_dtoa_r+0x50e>
 80103b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80103b6:	f7f0 f8a7 	bl	8000508 <__aeabi_dmul>
 80103ba:	2301      	movs	r3, #1
 80103bc:	3601      	adds	r6, #1
 80103be:	1064      	asrs	r4, r4, #1
 80103c0:	3508      	adds	r5, #8
 80103c2:	e73f      	b.n	8010244 <_dtoa_r+0x394>
 80103c4:	2602      	movs	r6, #2
 80103c6:	e742      	b.n	801024e <_dtoa_r+0x39e>
 80103c8:	9c07      	ldr	r4, [sp, #28]
 80103ca:	9704      	str	r7, [sp, #16]
 80103cc:	e761      	b.n	8010292 <_dtoa_r+0x3e2>
 80103ce:	bf00      	nop
 80103d0:	080147e0 	.word	0x080147e0
 80103d4:	080147b8 	.word	0x080147b8
 80103d8:	3ff00000 	.word	0x3ff00000
 80103dc:	40240000 	.word	0x40240000
 80103e0:	401c0000 	.word	0x401c0000
 80103e4:	40140000 	.word	0x40140000
 80103e8:	4b70      	ldr	r3, [pc, #448]	@ (80105ac <_dtoa_r+0x6fc>)
 80103ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80103f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103f4:	4454      	add	r4, sl
 80103f6:	2900      	cmp	r1, #0
 80103f8:	d045      	beq.n	8010486 <_dtoa_r+0x5d6>
 80103fa:	2000      	movs	r0, #0
 80103fc:	496c      	ldr	r1, [pc, #432]	@ (80105b0 <_dtoa_r+0x700>)
 80103fe:	f7f0 f9ad 	bl	800075c <__aeabi_ddiv>
 8010402:	4633      	mov	r3, r6
 8010404:	462a      	mov	r2, r5
 8010406:	f7ef fec7 	bl	8000198 <__aeabi_dsub>
 801040a:	4656      	mov	r6, sl
 801040c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010414:	f7f0 fb28 	bl	8000a68 <__aeabi_d2iz>
 8010418:	4605      	mov	r5, r0
 801041a:	f7f0 f80b 	bl	8000434 <__aeabi_i2d>
 801041e:	4602      	mov	r2, r0
 8010420:	460b      	mov	r3, r1
 8010422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010426:	f7ef feb7 	bl	8000198 <__aeabi_dsub>
 801042a:	4602      	mov	r2, r0
 801042c:	460b      	mov	r3, r1
 801042e:	3530      	adds	r5, #48	@ 0x30
 8010430:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010434:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010438:	f806 5b01 	strb.w	r5, [r6], #1
 801043c:	f7f0 fad6 	bl	80009ec <__aeabi_dcmplt>
 8010440:	2800      	cmp	r0, #0
 8010442:	d163      	bne.n	801050c <_dtoa_r+0x65c>
 8010444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010448:	2000      	movs	r0, #0
 801044a:	495a      	ldr	r1, [pc, #360]	@ (80105b4 <_dtoa_r+0x704>)
 801044c:	f7ef fea4 	bl	8000198 <__aeabi_dsub>
 8010450:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010454:	f7f0 faca 	bl	80009ec <__aeabi_dcmplt>
 8010458:	2800      	cmp	r0, #0
 801045a:	f040 8087 	bne.w	801056c <_dtoa_r+0x6bc>
 801045e:	42a6      	cmp	r6, r4
 8010460:	f43f af43 	beq.w	80102ea <_dtoa_r+0x43a>
 8010464:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010468:	2200      	movs	r2, #0
 801046a:	4b53      	ldr	r3, [pc, #332]	@ (80105b8 <_dtoa_r+0x708>)
 801046c:	f7f0 f84c 	bl	8000508 <__aeabi_dmul>
 8010470:	2200      	movs	r2, #0
 8010472:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801047a:	4b4f      	ldr	r3, [pc, #316]	@ (80105b8 <_dtoa_r+0x708>)
 801047c:	f7f0 f844 	bl	8000508 <__aeabi_dmul>
 8010480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010484:	e7c4      	b.n	8010410 <_dtoa_r+0x560>
 8010486:	4631      	mov	r1, r6
 8010488:	4628      	mov	r0, r5
 801048a:	f7f0 f83d 	bl	8000508 <__aeabi_dmul>
 801048e:	4656      	mov	r6, sl
 8010490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010494:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801049a:	f7f0 fae5 	bl	8000a68 <__aeabi_d2iz>
 801049e:	4605      	mov	r5, r0
 80104a0:	f7ef ffc8 	bl	8000434 <__aeabi_i2d>
 80104a4:	4602      	mov	r2, r0
 80104a6:	460b      	mov	r3, r1
 80104a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104ac:	f7ef fe74 	bl	8000198 <__aeabi_dsub>
 80104b0:	4602      	mov	r2, r0
 80104b2:	460b      	mov	r3, r1
 80104b4:	3530      	adds	r5, #48	@ 0x30
 80104b6:	f806 5b01 	strb.w	r5, [r6], #1
 80104ba:	42a6      	cmp	r6, r4
 80104bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104c0:	f04f 0200 	mov.w	r2, #0
 80104c4:	d124      	bne.n	8010510 <_dtoa_r+0x660>
 80104c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80104ca:	4b39      	ldr	r3, [pc, #228]	@ (80105b0 <_dtoa_r+0x700>)
 80104cc:	f7ef fe66 	bl	800019c <__adddf3>
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104d8:	f7f0 faa6 	bl	8000a28 <__aeabi_dcmpgt>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d145      	bne.n	801056c <_dtoa_r+0x6bc>
 80104e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80104e4:	2000      	movs	r0, #0
 80104e6:	4932      	ldr	r1, [pc, #200]	@ (80105b0 <_dtoa_r+0x700>)
 80104e8:	f7ef fe56 	bl	8000198 <__aeabi_dsub>
 80104ec:	4602      	mov	r2, r0
 80104ee:	460b      	mov	r3, r1
 80104f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104f4:	f7f0 fa7a 	bl	80009ec <__aeabi_dcmplt>
 80104f8:	2800      	cmp	r0, #0
 80104fa:	f43f aef6 	beq.w	80102ea <_dtoa_r+0x43a>
 80104fe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010500:	1e73      	subs	r3, r6, #1
 8010502:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010504:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010508:	2b30      	cmp	r3, #48	@ 0x30
 801050a:	d0f8      	beq.n	80104fe <_dtoa_r+0x64e>
 801050c:	9f04      	ldr	r7, [sp, #16]
 801050e:	e73f      	b.n	8010390 <_dtoa_r+0x4e0>
 8010510:	4b29      	ldr	r3, [pc, #164]	@ (80105b8 <_dtoa_r+0x708>)
 8010512:	f7ef fff9 	bl	8000508 <__aeabi_dmul>
 8010516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801051a:	e7bc      	b.n	8010496 <_dtoa_r+0x5e6>
 801051c:	d10c      	bne.n	8010538 <_dtoa_r+0x688>
 801051e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010522:	2200      	movs	r2, #0
 8010524:	4b25      	ldr	r3, [pc, #148]	@ (80105bc <_dtoa_r+0x70c>)
 8010526:	f7ef ffef 	bl	8000508 <__aeabi_dmul>
 801052a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801052e:	f7f0 fa71 	bl	8000a14 <__aeabi_dcmpge>
 8010532:	2800      	cmp	r0, #0
 8010534:	f000 815b 	beq.w	80107ee <_dtoa_r+0x93e>
 8010538:	2400      	movs	r4, #0
 801053a:	4625      	mov	r5, r4
 801053c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801053e:	4656      	mov	r6, sl
 8010540:	43db      	mvns	r3, r3
 8010542:	9304      	str	r3, [sp, #16]
 8010544:	2700      	movs	r7, #0
 8010546:	4621      	mov	r1, r4
 8010548:	4658      	mov	r0, fp
 801054a:	f000 fbb7 	bl	8010cbc <_Bfree>
 801054e:	2d00      	cmp	r5, #0
 8010550:	d0dc      	beq.n	801050c <_dtoa_r+0x65c>
 8010552:	b12f      	cbz	r7, 8010560 <_dtoa_r+0x6b0>
 8010554:	42af      	cmp	r7, r5
 8010556:	d003      	beq.n	8010560 <_dtoa_r+0x6b0>
 8010558:	4639      	mov	r1, r7
 801055a:	4658      	mov	r0, fp
 801055c:	f000 fbae 	bl	8010cbc <_Bfree>
 8010560:	4629      	mov	r1, r5
 8010562:	4658      	mov	r0, fp
 8010564:	f000 fbaa 	bl	8010cbc <_Bfree>
 8010568:	e7d0      	b.n	801050c <_dtoa_r+0x65c>
 801056a:	9704      	str	r7, [sp, #16]
 801056c:	4633      	mov	r3, r6
 801056e:	461e      	mov	r6, r3
 8010570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010574:	2a39      	cmp	r2, #57	@ 0x39
 8010576:	d107      	bne.n	8010588 <_dtoa_r+0x6d8>
 8010578:	459a      	cmp	sl, r3
 801057a:	d1f8      	bne.n	801056e <_dtoa_r+0x6be>
 801057c:	9a04      	ldr	r2, [sp, #16]
 801057e:	3201      	adds	r2, #1
 8010580:	9204      	str	r2, [sp, #16]
 8010582:	2230      	movs	r2, #48	@ 0x30
 8010584:	f88a 2000 	strb.w	r2, [sl]
 8010588:	781a      	ldrb	r2, [r3, #0]
 801058a:	3201      	adds	r2, #1
 801058c:	701a      	strb	r2, [r3, #0]
 801058e:	e7bd      	b.n	801050c <_dtoa_r+0x65c>
 8010590:	2200      	movs	r2, #0
 8010592:	4b09      	ldr	r3, [pc, #36]	@ (80105b8 <_dtoa_r+0x708>)
 8010594:	f7ef ffb8 	bl	8000508 <__aeabi_dmul>
 8010598:	2200      	movs	r2, #0
 801059a:	2300      	movs	r3, #0
 801059c:	4604      	mov	r4, r0
 801059e:	460d      	mov	r5, r1
 80105a0:	f7f0 fa1a 	bl	80009d8 <__aeabi_dcmpeq>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	f43f aebc 	beq.w	8010322 <_dtoa_r+0x472>
 80105aa:	e6f1      	b.n	8010390 <_dtoa_r+0x4e0>
 80105ac:	080147e0 	.word	0x080147e0
 80105b0:	3fe00000 	.word	0x3fe00000
 80105b4:	3ff00000 	.word	0x3ff00000
 80105b8:	40240000 	.word	0x40240000
 80105bc:	40140000 	.word	0x40140000
 80105c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80105c2:	2a00      	cmp	r2, #0
 80105c4:	f000 80db 	beq.w	801077e <_dtoa_r+0x8ce>
 80105c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80105ca:	2a01      	cmp	r2, #1
 80105cc:	f300 80bf 	bgt.w	801074e <_dtoa_r+0x89e>
 80105d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80105d2:	2a00      	cmp	r2, #0
 80105d4:	f000 80b7 	beq.w	8010746 <_dtoa_r+0x896>
 80105d8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80105dc:	4646      	mov	r6, r8
 80105de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80105e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105e2:	2101      	movs	r1, #1
 80105e4:	441a      	add	r2, r3
 80105e6:	4658      	mov	r0, fp
 80105e8:	4498      	add	r8, r3
 80105ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80105ec:	f000 fc64 	bl	8010eb8 <__i2b>
 80105f0:	4605      	mov	r5, r0
 80105f2:	b15e      	cbz	r6, 801060c <_dtoa_r+0x75c>
 80105f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	dd08      	ble.n	801060c <_dtoa_r+0x75c>
 80105fa:	42b3      	cmp	r3, r6
 80105fc:	bfa8      	it	ge
 80105fe:	4633      	movge	r3, r6
 8010600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010602:	eba8 0803 	sub.w	r8, r8, r3
 8010606:	1af6      	subs	r6, r6, r3
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	9309      	str	r3, [sp, #36]	@ 0x24
 801060c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801060e:	b1f3      	cbz	r3, 801064e <_dtoa_r+0x79e>
 8010610:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010612:	2b00      	cmp	r3, #0
 8010614:	f000 80b7 	beq.w	8010786 <_dtoa_r+0x8d6>
 8010618:	b18c      	cbz	r4, 801063e <_dtoa_r+0x78e>
 801061a:	4629      	mov	r1, r5
 801061c:	4622      	mov	r2, r4
 801061e:	4658      	mov	r0, fp
 8010620:	f000 fd08 	bl	8011034 <__pow5mult>
 8010624:	464a      	mov	r2, r9
 8010626:	4601      	mov	r1, r0
 8010628:	4605      	mov	r5, r0
 801062a:	4658      	mov	r0, fp
 801062c:	f000 fc5a 	bl	8010ee4 <__multiply>
 8010630:	4649      	mov	r1, r9
 8010632:	9004      	str	r0, [sp, #16]
 8010634:	4658      	mov	r0, fp
 8010636:	f000 fb41 	bl	8010cbc <_Bfree>
 801063a:	9b04      	ldr	r3, [sp, #16]
 801063c:	4699      	mov	r9, r3
 801063e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010640:	1b1a      	subs	r2, r3, r4
 8010642:	d004      	beq.n	801064e <_dtoa_r+0x79e>
 8010644:	4649      	mov	r1, r9
 8010646:	4658      	mov	r0, fp
 8010648:	f000 fcf4 	bl	8011034 <__pow5mult>
 801064c:	4681      	mov	r9, r0
 801064e:	2101      	movs	r1, #1
 8010650:	4658      	mov	r0, fp
 8010652:	f000 fc31 	bl	8010eb8 <__i2b>
 8010656:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010658:	4604      	mov	r4, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	f000 81c9 	beq.w	80109f2 <_dtoa_r+0xb42>
 8010660:	461a      	mov	r2, r3
 8010662:	4601      	mov	r1, r0
 8010664:	4658      	mov	r0, fp
 8010666:	f000 fce5 	bl	8011034 <__pow5mult>
 801066a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801066c:	4604      	mov	r4, r0
 801066e:	2b01      	cmp	r3, #1
 8010670:	f300 808f 	bgt.w	8010792 <_dtoa_r+0x8e2>
 8010674:	9b02      	ldr	r3, [sp, #8]
 8010676:	2b00      	cmp	r3, #0
 8010678:	f040 8087 	bne.w	801078a <_dtoa_r+0x8da>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010682:	2b00      	cmp	r3, #0
 8010684:	f040 8083 	bne.w	801078e <_dtoa_r+0x8de>
 8010688:	9b03      	ldr	r3, [sp, #12]
 801068a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801068e:	0d1b      	lsrs	r3, r3, #20
 8010690:	051b      	lsls	r3, r3, #20
 8010692:	b12b      	cbz	r3, 80106a0 <_dtoa_r+0x7f0>
 8010694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010696:	f108 0801 	add.w	r8, r8, #1
 801069a:	3301      	adds	r3, #1
 801069c:	9309      	str	r3, [sp, #36]	@ 0x24
 801069e:	2301      	movs	r3, #1
 80106a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80106a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	f000 81aa 	beq.w	80109fe <_dtoa_r+0xb4e>
 80106aa:	6923      	ldr	r3, [r4, #16]
 80106ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80106b0:	6918      	ldr	r0, [r3, #16]
 80106b2:	f000 fbb5 	bl	8010e20 <__hi0bits>
 80106b6:	f1c0 0020 	rsb	r0, r0, #32
 80106ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106bc:	4418      	add	r0, r3
 80106be:	f010 001f 	ands.w	r0, r0, #31
 80106c2:	d071      	beq.n	80107a8 <_dtoa_r+0x8f8>
 80106c4:	f1c0 0320 	rsb	r3, r0, #32
 80106c8:	2b04      	cmp	r3, #4
 80106ca:	dd65      	ble.n	8010798 <_dtoa_r+0x8e8>
 80106cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106ce:	f1c0 001c 	rsb	r0, r0, #28
 80106d2:	4403      	add	r3, r0
 80106d4:	4480      	add	r8, r0
 80106d6:	4406      	add	r6, r0
 80106d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80106da:	f1b8 0f00 	cmp.w	r8, #0
 80106de:	dd05      	ble.n	80106ec <_dtoa_r+0x83c>
 80106e0:	4649      	mov	r1, r9
 80106e2:	4642      	mov	r2, r8
 80106e4:	4658      	mov	r0, fp
 80106e6:	f000 fcff 	bl	80110e8 <__lshift>
 80106ea:	4681      	mov	r9, r0
 80106ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	dd05      	ble.n	80106fe <_dtoa_r+0x84e>
 80106f2:	4621      	mov	r1, r4
 80106f4:	461a      	mov	r2, r3
 80106f6:	4658      	mov	r0, fp
 80106f8:	f000 fcf6 	bl	80110e8 <__lshift>
 80106fc:	4604      	mov	r4, r0
 80106fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010700:	2b00      	cmp	r3, #0
 8010702:	d053      	beq.n	80107ac <_dtoa_r+0x8fc>
 8010704:	4621      	mov	r1, r4
 8010706:	4648      	mov	r0, r9
 8010708:	f000 fd5a 	bl	80111c0 <__mcmp>
 801070c:	2800      	cmp	r0, #0
 801070e:	da4d      	bge.n	80107ac <_dtoa_r+0x8fc>
 8010710:	1e7b      	subs	r3, r7, #1
 8010712:	4649      	mov	r1, r9
 8010714:	9304      	str	r3, [sp, #16]
 8010716:	220a      	movs	r2, #10
 8010718:	2300      	movs	r3, #0
 801071a:	4658      	mov	r0, fp
 801071c:	f000 faf0 	bl	8010d00 <__multadd>
 8010720:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010722:	4681      	mov	r9, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	f000 816c 	beq.w	8010a02 <_dtoa_r+0xb52>
 801072a:	2300      	movs	r3, #0
 801072c:	4629      	mov	r1, r5
 801072e:	220a      	movs	r2, #10
 8010730:	4658      	mov	r0, fp
 8010732:	f000 fae5 	bl	8010d00 <__multadd>
 8010736:	9b08      	ldr	r3, [sp, #32]
 8010738:	4605      	mov	r5, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	dc61      	bgt.n	8010802 <_dtoa_r+0x952>
 801073e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010740:	2b02      	cmp	r3, #2
 8010742:	dc3b      	bgt.n	80107bc <_dtoa_r+0x90c>
 8010744:	e05d      	b.n	8010802 <_dtoa_r+0x952>
 8010746:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010748:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801074c:	e746      	b.n	80105dc <_dtoa_r+0x72c>
 801074e:	9b07      	ldr	r3, [sp, #28]
 8010750:	1e5c      	subs	r4, r3, #1
 8010752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010754:	42a3      	cmp	r3, r4
 8010756:	bfbf      	itttt	lt
 8010758:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801075a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 801075c:	1ae3      	sublt	r3, r4, r3
 801075e:	18d2      	addlt	r2, r2, r3
 8010760:	bfa8      	it	ge
 8010762:	1b1c      	subge	r4, r3, r4
 8010764:	9b07      	ldr	r3, [sp, #28]
 8010766:	bfbe      	ittt	lt
 8010768:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801076a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 801076c:	2400      	movlt	r4, #0
 801076e:	2b00      	cmp	r3, #0
 8010770:	bfb5      	itete	lt
 8010772:	eba8 0603 	sublt.w	r6, r8, r3
 8010776:	4646      	movge	r6, r8
 8010778:	2300      	movlt	r3, #0
 801077a:	9b07      	ldrge	r3, [sp, #28]
 801077c:	e730      	b.n	80105e0 <_dtoa_r+0x730>
 801077e:	4646      	mov	r6, r8
 8010780:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010782:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010784:	e735      	b.n	80105f2 <_dtoa_r+0x742>
 8010786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010788:	e75c      	b.n	8010644 <_dtoa_r+0x794>
 801078a:	2300      	movs	r3, #0
 801078c:	e788      	b.n	80106a0 <_dtoa_r+0x7f0>
 801078e:	9b02      	ldr	r3, [sp, #8]
 8010790:	e786      	b.n	80106a0 <_dtoa_r+0x7f0>
 8010792:	2300      	movs	r3, #0
 8010794:	930a      	str	r3, [sp, #40]	@ 0x28
 8010796:	e788      	b.n	80106aa <_dtoa_r+0x7fa>
 8010798:	d09f      	beq.n	80106da <_dtoa_r+0x82a>
 801079a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801079c:	331c      	adds	r3, #28
 801079e:	441a      	add	r2, r3
 80107a0:	4498      	add	r8, r3
 80107a2:	441e      	add	r6, r3
 80107a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80107a6:	e798      	b.n	80106da <_dtoa_r+0x82a>
 80107a8:	4603      	mov	r3, r0
 80107aa:	e7f6      	b.n	801079a <_dtoa_r+0x8ea>
 80107ac:	9b07      	ldr	r3, [sp, #28]
 80107ae:	9704      	str	r7, [sp, #16]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	dc20      	bgt.n	80107f6 <_dtoa_r+0x946>
 80107b4:	9308      	str	r3, [sp, #32]
 80107b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80107b8:	2b02      	cmp	r3, #2
 80107ba:	dd1e      	ble.n	80107fa <_dtoa_r+0x94a>
 80107bc:	9b08      	ldr	r3, [sp, #32]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f47f aebc 	bne.w	801053c <_dtoa_r+0x68c>
 80107c4:	4621      	mov	r1, r4
 80107c6:	2205      	movs	r2, #5
 80107c8:	4658      	mov	r0, fp
 80107ca:	f000 fa99 	bl	8010d00 <__multadd>
 80107ce:	4601      	mov	r1, r0
 80107d0:	4604      	mov	r4, r0
 80107d2:	4648      	mov	r0, r9
 80107d4:	f000 fcf4 	bl	80111c0 <__mcmp>
 80107d8:	2800      	cmp	r0, #0
 80107da:	f77f aeaf 	ble.w	801053c <_dtoa_r+0x68c>
 80107de:	2331      	movs	r3, #49	@ 0x31
 80107e0:	4656      	mov	r6, sl
 80107e2:	f806 3b01 	strb.w	r3, [r6], #1
 80107e6:	9b04      	ldr	r3, [sp, #16]
 80107e8:	3301      	adds	r3, #1
 80107ea:	9304      	str	r3, [sp, #16]
 80107ec:	e6aa      	b.n	8010544 <_dtoa_r+0x694>
 80107ee:	9c07      	ldr	r4, [sp, #28]
 80107f0:	9704      	str	r7, [sp, #16]
 80107f2:	4625      	mov	r5, r4
 80107f4:	e7f3      	b.n	80107de <_dtoa_r+0x92e>
 80107f6:	9b07      	ldr	r3, [sp, #28]
 80107f8:	9308      	str	r3, [sp, #32]
 80107fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f000 8104 	beq.w	8010a0a <_dtoa_r+0xb5a>
 8010802:	2e00      	cmp	r6, #0
 8010804:	dd05      	ble.n	8010812 <_dtoa_r+0x962>
 8010806:	4629      	mov	r1, r5
 8010808:	4632      	mov	r2, r6
 801080a:	4658      	mov	r0, fp
 801080c:	f000 fc6c 	bl	80110e8 <__lshift>
 8010810:	4605      	mov	r5, r0
 8010812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010814:	2b00      	cmp	r3, #0
 8010816:	d05a      	beq.n	80108ce <_dtoa_r+0xa1e>
 8010818:	4658      	mov	r0, fp
 801081a:	6869      	ldr	r1, [r5, #4]
 801081c:	f000 fa0e 	bl	8010c3c <_Balloc>
 8010820:	4606      	mov	r6, r0
 8010822:	b928      	cbnz	r0, 8010830 <_dtoa_r+0x980>
 8010824:	4602      	mov	r2, r0
 8010826:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801082a:	4b83      	ldr	r3, [pc, #524]	@ (8010a38 <_dtoa_r+0xb88>)
 801082c:	f7ff bb54 	b.w	800fed8 <_dtoa_r+0x28>
 8010830:	692a      	ldr	r2, [r5, #16]
 8010832:	f105 010c 	add.w	r1, r5, #12
 8010836:	3202      	adds	r2, #2
 8010838:	0092      	lsls	r2, r2, #2
 801083a:	300c      	adds	r0, #12
 801083c:	f002 f922 	bl	8012a84 <memcpy>
 8010840:	2201      	movs	r2, #1
 8010842:	4631      	mov	r1, r6
 8010844:	4658      	mov	r0, fp
 8010846:	f000 fc4f 	bl	80110e8 <__lshift>
 801084a:	462f      	mov	r7, r5
 801084c:	4605      	mov	r5, r0
 801084e:	f10a 0301 	add.w	r3, sl, #1
 8010852:	9307      	str	r3, [sp, #28]
 8010854:	9b08      	ldr	r3, [sp, #32]
 8010856:	4453      	add	r3, sl
 8010858:	930b      	str	r3, [sp, #44]	@ 0x2c
 801085a:	9b02      	ldr	r3, [sp, #8]
 801085c:	f003 0301 	and.w	r3, r3, #1
 8010860:	930a      	str	r3, [sp, #40]	@ 0x28
 8010862:	9b07      	ldr	r3, [sp, #28]
 8010864:	4621      	mov	r1, r4
 8010866:	3b01      	subs	r3, #1
 8010868:	4648      	mov	r0, r9
 801086a:	9302      	str	r3, [sp, #8]
 801086c:	f7ff fa98 	bl	800fda0 <quorem>
 8010870:	4639      	mov	r1, r7
 8010872:	9008      	str	r0, [sp, #32]
 8010874:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010878:	4648      	mov	r0, r9
 801087a:	f000 fca1 	bl	80111c0 <__mcmp>
 801087e:	462a      	mov	r2, r5
 8010880:	9009      	str	r0, [sp, #36]	@ 0x24
 8010882:	4621      	mov	r1, r4
 8010884:	4658      	mov	r0, fp
 8010886:	f000 fcb7 	bl	80111f8 <__mdiff>
 801088a:	68c2      	ldr	r2, [r0, #12]
 801088c:	4606      	mov	r6, r0
 801088e:	bb02      	cbnz	r2, 80108d2 <_dtoa_r+0xa22>
 8010890:	4601      	mov	r1, r0
 8010892:	4648      	mov	r0, r9
 8010894:	f000 fc94 	bl	80111c0 <__mcmp>
 8010898:	4602      	mov	r2, r0
 801089a:	4631      	mov	r1, r6
 801089c:	4658      	mov	r0, fp
 801089e:	920c      	str	r2, [sp, #48]	@ 0x30
 80108a0:	f000 fa0c 	bl	8010cbc <_Bfree>
 80108a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80108a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80108a8:	9e07      	ldr	r6, [sp, #28]
 80108aa:	ea43 0102 	orr.w	r1, r3, r2
 80108ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108b0:	4319      	orrs	r1, r3
 80108b2:	d110      	bne.n	80108d6 <_dtoa_r+0xa26>
 80108b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80108b8:	d029      	beq.n	801090e <_dtoa_r+0xa5e>
 80108ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dd02      	ble.n	80108c6 <_dtoa_r+0xa16>
 80108c0:	9b08      	ldr	r3, [sp, #32]
 80108c2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80108c6:	9b02      	ldr	r3, [sp, #8]
 80108c8:	f883 8000 	strb.w	r8, [r3]
 80108cc:	e63b      	b.n	8010546 <_dtoa_r+0x696>
 80108ce:	4628      	mov	r0, r5
 80108d0:	e7bb      	b.n	801084a <_dtoa_r+0x99a>
 80108d2:	2201      	movs	r2, #1
 80108d4:	e7e1      	b.n	801089a <_dtoa_r+0x9ea>
 80108d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108d8:	2b00      	cmp	r3, #0
 80108da:	db04      	blt.n	80108e6 <_dtoa_r+0xa36>
 80108dc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80108de:	430b      	orrs	r3, r1
 80108e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108e2:	430b      	orrs	r3, r1
 80108e4:	d120      	bne.n	8010928 <_dtoa_r+0xa78>
 80108e6:	2a00      	cmp	r2, #0
 80108e8:	dded      	ble.n	80108c6 <_dtoa_r+0xa16>
 80108ea:	4649      	mov	r1, r9
 80108ec:	2201      	movs	r2, #1
 80108ee:	4658      	mov	r0, fp
 80108f0:	f000 fbfa 	bl	80110e8 <__lshift>
 80108f4:	4621      	mov	r1, r4
 80108f6:	4681      	mov	r9, r0
 80108f8:	f000 fc62 	bl	80111c0 <__mcmp>
 80108fc:	2800      	cmp	r0, #0
 80108fe:	dc03      	bgt.n	8010908 <_dtoa_r+0xa58>
 8010900:	d1e1      	bne.n	80108c6 <_dtoa_r+0xa16>
 8010902:	f018 0f01 	tst.w	r8, #1
 8010906:	d0de      	beq.n	80108c6 <_dtoa_r+0xa16>
 8010908:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801090c:	d1d8      	bne.n	80108c0 <_dtoa_r+0xa10>
 801090e:	2339      	movs	r3, #57	@ 0x39
 8010910:	9a02      	ldr	r2, [sp, #8]
 8010912:	7013      	strb	r3, [r2, #0]
 8010914:	4633      	mov	r3, r6
 8010916:	461e      	mov	r6, r3
 8010918:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801091c:	3b01      	subs	r3, #1
 801091e:	2a39      	cmp	r2, #57	@ 0x39
 8010920:	d052      	beq.n	80109c8 <_dtoa_r+0xb18>
 8010922:	3201      	adds	r2, #1
 8010924:	701a      	strb	r2, [r3, #0]
 8010926:	e60e      	b.n	8010546 <_dtoa_r+0x696>
 8010928:	2a00      	cmp	r2, #0
 801092a:	dd07      	ble.n	801093c <_dtoa_r+0xa8c>
 801092c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010930:	d0ed      	beq.n	801090e <_dtoa_r+0xa5e>
 8010932:	9a02      	ldr	r2, [sp, #8]
 8010934:	f108 0301 	add.w	r3, r8, #1
 8010938:	7013      	strb	r3, [r2, #0]
 801093a:	e604      	b.n	8010546 <_dtoa_r+0x696>
 801093c:	9b07      	ldr	r3, [sp, #28]
 801093e:	9a07      	ldr	r2, [sp, #28]
 8010940:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010946:	4293      	cmp	r3, r2
 8010948:	d028      	beq.n	801099c <_dtoa_r+0xaec>
 801094a:	4649      	mov	r1, r9
 801094c:	2300      	movs	r3, #0
 801094e:	220a      	movs	r2, #10
 8010950:	4658      	mov	r0, fp
 8010952:	f000 f9d5 	bl	8010d00 <__multadd>
 8010956:	42af      	cmp	r7, r5
 8010958:	4681      	mov	r9, r0
 801095a:	f04f 0300 	mov.w	r3, #0
 801095e:	f04f 020a 	mov.w	r2, #10
 8010962:	4639      	mov	r1, r7
 8010964:	4658      	mov	r0, fp
 8010966:	d107      	bne.n	8010978 <_dtoa_r+0xac8>
 8010968:	f000 f9ca 	bl	8010d00 <__multadd>
 801096c:	4607      	mov	r7, r0
 801096e:	4605      	mov	r5, r0
 8010970:	9b07      	ldr	r3, [sp, #28]
 8010972:	3301      	adds	r3, #1
 8010974:	9307      	str	r3, [sp, #28]
 8010976:	e774      	b.n	8010862 <_dtoa_r+0x9b2>
 8010978:	f000 f9c2 	bl	8010d00 <__multadd>
 801097c:	4629      	mov	r1, r5
 801097e:	4607      	mov	r7, r0
 8010980:	2300      	movs	r3, #0
 8010982:	220a      	movs	r2, #10
 8010984:	4658      	mov	r0, fp
 8010986:	f000 f9bb 	bl	8010d00 <__multadd>
 801098a:	4605      	mov	r5, r0
 801098c:	e7f0      	b.n	8010970 <_dtoa_r+0xac0>
 801098e:	9b08      	ldr	r3, [sp, #32]
 8010990:	2700      	movs	r7, #0
 8010992:	2b00      	cmp	r3, #0
 8010994:	bfcc      	ite	gt
 8010996:	461e      	movgt	r6, r3
 8010998:	2601      	movle	r6, #1
 801099a:	4456      	add	r6, sl
 801099c:	4649      	mov	r1, r9
 801099e:	2201      	movs	r2, #1
 80109a0:	4658      	mov	r0, fp
 80109a2:	f000 fba1 	bl	80110e8 <__lshift>
 80109a6:	4621      	mov	r1, r4
 80109a8:	4681      	mov	r9, r0
 80109aa:	f000 fc09 	bl	80111c0 <__mcmp>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	dcb0      	bgt.n	8010914 <_dtoa_r+0xa64>
 80109b2:	d102      	bne.n	80109ba <_dtoa_r+0xb0a>
 80109b4:	f018 0f01 	tst.w	r8, #1
 80109b8:	d1ac      	bne.n	8010914 <_dtoa_r+0xa64>
 80109ba:	4633      	mov	r3, r6
 80109bc:	461e      	mov	r6, r3
 80109be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109c2:	2a30      	cmp	r2, #48	@ 0x30
 80109c4:	d0fa      	beq.n	80109bc <_dtoa_r+0xb0c>
 80109c6:	e5be      	b.n	8010546 <_dtoa_r+0x696>
 80109c8:	459a      	cmp	sl, r3
 80109ca:	d1a4      	bne.n	8010916 <_dtoa_r+0xa66>
 80109cc:	9b04      	ldr	r3, [sp, #16]
 80109ce:	3301      	adds	r3, #1
 80109d0:	9304      	str	r3, [sp, #16]
 80109d2:	2331      	movs	r3, #49	@ 0x31
 80109d4:	f88a 3000 	strb.w	r3, [sl]
 80109d8:	e5b5      	b.n	8010546 <_dtoa_r+0x696>
 80109da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80109dc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010a3c <_dtoa_r+0xb8c>
 80109e0:	b11b      	cbz	r3, 80109ea <_dtoa_r+0xb3a>
 80109e2:	f10a 0308 	add.w	r3, sl, #8
 80109e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80109e8:	6013      	str	r3, [r2, #0]
 80109ea:	4650      	mov	r0, sl
 80109ec:	b017      	add	sp, #92	@ 0x5c
 80109ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	f77f ae3d 	ble.w	8010674 <_dtoa_r+0x7c4>
 80109fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80109fe:	2001      	movs	r0, #1
 8010a00:	e65b      	b.n	80106ba <_dtoa_r+0x80a>
 8010a02:	9b08      	ldr	r3, [sp, #32]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f77f aed6 	ble.w	80107b6 <_dtoa_r+0x906>
 8010a0a:	4656      	mov	r6, sl
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	4648      	mov	r0, r9
 8010a10:	f7ff f9c6 	bl	800fda0 <quorem>
 8010a14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010a18:	9b08      	ldr	r3, [sp, #32]
 8010a1a:	f806 8b01 	strb.w	r8, [r6], #1
 8010a1e:	eba6 020a 	sub.w	r2, r6, sl
 8010a22:	4293      	cmp	r3, r2
 8010a24:	ddb3      	ble.n	801098e <_dtoa_r+0xade>
 8010a26:	4649      	mov	r1, r9
 8010a28:	2300      	movs	r3, #0
 8010a2a:	220a      	movs	r2, #10
 8010a2c:	4658      	mov	r0, fp
 8010a2e:	f000 f967 	bl	8010d00 <__multadd>
 8010a32:	4681      	mov	r9, r0
 8010a34:	e7ea      	b.n	8010a0c <_dtoa_r+0xb5c>
 8010a36:	bf00      	nop
 8010a38:	0801473b 	.word	0x0801473b
 8010a3c:	080146bf 	.word	0x080146bf

08010a40 <_free_r>:
 8010a40:	b538      	push	{r3, r4, r5, lr}
 8010a42:	4605      	mov	r5, r0
 8010a44:	2900      	cmp	r1, #0
 8010a46:	d040      	beq.n	8010aca <_free_r+0x8a>
 8010a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a4c:	1f0c      	subs	r4, r1, #4
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	bfb8      	it	lt
 8010a52:	18e4      	addlt	r4, r4, r3
 8010a54:	f000 f8e6 	bl	8010c24 <__malloc_lock>
 8010a58:	4a1c      	ldr	r2, [pc, #112]	@ (8010acc <_free_r+0x8c>)
 8010a5a:	6813      	ldr	r3, [r2, #0]
 8010a5c:	b933      	cbnz	r3, 8010a6c <_free_r+0x2c>
 8010a5e:	6063      	str	r3, [r4, #4]
 8010a60:	6014      	str	r4, [r2, #0]
 8010a62:	4628      	mov	r0, r5
 8010a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a68:	f000 b8e2 	b.w	8010c30 <__malloc_unlock>
 8010a6c:	42a3      	cmp	r3, r4
 8010a6e:	d908      	bls.n	8010a82 <_free_r+0x42>
 8010a70:	6820      	ldr	r0, [r4, #0]
 8010a72:	1821      	adds	r1, r4, r0
 8010a74:	428b      	cmp	r3, r1
 8010a76:	bf01      	itttt	eq
 8010a78:	6819      	ldreq	r1, [r3, #0]
 8010a7a:	685b      	ldreq	r3, [r3, #4]
 8010a7c:	1809      	addeq	r1, r1, r0
 8010a7e:	6021      	streq	r1, [r4, #0]
 8010a80:	e7ed      	b.n	8010a5e <_free_r+0x1e>
 8010a82:	461a      	mov	r2, r3
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	b10b      	cbz	r3, 8010a8c <_free_r+0x4c>
 8010a88:	42a3      	cmp	r3, r4
 8010a8a:	d9fa      	bls.n	8010a82 <_free_r+0x42>
 8010a8c:	6811      	ldr	r1, [r2, #0]
 8010a8e:	1850      	adds	r0, r2, r1
 8010a90:	42a0      	cmp	r0, r4
 8010a92:	d10b      	bne.n	8010aac <_free_r+0x6c>
 8010a94:	6820      	ldr	r0, [r4, #0]
 8010a96:	4401      	add	r1, r0
 8010a98:	1850      	adds	r0, r2, r1
 8010a9a:	4283      	cmp	r3, r0
 8010a9c:	6011      	str	r1, [r2, #0]
 8010a9e:	d1e0      	bne.n	8010a62 <_free_r+0x22>
 8010aa0:	6818      	ldr	r0, [r3, #0]
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	4408      	add	r0, r1
 8010aa6:	6010      	str	r0, [r2, #0]
 8010aa8:	6053      	str	r3, [r2, #4]
 8010aaa:	e7da      	b.n	8010a62 <_free_r+0x22>
 8010aac:	d902      	bls.n	8010ab4 <_free_r+0x74>
 8010aae:	230c      	movs	r3, #12
 8010ab0:	602b      	str	r3, [r5, #0]
 8010ab2:	e7d6      	b.n	8010a62 <_free_r+0x22>
 8010ab4:	6820      	ldr	r0, [r4, #0]
 8010ab6:	1821      	adds	r1, r4, r0
 8010ab8:	428b      	cmp	r3, r1
 8010aba:	bf01      	itttt	eq
 8010abc:	6819      	ldreq	r1, [r3, #0]
 8010abe:	685b      	ldreq	r3, [r3, #4]
 8010ac0:	1809      	addeq	r1, r1, r0
 8010ac2:	6021      	streq	r1, [r4, #0]
 8010ac4:	6063      	str	r3, [r4, #4]
 8010ac6:	6054      	str	r4, [r2, #4]
 8010ac8:	e7cb      	b.n	8010a62 <_free_r+0x22>
 8010aca:	bd38      	pop	{r3, r4, r5, pc}
 8010acc:	200008c4 	.word	0x200008c4

08010ad0 <malloc>:
 8010ad0:	4b02      	ldr	r3, [pc, #8]	@ (8010adc <malloc+0xc>)
 8010ad2:	4601      	mov	r1, r0
 8010ad4:	6818      	ldr	r0, [r3, #0]
 8010ad6:	f000 b825 	b.w	8010b24 <_malloc_r>
 8010ada:	bf00      	nop
 8010adc:	200001a4 	.word	0x200001a4

08010ae0 <sbrk_aligned>:
 8010ae0:	b570      	push	{r4, r5, r6, lr}
 8010ae2:	4e0f      	ldr	r6, [pc, #60]	@ (8010b20 <sbrk_aligned+0x40>)
 8010ae4:	460c      	mov	r4, r1
 8010ae6:	6831      	ldr	r1, [r6, #0]
 8010ae8:	4605      	mov	r5, r0
 8010aea:	b911      	cbnz	r1, 8010af2 <sbrk_aligned+0x12>
 8010aec:	f001 ffba 	bl	8012a64 <_sbrk_r>
 8010af0:	6030      	str	r0, [r6, #0]
 8010af2:	4621      	mov	r1, r4
 8010af4:	4628      	mov	r0, r5
 8010af6:	f001 ffb5 	bl	8012a64 <_sbrk_r>
 8010afa:	1c43      	adds	r3, r0, #1
 8010afc:	d103      	bne.n	8010b06 <sbrk_aligned+0x26>
 8010afe:	f04f 34ff 	mov.w	r4, #4294967295
 8010b02:	4620      	mov	r0, r4
 8010b04:	bd70      	pop	{r4, r5, r6, pc}
 8010b06:	1cc4      	adds	r4, r0, #3
 8010b08:	f024 0403 	bic.w	r4, r4, #3
 8010b0c:	42a0      	cmp	r0, r4
 8010b0e:	d0f8      	beq.n	8010b02 <sbrk_aligned+0x22>
 8010b10:	1a21      	subs	r1, r4, r0
 8010b12:	4628      	mov	r0, r5
 8010b14:	f001 ffa6 	bl	8012a64 <_sbrk_r>
 8010b18:	3001      	adds	r0, #1
 8010b1a:	d1f2      	bne.n	8010b02 <sbrk_aligned+0x22>
 8010b1c:	e7ef      	b.n	8010afe <sbrk_aligned+0x1e>
 8010b1e:	bf00      	nop
 8010b20:	200008c0 	.word	0x200008c0

08010b24 <_malloc_r>:
 8010b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b28:	1ccd      	adds	r5, r1, #3
 8010b2a:	f025 0503 	bic.w	r5, r5, #3
 8010b2e:	3508      	adds	r5, #8
 8010b30:	2d0c      	cmp	r5, #12
 8010b32:	bf38      	it	cc
 8010b34:	250c      	movcc	r5, #12
 8010b36:	2d00      	cmp	r5, #0
 8010b38:	4606      	mov	r6, r0
 8010b3a:	db01      	blt.n	8010b40 <_malloc_r+0x1c>
 8010b3c:	42a9      	cmp	r1, r5
 8010b3e:	d904      	bls.n	8010b4a <_malloc_r+0x26>
 8010b40:	230c      	movs	r3, #12
 8010b42:	6033      	str	r3, [r6, #0]
 8010b44:	2000      	movs	r0, #0
 8010b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c20 <_malloc_r+0xfc>
 8010b4e:	f000 f869 	bl	8010c24 <__malloc_lock>
 8010b52:	f8d8 3000 	ldr.w	r3, [r8]
 8010b56:	461c      	mov	r4, r3
 8010b58:	bb44      	cbnz	r4, 8010bac <_malloc_r+0x88>
 8010b5a:	4629      	mov	r1, r5
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	f7ff ffbf 	bl	8010ae0 <sbrk_aligned>
 8010b62:	1c43      	adds	r3, r0, #1
 8010b64:	4604      	mov	r4, r0
 8010b66:	d158      	bne.n	8010c1a <_malloc_r+0xf6>
 8010b68:	f8d8 4000 	ldr.w	r4, [r8]
 8010b6c:	4627      	mov	r7, r4
 8010b6e:	2f00      	cmp	r7, #0
 8010b70:	d143      	bne.n	8010bfa <_malloc_r+0xd6>
 8010b72:	2c00      	cmp	r4, #0
 8010b74:	d04b      	beq.n	8010c0e <_malloc_r+0xea>
 8010b76:	6823      	ldr	r3, [r4, #0]
 8010b78:	4639      	mov	r1, r7
 8010b7a:	4630      	mov	r0, r6
 8010b7c:	eb04 0903 	add.w	r9, r4, r3
 8010b80:	f001 ff70 	bl	8012a64 <_sbrk_r>
 8010b84:	4581      	cmp	r9, r0
 8010b86:	d142      	bne.n	8010c0e <_malloc_r+0xea>
 8010b88:	6821      	ldr	r1, [r4, #0]
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	1a6d      	subs	r5, r5, r1
 8010b8e:	4629      	mov	r1, r5
 8010b90:	f7ff ffa6 	bl	8010ae0 <sbrk_aligned>
 8010b94:	3001      	adds	r0, #1
 8010b96:	d03a      	beq.n	8010c0e <_malloc_r+0xea>
 8010b98:	6823      	ldr	r3, [r4, #0]
 8010b9a:	442b      	add	r3, r5
 8010b9c:	6023      	str	r3, [r4, #0]
 8010b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8010ba2:	685a      	ldr	r2, [r3, #4]
 8010ba4:	bb62      	cbnz	r2, 8010c00 <_malloc_r+0xdc>
 8010ba6:	f8c8 7000 	str.w	r7, [r8]
 8010baa:	e00f      	b.n	8010bcc <_malloc_r+0xa8>
 8010bac:	6822      	ldr	r2, [r4, #0]
 8010bae:	1b52      	subs	r2, r2, r5
 8010bb0:	d420      	bmi.n	8010bf4 <_malloc_r+0xd0>
 8010bb2:	2a0b      	cmp	r2, #11
 8010bb4:	d917      	bls.n	8010be6 <_malloc_r+0xc2>
 8010bb6:	1961      	adds	r1, r4, r5
 8010bb8:	42a3      	cmp	r3, r4
 8010bba:	6025      	str	r5, [r4, #0]
 8010bbc:	bf18      	it	ne
 8010bbe:	6059      	strne	r1, [r3, #4]
 8010bc0:	6863      	ldr	r3, [r4, #4]
 8010bc2:	bf08      	it	eq
 8010bc4:	f8c8 1000 	streq.w	r1, [r8]
 8010bc8:	5162      	str	r2, [r4, r5]
 8010bca:	604b      	str	r3, [r1, #4]
 8010bcc:	4630      	mov	r0, r6
 8010bce:	f000 f82f 	bl	8010c30 <__malloc_unlock>
 8010bd2:	f104 000b 	add.w	r0, r4, #11
 8010bd6:	1d23      	adds	r3, r4, #4
 8010bd8:	f020 0007 	bic.w	r0, r0, #7
 8010bdc:	1ac2      	subs	r2, r0, r3
 8010bde:	bf1c      	itt	ne
 8010be0:	1a1b      	subne	r3, r3, r0
 8010be2:	50a3      	strne	r3, [r4, r2]
 8010be4:	e7af      	b.n	8010b46 <_malloc_r+0x22>
 8010be6:	6862      	ldr	r2, [r4, #4]
 8010be8:	42a3      	cmp	r3, r4
 8010bea:	bf0c      	ite	eq
 8010bec:	f8c8 2000 	streq.w	r2, [r8]
 8010bf0:	605a      	strne	r2, [r3, #4]
 8010bf2:	e7eb      	b.n	8010bcc <_malloc_r+0xa8>
 8010bf4:	4623      	mov	r3, r4
 8010bf6:	6864      	ldr	r4, [r4, #4]
 8010bf8:	e7ae      	b.n	8010b58 <_malloc_r+0x34>
 8010bfa:	463c      	mov	r4, r7
 8010bfc:	687f      	ldr	r7, [r7, #4]
 8010bfe:	e7b6      	b.n	8010b6e <_malloc_r+0x4a>
 8010c00:	461a      	mov	r2, r3
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	42a3      	cmp	r3, r4
 8010c06:	d1fb      	bne.n	8010c00 <_malloc_r+0xdc>
 8010c08:	2300      	movs	r3, #0
 8010c0a:	6053      	str	r3, [r2, #4]
 8010c0c:	e7de      	b.n	8010bcc <_malloc_r+0xa8>
 8010c0e:	230c      	movs	r3, #12
 8010c10:	4630      	mov	r0, r6
 8010c12:	6033      	str	r3, [r6, #0]
 8010c14:	f000 f80c 	bl	8010c30 <__malloc_unlock>
 8010c18:	e794      	b.n	8010b44 <_malloc_r+0x20>
 8010c1a:	6005      	str	r5, [r0, #0]
 8010c1c:	e7d6      	b.n	8010bcc <_malloc_r+0xa8>
 8010c1e:	bf00      	nop
 8010c20:	200008c4 	.word	0x200008c4

08010c24 <__malloc_lock>:
 8010c24:	4801      	ldr	r0, [pc, #4]	@ (8010c2c <__malloc_lock+0x8>)
 8010c26:	f7ff b8a6 	b.w	800fd76 <__retarget_lock_acquire_recursive>
 8010c2a:	bf00      	nop
 8010c2c:	200008bc 	.word	0x200008bc

08010c30 <__malloc_unlock>:
 8010c30:	4801      	ldr	r0, [pc, #4]	@ (8010c38 <__malloc_unlock+0x8>)
 8010c32:	f7ff b8a1 	b.w	800fd78 <__retarget_lock_release_recursive>
 8010c36:	bf00      	nop
 8010c38:	200008bc 	.word	0x200008bc

08010c3c <_Balloc>:
 8010c3c:	b570      	push	{r4, r5, r6, lr}
 8010c3e:	69c6      	ldr	r6, [r0, #28]
 8010c40:	4604      	mov	r4, r0
 8010c42:	460d      	mov	r5, r1
 8010c44:	b976      	cbnz	r6, 8010c64 <_Balloc+0x28>
 8010c46:	2010      	movs	r0, #16
 8010c48:	f7ff ff42 	bl	8010ad0 <malloc>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	61e0      	str	r0, [r4, #28]
 8010c50:	b920      	cbnz	r0, 8010c5c <_Balloc+0x20>
 8010c52:	216b      	movs	r1, #107	@ 0x6b
 8010c54:	4b17      	ldr	r3, [pc, #92]	@ (8010cb4 <_Balloc+0x78>)
 8010c56:	4818      	ldr	r0, [pc, #96]	@ (8010cb8 <_Balloc+0x7c>)
 8010c58:	f001 ff28 	bl	8012aac <__assert_func>
 8010c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c60:	6006      	str	r6, [r0, #0]
 8010c62:	60c6      	str	r6, [r0, #12]
 8010c64:	69e6      	ldr	r6, [r4, #28]
 8010c66:	68f3      	ldr	r3, [r6, #12]
 8010c68:	b183      	cbz	r3, 8010c8c <_Balloc+0x50>
 8010c6a:	69e3      	ldr	r3, [r4, #28]
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c72:	b9b8      	cbnz	r0, 8010ca4 <_Balloc+0x68>
 8010c74:	2101      	movs	r1, #1
 8010c76:	fa01 f605 	lsl.w	r6, r1, r5
 8010c7a:	1d72      	adds	r2, r6, #5
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	0092      	lsls	r2, r2, #2
 8010c80:	f001 ff32 	bl	8012ae8 <_calloc_r>
 8010c84:	b160      	cbz	r0, 8010ca0 <_Balloc+0x64>
 8010c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c8a:	e00e      	b.n	8010caa <_Balloc+0x6e>
 8010c8c:	2221      	movs	r2, #33	@ 0x21
 8010c8e:	2104      	movs	r1, #4
 8010c90:	4620      	mov	r0, r4
 8010c92:	f001 ff29 	bl	8012ae8 <_calloc_r>
 8010c96:	69e3      	ldr	r3, [r4, #28]
 8010c98:	60f0      	str	r0, [r6, #12]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d1e4      	bne.n	8010c6a <_Balloc+0x2e>
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	bd70      	pop	{r4, r5, r6, pc}
 8010ca4:	6802      	ldr	r2, [r0, #0]
 8010ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010caa:	2300      	movs	r3, #0
 8010cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010cb0:	e7f7      	b.n	8010ca2 <_Balloc+0x66>
 8010cb2:	bf00      	nop
 8010cb4:	080146cc 	.word	0x080146cc
 8010cb8:	0801474c 	.word	0x0801474c

08010cbc <_Bfree>:
 8010cbc:	b570      	push	{r4, r5, r6, lr}
 8010cbe:	69c6      	ldr	r6, [r0, #28]
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	460c      	mov	r4, r1
 8010cc4:	b976      	cbnz	r6, 8010ce4 <_Bfree+0x28>
 8010cc6:	2010      	movs	r0, #16
 8010cc8:	f7ff ff02 	bl	8010ad0 <malloc>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	61e8      	str	r0, [r5, #28]
 8010cd0:	b920      	cbnz	r0, 8010cdc <_Bfree+0x20>
 8010cd2:	218f      	movs	r1, #143	@ 0x8f
 8010cd4:	4b08      	ldr	r3, [pc, #32]	@ (8010cf8 <_Bfree+0x3c>)
 8010cd6:	4809      	ldr	r0, [pc, #36]	@ (8010cfc <_Bfree+0x40>)
 8010cd8:	f001 fee8 	bl	8012aac <__assert_func>
 8010cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ce0:	6006      	str	r6, [r0, #0]
 8010ce2:	60c6      	str	r6, [r0, #12]
 8010ce4:	b13c      	cbz	r4, 8010cf6 <_Bfree+0x3a>
 8010ce6:	69eb      	ldr	r3, [r5, #28]
 8010ce8:	6862      	ldr	r2, [r4, #4]
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010cf0:	6021      	str	r1, [r4, #0]
 8010cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010cf6:	bd70      	pop	{r4, r5, r6, pc}
 8010cf8:	080146cc 	.word	0x080146cc
 8010cfc:	0801474c 	.word	0x0801474c

08010d00 <__multadd>:
 8010d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d04:	4607      	mov	r7, r0
 8010d06:	460c      	mov	r4, r1
 8010d08:	461e      	mov	r6, r3
 8010d0a:	2000      	movs	r0, #0
 8010d0c:	690d      	ldr	r5, [r1, #16]
 8010d0e:	f101 0c14 	add.w	ip, r1, #20
 8010d12:	f8dc 3000 	ldr.w	r3, [ip]
 8010d16:	3001      	adds	r0, #1
 8010d18:	b299      	uxth	r1, r3
 8010d1a:	fb02 6101 	mla	r1, r2, r1, r6
 8010d1e:	0c1e      	lsrs	r6, r3, #16
 8010d20:	0c0b      	lsrs	r3, r1, #16
 8010d22:	fb02 3306 	mla	r3, r2, r6, r3
 8010d26:	b289      	uxth	r1, r1
 8010d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010d2c:	4285      	cmp	r5, r0
 8010d2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010d32:	f84c 1b04 	str.w	r1, [ip], #4
 8010d36:	dcec      	bgt.n	8010d12 <__multadd+0x12>
 8010d38:	b30e      	cbz	r6, 8010d7e <__multadd+0x7e>
 8010d3a:	68a3      	ldr	r3, [r4, #8]
 8010d3c:	42ab      	cmp	r3, r5
 8010d3e:	dc19      	bgt.n	8010d74 <__multadd+0x74>
 8010d40:	6861      	ldr	r1, [r4, #4]
 8010d42:	4638      	mov	r0, r7
 8010d44:	3101      	adds	r1, #1
 8010d46:	f7ff ff79 	bl	8010c3c <_Balloc>
 8010d4a:	4680      	mov	r8, r0
 8010d4c:	b928      	cbnz	r0, 8010d5a <__multadd+0x5a>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	21ba      	movs	r1, #186	@ 0xba
 8010d52:	4b0c      	ldr	r3, [pc, #48]	@ (8010d84 <__multadd+0x84>)
 8010d54:	480c      	ldr	r0, [pc, #48]	@ (8010d88 <__multadd+0x88>)
 8010d56:	f001 fea9 	bl	8012aac <__assert_func>
 8010d5a:	6922      	ldr	r2, [r4, #16]
 8010d5c:	f104 010c 	add.w	r1, r4, #12
 8010d60:	3202      	adds	r2, #2
 8010d62:	0092      	lsls	r2, r2, #2
 8010d64:	300c      	adds	r0, #12
 8010d66:	f001 fe8d 	bl	8012a84 <memcpy>
 8010d6a:	4621      	mov	r1, r4
 8010d6c:	4638      	mov	r0, r7
 8010d6e:	f7ff ffa5 	bl	8010cbc <_Bfree>
 8010d72:	4644      	mov	r4, r8
 8010d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d78:	3501      	adds	r5, #1
 8010d7a:	615e      	str	r6, [r3, #20]
 8010d7c:	6125      	str	r5, [r4, #16]
 8010d7e:	4620      	mov	r0, r4
 8010d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d84:	0801473b 	.word	0x0801473b
 8010d88:	0801474c 	.word	0x0801474c

08010d8c <__s2b>:
 8010d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d90:	4615      	mov	r5, r2
 8010d92:	2209      	movs	r2, #9
 8010d94:	461f      	mov	r7, r3
 8010d96:	3308      	adds	r3, #8
 8010d98:	460c      	mov	r4, r1
 8010d9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d9e:	4606      	mov	r6, r0
 8010da0:	2201      	movs	r2, #1
 8010da2:	2100      	movs	r1, #0
 8010da4:	429a      	cmp	r2, r3
 8010da6:	db09      	blt.n	8010dbc <__s2b+0x30>
 8010da8:	4630      	mov	r0, r6
 8010daa:	f7ff ff47 	bl	8010c3c <_Balloc>
 8010dae:	b940      	cbnz	r0, 8010dc2 <__s2b+0x36>
 8010db0:	4602      	mov	r2, r0
 8010db2:	21d3      	movs	r1, #211	@ 0xd3
 8010db4:	4b18      	ldr	r3, [pc, #96]	@ (8010e18 <__s2b+0x8c>)
 8010db6:	4819      	ldr	r0, [pc, #100]	@ (8010e1c <__s2b+0x90>)
 8010db8:	f001 fe78 	bl	8012aac <__assert_func>
 8010dbc:	0052      	lsls	r2, r2, #1
 8010dbe:	3101      	adds	r1, #1
 8010dc0:	e7f0      	b.n	8010da4 <__s2b+0x18>
 8010dc2:	9b08      	ldr	r3, [sp, #32]
 8010dc4:	2d09      	cmp	r5, #9
 8010dc6:	6143      	str	r3, [r0, #20]
 8010dc8:	f04f 0301 	mov.w	r3, #1
 8010dcc:	6103      	str	r3, [r0, #16]
 8010dce:	dd16      	ble.n	8010dfe <__s2b+0x72>
 8010dd0:	f104 0909 	add.w	r9, r4, #9
 8010dd4:	46c8      	mov	r8, r9
 8010dd6:	442c      	add	r4, r5
 8010dd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010ddc:	4601      	mov	r1, r0
 8010dde:	220a      	movs	r2, #10
 8010de0:	4630      	mov	r0, r6
 8010de2:	3b30      	subs	r3, #48	@ 0x30
 8010de4:	f7ff ff8c 	bl	8010d00 <__multadd>
 8010de8:	45a0      	cmp	r8, r4
 8010dea:	d1f5      	bne.n	8010dd8 <__s2b+0x4c>
 8010dec:	f1a5 0408 	sub.w	r4, r5, #8
 8010df0:	444c      	add	r4, r9
 8010df2:	1b2d      	subs	r5, r5, r4
 8010df4:	1963      	adds	r3, r4, r5
 8010df6:	42bb      	cmp	r3, r7
 8010df8:	db04      	blt.n	8010e04 <__s2b+0x78>
 8010dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dfe:	2509      	movs	r5, #9
 8010e00:	340a      	adds	r4, #10
 8010e02:	e7f6      	b.n	8010df2 <__s2b+0x66>
 8010e04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e08:	4601      	mov	r1, r0
 8010e0a:	220a      	movs	r2, #10
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	3b30      	subs	r3, #48	@ 0x30
 8010e10:	f7ff ff76 	bl	8010d00 <__multadd>
 8010e14:	e7ee      	b.n	8010df4 <__s2b+0x68>
 8010e16:	bf00      	nop
 8010e18:	0801473b 	.word	0x0801473b
 8010e1c:	0801474c 	.word	0x0801474c

08010e20 <__hi0bits>:
 8010e20:	4603      	mov	r3, r0
 8010e22:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010e26:	bf3a      	itte	cc
 8010e28:	0403      	lslcc	r3, r0, #16
 8010e2a:	2010      	movcc	r0, #16
 8010e2c:	2000      	movcs	r0, #0
 8010e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010e32:	bf3c      	itt	cc
 8010e34:	021b      	lslcc	r3, r3, #8
 8010e36:	3008      	addcc	r0, #8
 8010e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e3c:	bf3c      	itt	cc
 8010e3e:	011b      	lslcc	r3, r3, #4
 8010e40:	3004      	addcc	r0, #4
 8010e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e46:	bf3c      	itt	cc
 8010e48:	009b      	lslcc	r3, r3, #2
 8010e4a:	3002      	addcc	r0, #2
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	db05      	blt.n	8010e5c <__hi0bits+0x3c>
 8010e50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010e54:	f100 0001 	add.w	r0, r0, #1
 8010e58:	bf08      	it	eq
 8010e5a:	2020      	moveq	r0, #32
 8010e5c:	4770      	bx	lr

08010e5e <__lo0bits>:
 8010e5e:	6803      	ldr	r3, [r0, #0]
 8010e60:	4602      	mov	r2, r0
 8010e62:	f013 0007 	ands.w	r0, r3, #7
 8010e66:	d00b      	beq.n	8010e80 <__lo0bits+0x22>
 8010e68:	07d9      	lsls	r1, r3, #31
 8010e6a:	d421      	bmi.n	8010eb0 <__lo0bits+0x52>
 8010e6c:	0798      	lsls	r0, r3, #30
 8010e6e:	bf49      	itett	mi
 8010e70:	085b      	lsrmi	r3, r3, #1
 8010e72:	089b      	lsrpl	r3, r3, #2
 8010e74:	2001      	movmi	r0, #1
 8010e76:	6013      	strmi	r3, [r2, #0]
 8010e78:	bf5c      	itt	pl
 8010e7a:	2002      	movpl	r0, #2
 8010e7c:	6013      	strpl	r3, [r2, #0]
 8010e7e:	4770      	bx	lr
 8010e80:	b299      	uxth	r1, r3
 8010e82:	b909      	cbnz	r1, 8010e88 <__lo0bits+0x2a>
 8010e84:	2010      	movs	r0, #16
 8010e86:	0c1b      	lsrs	r3, r3, #16
 8010e88:	b2d9      	uxtb	r1, r3
 8010e8a:	b909      	cbnz	r1, 8010e90 <__lo0bits+0x32>
 8010e8c:	3008      	adds	r0, #8
 8010e8e:	0a1b      	lsrs	r3, r3, #8
 8010e90:	0719      	lsls	r1, r3, #28
 8010e92:	bf04      	itt	eq
 8010e94:	091b      	lsreq	r3, r3, #4
 8010e96:	3004      	addeq	r0, #4
 8010e98:	0799      	lsls	r1, r3, #30
 8010e9a:	bf04      	itt	eq
 8010e9c:	089b      	lsreq	r3, r3, #2
 8010e9e:	3002      	addeq	r0, #2
 8010ea0:	07d9      	lsls	r1, r3, #31
 8010ea2:	d403      	bmi.n	8010eac <__lo0bits+0x4e>
 8010ea4:	085b      	lsrs	r3, r3, #1
 8010ea6:	f100 0001 	add.w	r0, r0, #1
 8010eaa:	d003      	beq.n	8010eb4 <__lo0bits+0x56>
 8010eac:	6013      	str	r3, [r2, #0]
 8010eae:	4770      	bx	lr
 8010eb0:	2000      	movs	r0, #0
 8010eb2:	4770      	bx	lr
 8010eb4:	2020      	movs	r0, #32
 8010eb6:	4770      	bx	lr

08010eb8 <__i2b>:
 8010eb8:	b510      	push	{r4, lr}
 8010eba:	460c      	mov	r4, r1
 8010ebc:	2101      	movs	r1, #1
 8010ebe:	f7ff febd 	bl	8010c3c <_Balloc>
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	b928      	cbnz	r0, 8010ed2 <__i2b+0x1a>
 8010ec6:	f240 1145 	movw	r1, #325	@ 0x145
 8010eca:	4b04      	ldr	r3, [pc, #16]	@ (8010edc <__i2b+0x24>)
 8010ecc:	4804      	ldr	r0, [pc, #16]	@ (8010ee0 <__i2b+0x28>)
 8010ece:	f001 fded 	bl	8012aac <__assert_func>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	6144      	str	r4, [r0, #20]
 8010ed6:	6103      	str	r3, [r0, #16]
 8010ed8:	bd10      	pop	{r4, pc}
 8010eda:	bf00      	nop
 8010edc:	0801473b 	.word	0x0801473b
 8010ee0:	0801474c 	.word	0x0801474c

08010ee4 <__multiply>:
 8010ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee8:	4614      	mov	r4, r2
 8010eea:	690a      	ldr	r2, [r1, #16]
 8010eec:	6923      	ldr	r3, [r4, #16]
 8010eee:	460f      	mov	r7, r1
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	bfa2      	ittt	ge
 8010ef4:	4623      	movge	r3, r4
 8010ef6:	460c      	movge	r4, r1
 8010ef8:	461f      	movge	r7, r3
 8010efa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010efe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010f02:	68a3      	ldr	r3, [r4, #8]
 8010f04:	6861      	ldr	r1, [r4, #4]
 8010f06:	eb0a 0609 	add.w	r6, sl, r9
 8010f0a:	42b3      	cmp	r3, r6
 8010f0c:	b085      	sub	sp, #20
 8010f0e:	bfb8      	it	lt
 8010f10:	3101      	addlt	r1, #1
 8010f12:	f7ff fe93 	bl	8010c3c <_Balloc>
 8010f16:	b930      	cbnz	r0, 8010f26 <__multiply+0x42>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010f1e:	4b43      	ldr	r3, [pc, #268]	@ (801102c <__multiply+0x148>)
 8010f20:	4843      	ldr	r0, [pc, #268]	@ (8011030 <__multiply+0x14c>)
 8010f22:	f001 fdc3 	bl	8012aac <__assert_func>
 8010f26:	f100 0514 	add.w	r5, r0, #20
 8010f2a:	462b      	mov	r3, r5
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010f32:	4543      	cmp	r3, r8
 8010f34:	d321      	bcc.n	8010f7a <__multiply+0x96>
 8010f36:	f107 0114 	add.w	r1, r7, #20
 8010f3a:	f104 0214 	add.w	r2, r4, #20
 8010f3e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010f42:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010f46:	9302      	str	r3, [sp, #8]
 8010f48:	1b13      	subs	r3, r2, r4
 8010f4a:	3b15      	subs	r3, #21
 8010f4c:	f023 0303 	bic.w	r3, r3, #3
 8010f50:	3304      	adds	r3, #4
 8010f52:	f104 0715 	add.w	r7, r4, #21
 8010f56:	42ba      	cmp	r2, r7
 8010f58:	bf38      	it	cc
 8010f5a:	2304      	movcc	r3, #4
 8010f5c:	9301      	str	r3, [sp, #4]
 8010f5e:	9b02      	ldr	r3, [sp, #8]
 8010f60:	9103      	str	r1, [sp, #12]
 8010f62:	428b      	cmp	r3, r1
 8010f64:	d80c      	bhi.n	8010f80 <__multiply+0x9c>
 8010f66:	2e00      	cmp	r6, #0
 8010f68:	dd03      	ble.n	8010f72 <__multiply+0x8e>
 8010f6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d05a      	beq.n	8011028 <__multiply+0x144>
 8010f72:	6106      	str	r6, [r0, #16]
 8010f74:	b005      	add	sp, #20
 8010f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7a:	f843 2b04 	str.w	r2, [r3], #4
 8010f7e:	e7d8      	b.n	8010f32 <__multiply+0x4e>
 8010f80:	f8b1 a000 	ldrh.w	sl, [r1]
 8010f84:	f1ba 0f00 	cmp.w	sl, #0
 8010f88:	d023      	beq.n	8010fd2 <__multiply+0xee>
 8010f8a:	46a9      	mov	r9, r5
 8010f8c:	f04f 0c00 	mov.w	ip, #0
 8010f90:	f104 0e14 	add.w	lr, r4, #20
 8010f94:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f98:	f8d9 3000 	ldr.w	r3, [r9]
 8010f9c:	fa1f fb87 	uxth.w	fp, r7
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	fb0a 330b 	mla	r3, sl, fp, r3
 8010fa6:	4463      	add	r3, ip
 8010fa8:	f8d9 c000 	ldr.w	ip, [r9]
 8010fac:	0c3f      	lsrs	r7, r7, #16
 8010fae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010fb2:	fb0a c707 	mla	r7, sl, r7, ip
 8010fb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010fc0:	4572      	cmp	r2, lr
 8010fc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010fc6:	f849 3b04 	str.w	r3, [r9], #4
 8010fca:	d8e3      	bhi.n	8010f94 <__multiply+0xb0>
 8010fcc:	9b01      	ldr	r3, [sp, #4]
 8010fce:	f845 c003 	str.w	ip, [r5, r3]
 8010fd2:	9b03      	ldr	r3, [sp, #12]
 8010fd4:	3104      	adds	r1, #4
 8010fd6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010fda:	f1b9 0f00 	cmp.w	r9, #0
 8010fde:	d021      	beq.n	8011024 <__multiply+0x140>
 8010fe0:	46ae      	mov	lr, r5
 8010fe2:	f04f 0a00 	mov.w	sl, #0
 8010fe6:	682b      	ldr	r3, [r5, #0]
 8010fe8:	f104 0c14 	add.w	ip, r4, #20
 8010fec:	f8bc b000 	ldrh.w	fp, [ip]
 8010ff0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	fb09 770b 	mla	r7, r9, fp, r7
 8010ffa:	4457      	add	r7, sl
 8010ffc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011000:	f84e 3b04 	str.w	r3, [lr], #4
 8011004:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011008:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801100c:	f8be 3000 	ldrh.w	r3, [lr]
 8011010:	4562      	cmp	r2, ip
 8011012:	fb09 330a 	mla	r3, r9, sl, r3
 8011016:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801101a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801101e:	d8e5      	bhi.n	8010fec <__multiply+0x108>
 8011020:	9f01      	ldr	r7, [sp, #4]
 8011022:	51eb      	str	r3, [r5, r7]
 8011024:	3504      	adds	r5, #4
 8011026:	e79a      	b.n	8010f5e <__multiply+0x7a>
 8011028:	3e01      	subs	r6, #1
 801102a:	e79c      	b.n	8010f66 <__multiply+0x82>
 801102c:	0801473b 	.word	0x0801473b
 8011030:	0801474c 	.word	0x0801474c

08011034 <__pow5mult>:
 8011034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011038:	4615      	mov	r5, r2
 801103a:	f012 0203 	ands.w	r2, r2, #3
 801103e:	4607      	mov	r7, r0
 8011040:	460e      	mov	r6, r1
 8011042:	d007      	beq.n	8011054 <__pow5mult+0x20>
 8011044:	4c25      	ldr	r4, [pc, #148]	@ (80110dc <__pow5mult+0xa8>)
 8011046:	3a01      	subs	r2, #1
 8011048:	2300      	movs	r3, #0
 801104a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801104e:	f7ff fe57 	bl	8010d00 <__multadd>
 8011052:	4606      	mov	r6, r0
 8011054:	10ad      	asrs	r5, r5, #2
 8011056:	d03d      	beq.n	80110d4 <__pow5mult+0xa0>
 8011058:	69fc      	ldr	r4, [r7, #28]
 801105a:	b97c      	cbnz	r4, 801107c <__pow5mult+0x48>
 801105c:	2010      	movs	r0, #16
 801105e:	f7ff fd37 	bl	8010ad0 <malloc>
 8011062:	4602      	mov	r2, r0
 8011064:	61f8      	str	r0, [r7, #28]
 8011066:	b928      	cbnz	r0, 8011074 <__pow5mult+0x40>
 8011068:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801106c:	4b1c      	ldr	r3, [pc, #112]	@ (80110e0 <__pow5mult+0xac>)
 801106e:	481d      	ldr	r0, [pc, #116]	@ (80110e4 <__pow5mult+0xb0>)
 8011070:	f001 fd1c 	bl	8012aac <__assert_func>
 8011074:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011078:	6004      	str	r4, [r0, #0]
 801107a:	60c4      	str	r4, [r0, #12]
 801107c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011080:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011084:	b94c      	cbnz	r4, 801109a <__pow5mult+0x66>
 8011086:	f240 2171 	movw	r1, #625	@ 0x271
 801108a:	4638      	mov	r0, r7
 801108c:	f7ff ff14 	bl	8010eb8 <__i2b>
 8011090:	2300      	movs	r3, #0
 8011092:	4604      	mov	r4, r0
 8011094:	f8c8 0008 	str.w	r0, [r8, #8]
 8011098:	6003      	str	r3, [r0, #0]
 801109a:	f04f 0900 	mov.w	r9, #0
 801109e:	07eb      	lsls	r3, r5, #31
 80110a0:	d50a      	bpl.n	80110b8 <__pow5mult+0x84>
 80110a2:	4631      	mov	r1, r6
 80110a4:	4622      	mov	r2, r4
 80110a6:	4638      	mov	r0, r7
 80110a8:	f7ff ff1c 	bl	8010ee4 <__multiply>
 80110ac:	4680      	mov	r8, r0
 80110ae:	4631      	mov	r1, r6
 80110b0:	4638      	mov	r0, r7
 80110b2:	f7ff fe03 	bl	8010cbc <_Bfree>
 80110b6:	4646      	mov	r6, r8
 80110b8:	106d      	asrs	r5, r5, #1
 80110ba:	d00b      	beq.n	80110d4 <__pow5mult+0xa0>
 80110bc:	6820      	ldr	r0, [r4, #0]
 80110be:	b938      	cbnz	r0, 80110d0 <__pow5mult+0x9c>
 80110c0:	4622      	mov	r2, r4
 80110c2:	4621      	mov	r1, r4
 80110c4:	4638      	mov	r0, r7
 80110c6:	f7ff ff0d 	bl	8010ee4 <__multiply>
 80110ca:	6020      	str	r0, [r4, #0]
 80110cc:	f8c0 9000 	str.w	r9, [r0]
 80110d0:	4604      	mov	r4, r0
 80110d2:	e7e4      	b.n	801109e <__pow5mult+0x6a>
 80110d4:	4630      	mov	r0, r6
 80110d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110da:	bf00      	nop
 80110dc:	080147a8 	.word	0x080147a8
 80110e0:	080146cc 	.word	0x080146cc
 80110e4:	0801474c 	.word	0x0801474c

080110e8 <__lshift>:
 80110e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110ec:	460c      	mov	r4, r1
 80110ee:	4607      	mov	r7, r0
 80110f0:	4691      	mov	r9, r2
 80110f2:	6923      	ldr	r3, [r4, #16]
 80110f4:	6849      	ldr	r1, [r1, #4]
 80110f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80110fa:	68a3      	ldr	r3, [r4, #8]
 80110fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011100:	f108 0601 	add.w	r6, r8, #1
 8011104:	42b3      	cmp	r3, r6
 8011106:	db0b      	blt.n	8011120 <__lshift+0x38>
 8011108:	4638      	mov	r0, r7
 801110a:	f7ff fd97 	bl	8010c3c <_Balloc>
 801110e:	4605      	mov	r5, r0
 8011110:	b948      	cbnz	r0, 8011126 <__lshift+0x3e>
 8011112:	4602      	mov	r2, r0
 8011114:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011118:	4b27      	ldr	r3, [pc, #156]	@ (80111b8 <__lshift+0xd0>)
 801111a:	4828      	ldr	r0, [pc, #160]	@ (80111bc <__lshift+0xd4>)
 801111c:	f001 fcc6 	bl	8012aac <__assert_func>
 8011120:	3101      	adds	r1, #1
 8011122:	005b      	lsls	r3, r3, #1
 8011124:	e7ee      	b.n	8011104 <__lshift+0x1c>
 8011126:	2300      	movs	r3, #0
 8011128:	f100 0114 	add.w	r1, r0, #20
 801112c:	f100 0210 	add.w	r2, r0, #16
 8011130:	4618      	mov	r0, r3
 8011132:	4553      	cmp	r3, sl
 8011134:	db33      	blt.n	801119e <__lshift+0xb6>
 8011136:	6920      	ldr	r0, [r4, #16]
 8011138:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801113c:	f104 0314 	add.w	r3, r4, #20
 8011140:	f019 091f 	ands.w	r9, r9, #31
 8011144:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011148:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801114c:	d02b      	beq.n	80111a6 <__lshift+0xbe>
 801114e:	468a      	mov	sl, r1
 8011150:	2200      	movs	r2, #0
 8011152:	f1c9 0e20 	rsb	lr, r9, #32
 8011156:	6818      	ldr	r0, [r3, #0]
 8011158:	fa00 f009 	lsl.w	r0, r0, r9
 801115c:	4310      	orrs	r0, r2
 801115e:	f84a 0b04 	str.w	r0, [sl], #4
 8011162:	f853 2b04 	ldr.w	r2, [r3], #4
 8011166:	459c      	cmp	ip, r3
 8011168:	fa22 f20e 	lsr.w	r2, r2, lr
 801116c:	d8f3      	bhi.n	8011156 <__lshift+0x6e>
 801116e:	ebac 0304 	sub.w	r3, ip, r4
 8011172:	3b15      	subs	r3, #21
 8011174:	f023 0303 	bic.w	r3, r3, #3
 8011178:	3304      	adds	r3, #4
 801117a:	f104 0015 	add.w	r0, r4, #21
 801117e:	4584      	cmp	ip, r0
 8011180:	bf38      	it	cc
 8011182:	2304      	movcc	r3, #4
 8011184:	50ca      	str	r2, [r1, r3]
 8011186:	b10a      	cbz	r2, 801118c <__lshift+0xa4>
 8011188:	f108 0602 	add.w	r6, r8, #2
 801118c:	3e01      	subs	r6, #1
 801118e:	4638      	mov	r0, r7
 8011190:	4621      	mov	r1, r4
 8011192:	612e      	str	r6, [r5, #16]
 8011194:	f7ff fd92 	bl	8010cbc <_Bfree>
 8011198:	4628      	mov	r0, r5
 801119a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801119e:	f842 0f04 	str.w	r0, [r2, #4]!
 80111a2:	3301      	adds	r3, #1
 80111a4:	e7c5      	b.n	8011132 <__lshift+0x4a>
 80111a6:	3904      	subs	r1, #4
 80111a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ac:	459c      	cmp	ip, r3
 80111ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80111b2:	d8f9      	bhi.n	80111a8 <__lshift+0xc0>
 80111b4:	e7ea      	b.n	801118c <__lshift+0xa4>
 80111b6:	bf00      	nop
 80111b8:	0801473b 	.word	0x0801473b
 80111bc:	0801474c 	.word	0x0801474c

080111c0 <__mcmp>:
 80111c0:	4603      	mov	r3, r0
 80111c2:	690a      	ldr	r2, [r1, #16]
 80111c4:	6900      	ldr	r0, [r0, #16]
 80111c6:	b530      	push	{r4, r5, lr}
 80111c8:	1a80      	subs	r0, r0, r2
 80111ca:	d10e      	bne.n	80111ea <__mcmp+0x2a>
 80111cc:	3314      	adds	r3, #20
 80111ce:	3114      	adds	r1, #20
 80111d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80111d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80111d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80111dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80111e0:	4295      	cmp	r5, r2
 80111e2:	d003      	beq.n	80111ec <__mcmp+0x2c>
 80111e4:	d205      	bcs.n	80111f2 <__mcmp+0x32>
 80111e6:	f04f 30ff 	mov.w	r0, #4294967295
 80111ea:	bd30      	pop	{r4, r5, pc}
 80111ec:	42a3      	cmp	r3, r4
 80111ee:	d3f3      	bcc.n	80111d8 <__mcmp+0x18>
 80111f0:	e7fb      	b.n	80111ea <__mcmp+0x2a>
 80111f2:	2001      	movs	r0, #1
 80111f4:	e7f9      	b.n	80111ea <__mcmp+0x2a>
	...

080111f8 <__mdiff>:
 80111f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111fc:	4689      	mov	r9, r1
 80111fe:	4606      	mov	r6, r0
 8011200:	4611      	mov	r1, r2
 8011202:	4648      	mov	r0, r9
 8011204:	4614      	mov	r4, r2
 8011206:	f7ff ffdb 	bl	80111c0 <__mcmp>
 801120a:	1e05      	subs	r5, r0, #0
 801120c:	d112      	bne.n	8011234 <__mdiff+0x3c>
 801120e:	4629      	mov	r1, r5
 8011210:	4630      	mov	r0, r6
 8011212:	f7ff fd13 	bl	8010c3c <_Balloc>
 8011216:	4602      	mov	r2, r0
 8011218:	b928      	cbnz	r0, 8011226 <__mdiff+0x2e>
 801121a:	f240 2137 	movw	r1, #567	@ 0x237
 801121e:	4b3e      	ldr	r3, [pc, #248]	@ (8011318 <__mdiff+0x120>)
 8011220:	483e      	ldr	r0, [pc, #248]	@ (801131c <__mdiff+0x124>)
 8011222:	f001 fc43 	bl	8012aac <__assert_func>
 8011226:	2301      	movs	r3, #1
 8011228:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801122c:	4610      	mov	r0, r2
 801122e:	b003      	add	sp, #12
 8011230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011234:	bfbc      	itt	lt
 8011236:	464b      	movlt	r3, r9
 8011238:	46a1      	movlt	r9, r4
 801123a:	4630      	mov	r0, r6
 801123c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011240:	bfba      	itte	lt
 8011242:	461c      	movlt	r4, r3
 8011244:	2501      	movlt	r5, #1
 8011246:	2500      	movge	r5, #0
 8011248:	f7ff fcf8 	bl	8010c3c <_Balloc>
 801124c:	4602      	mov	r2, r0
 801124e:	b918      	cbnz	r0, 8011258 <__mdiff+0x60>
 8011250:	f240 2145 	movw	r1, #581	@ 0x245
 8011254:	4b30      	ldr	r3, [pc, #192]	@ (8011318 <__mdiff+0x120>)
 8011256:	e7e3      	b.n	8011220 <__mdiff+0x28>
 8011258:	f100 0b14 	add.w	fp, r0, #20
 801125c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011260:	f109 0310 	add.w	r3, r9, #16
 8011264:	60c5      	str	r5, [r0, #12]
 8011266:	f04f 0c00 	mov.w	ip, #0
 801126a:	f109 0514 	add.w	r5, r9, #20
 801126e:	46d9      	mov	r9, fp
 8011270:	6926      	ldr	r6, [r4, #16]
 8011272:	f104 0e14 	add.w	lr, r4, #20
 8011276:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801127a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801127e:	9301      	str	r3, [sp, #4]
 8011280:	9b01      	ldr	r3, [sp, #4]
 8011282:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011286:	f853 af04 	ldr.w	sl, [r3, #4]!
 801128a:	b281      	uxth	r1, r0
 801128c:	9301      	str	r3, [sp, #4]
 801128e:	fa1f f38a 	uxth.w	r3, sl
 8011292:	1a5b      	subs	r3, r3, r1
 8011294:	0c00      	lsrs	r0, r0, #16
 8011296:	4463      	add	r3, ip
 8011298:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801129c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80112a6:	4576      	cmp	r6, lr
 80112a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80112ac:	f849 3b04 	str.w	r3, [r9], #4
 80112b0:	d8e6      	bhi.n	8011280 <__mdiff+0x88>
 80112b2:	1b33      	subs	r3, r6, r4
 80112b4:	3b15      	subs	r3, #21
 80112b6:	f023 0303 	bic.w	r3, r3, #3
 80112ba:	3415      	adds	r4, #21
 80112bc:	3304      	adds	r3, #4
 80112be:	42a6      	cmp	r6, r4
 80112c0:	bf38      	it	cc
 80112c2:	2304      	movcc	r3, #4
 80112c4:	441d      	add	r5, r3
 80112c6:	445b      	add	r3, fp
 80112c8:	461e      	mov	r6, r3
 80112ca:	462c      	mov	r4, r5
 80112cc:	4544      	cmp	r4, r8
 80112ce:	d30e      	bcc.n	80112ee <__mdiff+0xf6>
 80112d0:	f108 0103 	add.w	r1, r8, #3
 80112d4:	1b49      	subs	r1, r1, r5
 80112d6:	f021 0103 	bic.w	r1, r1, #3
 80112da:	3d03      	subs	r5, #3
 80112dc:	45a8      	cmp	r8, r5
 80112de:	bf38      	it	cc
 80112e0:	2100      	movcc	r1, #0
 80112e2:	440b      	add	r3, r1
 80112e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80112e8:	b199      	cbz	r1, 8011312 <__mdiff+0x11a>
 80112ea:	6117      	str	r7, [r2, #16]
 80112ec:	e79e      	b.n	801122c <__mdiff+0x34>
 80112ee:	46e6      	mov	lr, ip
 80112f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80112f4:	fa1f fc81 	uxth.w	ip, r1
 80112f8:	44f4      	add	ip, lr
 80112fa:	0c08      	lsrs	r0, r1, #16
 80112fc:	4471      	add	r1, lr
 80112fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011302:	b289      	uxth	r1, r1
 8011304:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011308:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801130c:	f846 1b04 	str.w	r1, [r6], #4
 8011310:	e7dc      	b.n	80112cc <__mdiff+0xd4>
 8011312:	3f01      	subs	r7, #1
 8011314:	e7e6      	b.n	80112e4 <__mdiff+0xec>
 8011316:	bf00      	nop
 8011318:	0801473b 	.word	0x0801473b
 801131c:	0801474c 	.word	0x0801474c

08011320 <__ulp>:
 8011320:	4b0e      	ldr	r3, [pc, #56]	@ (801135c <__ulp+0x3c>)
 8011322:	400b      	ands	r3, r1
 8011324:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011328:	2b00      	cmp	r3, #0
 801132a:	dc08      	bgt.n	801133e <__ulp+0x1e>
 801132c:	425b      	negs	r3, r3
 801132e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011332:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011336:	da04      	bge.n	8011342 <__ulp+0x22>
 8011338:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801133c:	4113      	asrs	r3, r2
 801133e:	2200      	movs	r2, #0
 8011340:	e008      	b.n	8011354 <__ulp+0x34>
 8011342:	f1a2 0314 	sub.w	r3, r2, #20
 8011346:	2b1e      	cmp	r3, #30
 8011348:	bfd6      	itet	le
 801134a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801134e:	2201      	movgt	r2, #1
 8011350:	40da      	lsrle	r2, r3
 8011352:	2300      	movs	r3, #0
 8011354:	4619      	mov	r1, r3
 8011356:	4610      	mov	r0, r2
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	7ff00000 	.word	0x7ff00000

08011360 <__b2d>:
 8011360:	6902      	ldr	r2, [r0, #16]
 8011362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011364:	f100 0614 	add.w	r6, r0, #20
 8011368:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 801136c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8011370:	4f1e      	ldr	r7, [pc, #120]	@ (80113ec <__b2d+0x8c>)
 8011372:	4620      	mov	r0, r4
 8011374:	f7ff fd54 	bl	8010e20 <__hi0bits>
 8011378:	4603      	mov	r3, r0
 801137a:	f1c0 0020 	rsb	r0, r0, #32
 801137e:	2b0a      	cmp	r3, #10
 8011380:	f1a2 0504 	sub.w	r5, r2, #4
 8011384:	6008      	str	r0, [r1, #0]
 8011386:	dc12      	bgt.n	80113ae <__b2d+0x4e>
 8011388:	42ae      	cmp	r6, r5
 801138a:	bf2c      	ite	cs
 801138c:	2200      	movcs	r2, #0
 801138e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8011392:	f1c3 0c0b 	rsb	ip, r3, #11
 8011396:	3315      	adds	r3, #21
 8011398:	fa24 fe0c 	lsr.w	lr, r4, ip
 801139c:	fa04 f303 	lsl.w	r3, r4, r3
 80113a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80113a4:	ea4e 0107 	orr.w	r1, lr, r7
 80113a8:	431a      	orrs	r2, r3
 80113aa:	4610      	mov	r0, r2
 80113ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ae:	42ae      	cmp	r6, r5
 80113b0:	bf36      	itet	cc
 80113b2:	f1a2 0508 	subcc.w	r5, r2, #8
 80113b6:	2200      	movcs	r2, #0
 80113b8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80113bc:	3b0b      	subs	r3, #11
 80113be:	d012      	beq.n	80113e6 <__b2d+0x86>
 80113c0:	f1c3 0720 	rsb	r7, r3, #32
 80113c4:	fa22 f107 	lsr.w	r1, r2, r7
 80113c8:	409c      	lsls	r4, r3
 80113ca:	430c      	orrs	r4, r1
 80113cc:	42b5      	cmp	r5, r6
 80113ce:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80113d2:	bf94      	ite	ls
 80113d4:	2400      	movls	r4, #0
 80113d6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80113da:	409a      	lsls	r2, r3
 80113dc:	40fc      	lsrs	r4, r7
 80113de:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80113e2:	4322      	orrs	r2, r4
 80113e4:	e7e1      	b.n	80113aa <__b2d+0x4a>
 80113e6:	ea44 0107 	orr.w	r1, r4, r7
 80113ea:	e7de      	b.n	80113aa <__b2d+0x4a>
 80113ec:	3ff00000 	.word	0x3ff00000

080113f0 <__d2b>:
 80113f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80113f4:	2101      	movs	r1, #1
 80113f6:	4690      	mov	r8, r2
 80113f8:	4699      	mov	r9, r3
 80113fa:	9e08      	ldr	r6, [sp, #32]
 80113fc:	f7ff fc1e 	bl	8010c3c <_Balloc>
 8011400:	4604      	mov	r4, r0
 8011402:	b930      	cbnz	r0, 8011412 <__d2b+0x22>
 8011404:	4602      	mov	r2, r0
 8011406:	f240 310f 	movw	r1, #783	@ 0x30f
 801140a:	4b23      	ldr	r3, [pc, #140]	@ (8011498 <__d2b+0xa8>)
 801140c:	4823      	ldr	r0, [pc, #140]	@ (801149c <__d2b+0xac>)
 801140e:	f001 fb4d 	bl	8012aac <__assert_func>
 8011412:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011416:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801141a:	b10d      	cbz	r5, 8011420 <__d2b+0x30>
 801141c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011420:	9301      	str	r3, [sp, #4]
 8011422:	f1b8 0300 	subs.w	r3, r8, #0
 8011426:	d024      	beq.n	8011472 <__d2b+0x82>
 8011428:	4668      	mov	r0, sp
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	f7ff fd17 	bl	8010e5e <__lo0bits>
 8011430:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011434:	b1d8      	cbz	r0, 801146e <__d2b+0x7e>
 8011436:	f1c0 0320 	rsb	r3, r0, #32
 801143a:	fa02 f303 	lsl.w	r3, r2, r3
 801143e:	430b      	orrs	r3, r1
 8011440:	40c2      	lsrs	r2, r0
 8011442:	6163      	str	r3, [r4, #20]
 8011444:	9201      	str	r2, [sp, #4]
 8011446:	9b01      	ldr	r3, [sp, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	bf0c      	ite	eq
 801144c:	2201      	moveq	r2, #1
 801144e:	2202      	movne	r2, #2
 8011450:	61a3      	str	r3, [r4, #24]
 8011452:	6122      	str	r2, [r4, #16]
 8011454:	b1ad      	cbz	r5, 8011482 <__d2b+0x92>
 8011456:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801145a:	4405      	add	r5, r0
 801145c:	6035      	str	r5, [r6, #0]
 801145e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011464:	6018      	str	r0, [r3, #0]
 8011466:	4620      	mov	r0, r4
 8011468:	b002      	add	sp, #8
 801146a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801146e:	6161      	str	r1, [r4, #20]
 8011470:	e7e9      	b.n	8011446 <__d2b+0x56>
 8011472:	a801      	add	r0, sp, #4
 8011474:	f7ff fcf3 	bl	8010e5e <__lo0bits>
 8011478:	9b01      	ldr	r3, [sp, #4]
 801147a:	2201      	movs	r2, #1
 801147c:	6163      	str	r3, [r4, #20]
 801147e:	3020      	adds	r0, #32
 8011480:	e7e7      	b.n	8011452 <__d2b+0x62>
 8011482:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011486:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801148a:	6030      	str	r0, [r6, #0]
 801148c:	6918      	ldr	r0, [r3, #16]
 801148e:	f7ff fcc7 	bl	8010e20 <__hi0bits>
 8011492:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011496:	e7e4      	b.n	8011462 <__d2b+0x72>
 8011498:	0801473b 	.word	0x0801473b
 801149c:	0801474c 	.word	0x0801474c

080114a0 <__ratio>:
 80114a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a4:	b085      	sub	sp, #20
 80114a6:	e9cd 1000 	strd	r1, r0, [sp]
 80114aa:	a902      	add	r1, sp, #8
 80114ac:	f7ff ff58 	bl	8011360 <__b2d>
 80114b0:	468b      	mov	fp, r1
 80114b2:	4606      	mov	r6, r0
 80114b4:	460f      	mov	r7, r1
 80114b6:	9800      	ldr	r0, [sp, #0]
 80114b8:	a903      	add	r1, sp, #12
 80114ba:	f7ff ff51 	bl	8011360 <__b2d>
 80114be:	460d      	mov	r5, r1
 80114c0:	9b01      	ldr	r3, [sp, #4]
 80114c2:	4689      	mov	r9, r1
 80114c4:	6919      	ldr	r1, [r3, #16]
 80114c6:	9b00      	ldr	r3, [sp, #0]
 80114c8:	4604      	mov	r4, r0
 80114ca:	691b      	ldr	r3, [r3, #16]
 80114cc:	4630      	mov	r0, r6
 80114ce:	1ac9      	subs	r1, r1, r3
 80114d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80114d4:	1a9b      	subs	r3, r3, r2
 80114d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80114da:	2b00      	cmp	r3, #0
 80114dc:	bfcd      	iteet	gt
 80114de:	463a      	movgt	r2, r7
 80114e0:	462a      	movle	r2, r5
 80114e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80114e6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80114ea:	bfd8      	it	le
 80114ec:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80114f0:	464b      	mov	r3, r9
 80114f2:	4622      	mov	r2, r4
 80114f4:	4659      	mov	r1, fp
 80114f6:	f7ef f931 	bl	800075c <__aeabi_ddiv>
 80114fa:	b005      	add	sp, #20
 80114fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011500 <__copybits>:
 8011500:	3901      	subs	r1, #1
 8011502:	b570      	push	{r4, r5, r6, lr}
 8011504:	1149      	asrs	r1, r1, #5
 8011506:	6914      	ldr	r4, [r2, #16]
 8011508:	3101      	adds	r1, #1
 801150a:	f102 0314 	add.w	r3, r2, #20
 801150e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011512:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011516:	1f05      	subs	r5, r0, #4
 8011518:	42a3      	cmp	r3, r4
 801151a:	d30c      	bcc.n	8011536 <__copybits+0x36>
 801151c:	1aa3      	subs	r3, r4, r2
 801151e:	3b11      	subs	r3, #17
 8011520:	f023 0303 	bic.w	r3, r3, #3
 8011524:	3211      	adds	r2, #17
 8011526:	42a2      	cmp	r2, r4
 8011528:	bf88      	it	hi
 801152a:	2300      	movhi	r3, #0
 801152c:	4418      	add	r0, r3
 801152e:	2300      	movs	r3, #0
 8011530:	4288      	cmp	r0, r1
 8011532:	d305      	bcc.n	8011540 <__copybits+0x40>
 8011534:	bd70      	pop	{r4, r5, r6, pc}
 8011536:	f853 6b04 	ldr.w	r6, [r3], #4
 801153a:	f845 6f04 	str.w	r6, [r5, #4]!
 801153e:	e7eb      	b.n	8011518 <__copybits+0x18>
 8011540:	f840 3b04 	str.w	r3, [r0], #4
 8011544:	e7f4      	b.n	8011530 <__copybits+0x30>

08011546 <__any_on>:
 8011546:	f100 0214 	add.w	r2, r0, #20
 801154a:	6900      	ldr	r0, [r0, #16]
 801154c:	114b      	asrs	r3, r1, #5
 801154e:	4298      	cmp	r0, r3
 8011550:	b510      	push	{r4, lr}
 8011552:	db11      	blt.n	8011578 <__any_on+0x32>
 8011554:	dd0a      	ble.n	801156c <__any_on+0x26>
 8011556:	f011 011f 	ands.w	r1, r1, #31
 801155a:	d007      	beq.n	801156c <__any_on+0x26>
 801155c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011560:	fa24 f001 	lsr.w	r0, r4, r1
 8011564:	fa00 f101 	lsl.w	r1, r0, r1
 8011568:	428c      	cmp	r4, r1
 801156a:	d10b      	bne.n	8011584 <__any_on+0x3e>
 801156c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011570:	4293      	cmp	r3, r2
 8011572:	d803      	bhi.n	801157c <__any_on+0x36>
 8011574:	2000      	movs	r0, #0
 8011576:	bd10      	pop	{r4, pc}
 8011578:	4603      	mov	r3, r0
 801157a:	e7f7      	b.n	801156c <__any_on+0x26>
 801157c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011580:	2900      	cmp	r1, #0
 8011582:	d0f5      	beq.n	8011570 <__any_on+0x2a>
 8011584:	2001      	movs	r0, #1
 8011586:	e7f6      	b.n	8011576 <__any_on+0x30>

08011588 <sulp>:
 8011588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801158c:	460f      	mov	r7, r1
 801158e:	4690      	mov	r8, r2
 8011590:	f7ff fec6 	bl	8011320 <__ulp>
 8011594:	4604      	mov	r4, r0
 8011596:	460d      	mov	r5, r1
 8011598:	f1b8 0f00 	cmp.w	r8, #0
 801159c:	d011      	beq.n	80115c2 <sulp+0x3a>
 801159e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80115a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	dd0b      	ble.n	80115c2 <sulp+0x3a>
 80115aa:	2400      	movs	r4, #0
 80115ac:	051b      	lsls	r3, r3, #20
 80115ae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80115b2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80115b6:	4622      	mov	r2, r4
 80115b8:	462b      	mov	r3, r5
 80115ba:	f7ee ffa5 	bl	8000508 <__aeabi_dmul>
 80115be:	4604      	mov	r4, r0
 80115c0:	460d      	mov	r5, r1
 80115c2:	4620      	mov	r0, r4
 80115c4:	4629      	mov	r1, r5
 80115c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ca:	0000      	movs	r0, r0
 80115cc:	0000      	movs	r0, r0
	...

080115d0 <_strtod_l>:
 80115d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d4:	b09f      	sub	sp, #124	@ 0x7c
 80115d6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80115d8:	2200      	movs	r2, #0
 80115da:	460c      	mov	r4, r1
 80115dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80115de:	f04f 0a00 	mov.w	sl, #0
 80115e2:	f04f 0b00 	mov.w	fp, #0
 80115e6:	460a      	mov	r2, r1
 80115e8:	9005      	str	r0, [sp, #20]
 80115ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80115ec:	7811      	ldrb	r1, [r2, #0]
 80115ee:	292b      	cmp	r1, #43	@ 0x2b
 80115f0:	d048      	beq.n	8011684 <_strtod_l+0xb4>
 80115f2:	d836      	bhi.n	8011662 <_strtod_l+0x92>
 80115f4:	290d      	cmp	r1, #13
 80115f6:	d830      	bhi.n	801165a <_strtod_l+0x8a>
 80115f8:	2908      	cmp	r1, #8
 80115fa:	d830      	bhi.n	801165e <_strtod_l+0x8e>
 80115fc:	2900      	cmp	r1, #0
 80115fe:	d039      	beq.n	8011674 <_strtod_l+0xa4>
 8011600:	2200      	movs	r2, #0
 8011602:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011604:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011606:	782a      	ldrb	r2, [r5, #0]
 8011608:	2a30      	cmp	r2, #48	@ 0x30
 801160a:	f040 80b1 	bne.w	8011770 <_strtod_l+0x1a0>
 801160e:	786a      	ldrb	r2, [r5, #1]
 8011610:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011614:	2a58      	cmp	r2, #88	@ 0x58
 8011616:	d16c      	bne.n	80116f2 <_strtod_l+0x122>
 8011618:	9302      	str	r3, [sp, #8]
 801161a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801161c:	4a8e      	ldr	r2, [pc, #568]	@ (8011858 <_strtod_l+0x288>)
 801161e:	9301      	str	r3, [sp, #4]
 8011620:	ab1a      	add	r3, sp, #104	@ 0x68
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	9805      	ldr	r0, [sp, #20]
 8011626:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011628:	a919      	add	r1, sp, #100	@ 0x64
 801162a:	f001 fad9 	bl	8012be0 <__gethex>
 801162e:	f010 060f 	ands.w	r6, r0, #15
 8011632:	4604      	mov	r4, r0
 8011634:	d005      	beq.n	8011642 <_strtod_l+0x72>
 8011636:	2e06      	cmp	r6, #6
 8011638:	d126      	bne.n	8011688 <_strtod_l+0xb8>
 801163a:	2300      	movs	r3, #0
 801163c:	3501      	adds	r5, #1
 801163e:	9519      	str	r5, [sp, #100]	@ 0x64
 8011640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011644:	2b00      	cmp	r3, #0
 8011646:	f040 8584 	bne.w	8012152 <_strtod_l+0xb82>
 801164a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801164c:	b1bb      	cbz	r3, 801167e <_strtod_l+0xae>
 801164e:	4650      	mov	r0, sl
 8011650:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8011654:	b01f      	add	sp, #124	@ 0x7c
 8011656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165a:	2920      	cmp	r1, #32
 801165c:	d1d0      	bne.n	8011600 <_strtod_l+0x30>
 801165e:	3201      	adds	r2, #1
 8011660:	e7c3      	b.n	80115ea <_strtod_l+0x1a>
 8011662:	292d      	cmp	r1, #45	@ 0x2d
 8011664:	d1cc      	bne.n	8011600 <_strtod_l+0x30>
 8011666:	2101      	movs	r1, #1
 8011668:	910b      	str	r1, [sp, #44]	@ 0x2c
 801166a:	1c51      	adds	r1, r2, #1
 801166c:	9119      	str	r1, [sp, #100]	@ 0x64
 801166e:	7852      	ldrb	r2, [r2, #1]
 8011670:	2a00      	cmp	r2, #0
 8011672:	d1c7      	bne.n	8011604 <_strtod_l+0x34>
 8011674:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011676:	9419      	str	r4, [sp, #100]	@ 0x64
 8011678:	2b00      	cmp	r3, #0
 801167a:	f040 8568 	bne.w	801214e <_strtod_l+0xb7e>
 801167e:	4650      	mov	r0, sl
 8011680:	4659      	mov	r1, fp
 8011682:	e7e7      	b.n	8011654 <_strtod_l+0x84>
 8011684:	2100      	movs	r1, #0
 8011686:	e7ef      	b.n	8011668 <_strtod_l+0x98>
 8011688:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801168a:	b13a      	cbz	r2, 801169c <_strtod_l+0xcc>
 801168c:	2135      	movs	r1, #53	@ 0x35
 801168e:	a81c      	add	r0, sp, #112	@ 0x70
 8011690:	f7ff ff36 	bl	8011500 <__copybits>
 8011694:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011696:	9805      	ldr	r0, [sp, #20]
 8011698:	f7ff fb10 	bl	8010cbc <_Bfree>
 801169c:	3e01      	subs	r6, #1
 801169e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80116a0:	2e04      	cmp	r6, #4
 80116a2:	d806      	bhi.n	80116b2 <_strtod_l+0xe2>
 80116a4:	e8df f006 	tbb	[pc, r6]
 80116a8:	201d0314 	.word	0x201d0314
 80116ac:	14          	.byte	0x14
 80116ad:	00          	.byte	0x00
 80116ae:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80116b2:	05e1      	lsls	r1, r4, #23
 80116b4:	bf48      	it	mi
 80116b6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80116ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80116be:	0d1b      	lsrs	r3, r3, #20
 80116c0:	051b      	lsls	r3, r3, #20
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1bd      	bne.n	8011642 <_strtod_l+0x72>
 80116c6:	f7fe fb2b 	bl	800fd20 <__errno>
 80116ca:	2322      	movs	r3, #34	@ 0x22
 80116cc:	6003      	str	r3, [r0, #0]
 80116ce:	e7b8      	b.n	8011642 <_strtod_l+0x72>
 80116d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80116d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80116d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80116dc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80116e0:	e7e7      	b.n	80116b2 <_strtod_l+0xe2>
 80116e2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 801185c <_strtod_l+0x28c>
 80116e6:	e7e4      	b.n	80116b2 <_strtod_l+0xe2>
 80116e8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80116ec:	f04f 3aff 	mov.w	sl, #4294967295
 80116f0:	e7df      	b.n	80116b2 <_strtod_l+0xe2>
 80116f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80116f4:	1c5a      	adds	r2, r3, #1
 80116f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80116f8:	785b      	ldrb	r3, [r3, #1]
 80116fa:	2b30      	cmp	r3, #48	@ 0x30
 80116fc:	d0f9      	beq.n	80116f2 <_strtod_l+0x122>
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d09f      	beq.n	8011642 <_strtod_l+0x72>
 8011702:	2301      	movs	r3, #1
 8011704:	9309      	str	r3, [sp, #36]	@ 0x24
 8011706:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011708:	220a      	movs	r2, #10
 801170a:	930c      	str	r3, [sp, #48]	@ 0x30
 801170c:	2300      	movs	r3, #0
 801170e:	461f      	mov	r7, r3
 8011710:	9308      	str	r3, [sp, #32]
 8011712:	930a      	str	r3, [sp, #40]	@ 0x28
 8011714:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011716:	7805      	ldrb	r5, [r0, #0]
 8011718:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801171c:	b2d9      	uxtb	r1, r3
 801171e:	2909      	cmp	r1, #9
 8011720:	d928      	bls.n	8011774 <_strtod_l+0x1a4>
 8011722:	2201      	movs	r2, #1
 8011724:	494e      	ldr	r1, [pc, #312]	@ (8011860 <_strtod_l+0x290>)
 8011726:	f001 f968 	bl	80129fa <strncmp>
 801172a:	2800      	cmp	r0, #0
 801172c:	d032      	beq.n	8011794 <_strtod_l+0x1c4>
 801172e:	2000      	movs	r0, #0
 8011730:	462a      	mov	r2, r5
 8011732:	4681      	mov	r9, r0
 8011734:	463d      	mov	r5, r7
 8011736:	4603      	mov	r3, r0
 8011738:	2a65      	cmp	r2, #101	@ 0x65
 801173a:	d001      	beq.n	8011740 <_strtod_l+0x170>
 801173c:	2a45      	cmp	r2, #69	@ 0x45
 801173e:	d114      	bne.n	801176a <_strtod_l+0x19a>
 8011740:	b91d      	cbnz	r5, 801174a <_strtod_l+0x17a>
 8011742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011744:	4302      	orrs	r2, r0
 8011746:	d095      	beq.n	8011674 <_strtod_l+0xa4>
 8011748:	2500      	movs	r5, #0
 801174a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801174c:	1c62      	adds	r2, r4, #1
 801174e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011750:	7862      	ldrb	r2, [r4, #1]
 8011752:	2a2b      	cmp	r2, #43	@ 0x2b
 8011754:	d077      	beq.n	8011846 <_strtod_l+0x276>
 8011756:	2a2d      	cmp	r2, #45	@ 0x2d
 8011758:	d07b      	beq.n	8011852 <_strtod_l+0x282>
 801175a:	f04f 0c00 	mov.w	ip, #0
 801175e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011762:	2909      	cmp	r1, #9
 8011764:	f240 8082 	bls.w	801186c <_strtod_l+0x29c>
 8011768:	9419      	str	r4, [sp, #100]	@ 0x64
 801176a:	f04f 0800 	mov.w	r8, #0
 801176e:	e0a2      	b.n	80118b6 <_strtod_l+0x2e6>
 8011770:	2300      	movs	r3, #0
 8011772:	e7c7      	b.n	8011704 <_strtod_l+0x134>
 8011774:	2f08      	cmp	r7, #8
 8011776:	bfd5      	itete	le
 8011778:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801177a:	9908      	ldrgt	r1, [sp, #32]
 801177c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011780:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011784:	f100 0001 	add.w	r0, r0, #1
 8011788:	bfd4      	ite	le
 801178a:	930a      	strle	r3, [sp, #40]	@ 0x28
 801178c:	9308      	strgt	r3, [sp, #32]
 801178e:	3701      	adds	r7, #1
 8011790:	9019      	str	r0, [sp, #100]	@ 0x64
 8011792:	e7bf      	b.n	8011714 <_strtod_l+0x144>
 8011794:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011796:	1c5a      	adds	r2, r3, #1
 8011798:	9219      	str	r2, [sp, #100]	@ 0x64
 801179a:	785a      	ldrb	r2, [r3, #1]
 801179c:	b37f      	cbz	r7, 80117fe <_strtod_l+0x22e>
 801179e:	4681      	mov	r9, r0
 80117a0:	463d      	mov	r5, r7
 80117a2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80117a6:	2b09      	cmp	r3, #9
 80117a8:	d912      	bls.n	80117d0 <_strtod_l+0x200>
 80117aa:	2301      	movs	r3, #1
 80117ac:	e7c4      	b.n	8011738 <_strtod_l+0x168>
 80117ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117b0:	3001      	adds	r0, #1
 80117b2:	1c5a      	adds	r2, r3, #1
 80117b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80117b6:	785a      	ldrb	r2, [r3, #1]
 80117b8:	2a30      	cmp	r2, #48	@ 0x30
 80117ba:	d0f8      	beq.n	80117ae <_strtod_l+0x1de>
 80117bc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80117c0:	2b08      	cmp	r3, #8
 80117c2:	f200 84cb 	bhi.w	801215c <_strtod_l+0xb8c>
 80117c6:	4681      	mov	r9, r0
 80117c8:	2000      	movs	r0, #0
 80117ca:	4605      	mov	r5, r0
 80117cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80117d0:	3a30      	subs	r2, #48	@ 0x30
 80117d2:	f100 0301 	add.w	r3, r0, #1
 80117d6:	d02a      	beq.n	801182e <_strtod_l+0x25e>
 80117d8:	4499      	add	r9, r3
 80117da:	210a      	movs	r1, #10
 80117dc:	462b      	mov	r3, r5
 80117de:	eb00 0c05 	add.w	ip, r0, r5
 80117e2:	4563      	cmp	r3, ip
 80117e4:	d10d      	bne.n	8011802 <_strtod_l+0x232>
 80117e6:	1c69      	adds	r1, r5, #1
 80117e8:	4401      	add	r1, r0
 80117ea:	4428      	add	r0, r5
 80117ec:	2808      	cmp	r0, #8
 80117ee:	dc16      	bgt.n	801181e <_strtod_l+0x24e>
 80117f0:	230a      	movs	r3, #10
 80117f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80117f4:	fb03 2300 	mla	r3, r3, r0, r2
 80117f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80117fa:	2300      	movs	r3, #0
 80117fc:	e018      	b.n	8011830 <_strtod_l+0x260>
 80117fe:	4638      	mov	r0, r7
 8011800:	e7da      	b.n	80117b8 <_strtod_l+0x1e8>
 8011802:	2b08      	cmp	r3, #8
 8011804:	f103 0301 	add.w	r3, r3, #1
 8011808:	dc03      	bgt.n	8011812 <_strtod_l+0x242>
 801180a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801180c:	434e      	muls	r6, r1
 801180e:	960a      	str	r6, [sp, #40]	@ 0x28
 8011810:	e7e7      	b.n	80117e2 <_strtod_l+0x212>
 8011812:	2b10      	cmp	r3, #16
 8011814:	bfde      	ittt	le
 8011816:	9e08      	ldrle	r6, [sp, #32]
 8011818:	434e      	mulle	r6, r1
 801181a:	9608      	strle	r6, [sp, #32]
 801181c:	e7e1      	b.n	80117e2 <_strtod_l+0x212>
 801181e:	280f      	cmp	r0, #15
 8011820:	dceb      	bgt.n	80117fa <_strtod_l+0x22a>
 8011822:	230a      	movs	r3, #10
 8011824:	9808      	ldr	r0, [sp, #32]
 8011826:	fb03 2300 	mla	r3, r3, r0, r2
 801182a:	9308      	str	r3, [sp, #32]
 801182c:	e7e5      	b.n	80117fa <_strtod_l+0x22a>
 801182e:	4629      	mov	r1, r5
 8011830:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011832:	460d      	mov	r5, r1
 8011834:	1c50      	adds	r0, r2, #1
 8011836:	9019      	str	r0, [sp, #100]	@ 0x64
 8011838:	7852      	ldrb	r2, [r2, #1]
 801183a:	4618      	mov	r0, r3
 801183c:	e7b1      	b.n	80117a2 <_strtod_l+0x1d2>
 801183e:	f04f 0900 	mov.w	r9, #0
 8011842:	2301      	movs	r3, #1
 8011844:	e77d      	b.n	8011742 <_strtod_l+0x172>
 8011846:	f04f 0c00 	mov.w	ip, #0
 801184a:	1ca2      	adds	r2, r4, #2
 801184c:	9219      	str	r2, [sp, #100]	@ 0x64
 801184e:	78a2      	ldrb	r2, [r4, #2]
 8011850:	e785      	b.n	801175e <_strtod_l+0x18e>
 8011852:	f04f 0c01 	mov.w	ip, #1
 8011856:	e7f8      	b.n	801184a <_strtod_l+0x27a>
 8011858:	080148c0 	.word	0x080148c0
 801185c:	7ff00000 	.word	0x7ff00000
 8011860:	080148a8 	.word	0x080148a8
 8011864:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011866:	1c51      	adds	r1, r2, #1
 8011868:	9119      	str	r1, [sp, #100]	@ 0x64
 801186a:	7852      	ldrb	r2, [r2, #1]
 801186c:	2a30      	cmp	r2, #48	@ 0x30
 801186e:	d0f9      	beq.n	8011864 <_strtod_l+0x294>
 8011870:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011874:	2908      	cmp	r1, #8
 8011876:	f63f af78 	bhi.w	801176a <_strtod_l+0x19a>
 801187a:	f04f 080a 	mov.w	r8, #10
 801187e:	3a30      	subs	r2, #48	@ 0x30
 8011880:	920e      	str	r2, [sp, #56]	@ 0x38
 8011882:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011884:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011886:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011888:	1c56      	adds	r6, r2, #1
 801188a:	9619      	str	r6, [sp, #100]	@ 0x64
 801188c:	7852      	ldrb	r2, [r2, #1]
 801188e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011892:	f1be 0f09 	cmp.w	lr, #9
 8011896:	d939      	bls.n	801190c <_strtod_l+0x33c>
 8011898:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801189a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801189e:	1a76      	subs	r6, r6, r1
 80118a0:	2e08      	cmp	r6, #8
 80118a2:	dc03      	bgt.n	80118ac <_strtod_l+0x2dc>
 80118a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80118a6:	4588      	cmp	r8, r1
 80118a8:	bfa8      	it	ge
 80118aa:	4688      	movge	r8, r1
 80118ac:	f1bc 0f00 	cmp.w	ip, #0
 80118b0:	d001      	beq.n	80118b6 <_strtod_l+0x2e6>
 80118b2:	f1c8 0800 	rsb	r8, r8, #0
 80118b6:	2d00      	cmp	r5, #0
 80118b8:	d14e      	bne.n	8011958 <_strtod_l+0x388>
 80118ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80118bc:	4308      	orrs	r0, r1
 80118be:	f47f aec0 	bne.w	8011642 <_strtod_l+0x72>
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	f47f aed6 	bne.w	8011674 <_strtod_l+0xa4>
 80118c8:	2a69      	cmp	r2, #105	@ 0x69
 80118ca:	d028      	beq.n	801191e <_strtod_l+0x34e>
 80118cc:	dc25      	bgt.n	801191a <_strtod_l+0x34a>
 80118ce:	2a49      	cmp	r2, #73	@ 0x49
 80118d0:	d025      	beq.n	801191e <_strtod_l+0x34e>
 80118d2:	2a4e      	cmp	r2, #78	@ 0x4e
 80118d4:	f47f aece 	bne.w	8011674 <_strtod_l+0xa4>
 80118d8:	499a      	ldr	r1, [pc, #616]	@ (8011b44 <_strtod_l+0x574>)
 80118da:	a819      	add	r0, sp, #100	@ 0x64
 80118dc:	f001 fba2 	bl	8013024 <__match>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	f43f aec7 	beq.w	8011674 <_strtod_l+0xa4>
 80118e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	2b28      	cmp	r3, #40	@ 0x28
 80118ec:	d12e      	bne.n	801194c <_strtod_l+0x37c>
 80118ee:	4996      	ldr	r1, [pc, #600]	@ (8011b48 <_strtod_l+0x578>)
 80118f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80118f2:	a819      	add	r0, sp, #100	@ 0x64
 80118f4:	f001 fbaa 	bl	801304c <__hexnan>
 80118f8:	2805      	cmp	r0, #5
 80118fa:	d127      	bne.n	801194c <_strtod_l+0x37c>
 80118fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80118fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011902:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011906:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801190a:	e69a      	b.n	8011642 <_strtod_l+0x72>
 801190c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801190e:	fb08 2101 	mla	r1, r8, r1, r2
 8011912:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011916:	920e      	str	r2, [sp, #56]	@ 0x38
 8011918:	e7b5      	b.n	8011886 <_strtod_l+0x2b6>
 801191a:	2a6e      	cmp	r2, #110	@ 0x6e
 801191c:	e7da      	b.n	80118d4 <_strtod_l+0x304>
 801191e:	498b      	ldr	r1, [pc, #556]	@ (8011b4c <_strtod_l+0x57c>)
 8011920:	a819      	add	r0, sp, #100	@ 0x64
 8011922:	f001 fb7f 	bl	8013024 <__match>
 8011926:	2800      	cmp	r0, #0
 8011928:	f43f aea4 	beq.w	8011674 <_strtod_l+0xa4>
 801192c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801192e:	4988      	ldr	r1, [pc, #544]	@ (8011b50 <_strtod_l+0x580>)
 8011930:	3b01      	subs	r3, #1
 8011932:	a819      	add	r0, sp, #100	@ 0x64
 8011934:	9319      	str	r3, [sp, #100]	@ 0x64
 8011936:	f001 fb75 	bl	8013024 <__match>
 801193a:	b910      	cbnz	r0, 8011942 <_strtod_l+0x372>
 801193c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801193e:	3301      	adds	r3, #1
 8011940:	9319      	str	r3, [sp, #100]	@ 0x64
 8011942:	f04f 0a00 	mov.w	sl, #0
 8011946:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8011b54 <_strtod_l+0x584>
 801194a:	e67a      	b.n	8011642 <_strtod_l+0x72>
 801194c:	4882      	ldr	r0, [pc, #520]	@ (8011b58 <_strtod_l+0x588>)
 801194e:	f001 f8a7 	bl	8012aa0 <nan>
 8011952:	4682      	mov	sl, r0
 8011954:	468b      	mov	fp, r1
 8011956:	e674      	b.n	8011642 <_strtod_l+0x72>
 8011958:	eba8 0309 	sub.w	r3, r8, r9
 801195c:	2f00      	cmp	r7, #0
 801195e:	bf08      	it	eq
 8011960:	462f      	moveq	r7, r5
 8011962:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011964:	2d10      	cmp	r5, #16
 8011966:	462c      	mov	r4, r5
 8011968:	9309      	str	r3, [sp, #36]	@ 0x24
 801196a:	bfa8      	it	ge
 801196c:	2410      	movge	r4, #16
 801196e:	f7ee fd51 	bl	8000414 <__aeabi_ui2d>
 8011972:	2d09      	cmp	r5, #9
 8011974:	4682      	mov	sl, r0
 8011976:	468b      	mov	fp, r1
 8011978:	dc11      	bgt.n	801199e <_strtod_l+0x3ce>
 801197a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801197c:	2b00      	cmp	r3, #0
 801197e:	f43f ae60 	beq.w	8011642 <_strtod_l+0x72>
 8011982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011984:	dd76      	ble.n	8011a74 <_strtod_l+0x4a4>
 8011986:	2b16      	cmp	r3, #22
 8011988:	dc5d      	bgt.n	8011a46 <_strtod_l+0x476>
 801198a:	4974      	ldr	r1, [pc, #464]	@ (8011b5c <_strtod_l+0x58c>)
 801198c:	4652      	mov	r2, sl
 801198e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011992:	465b      	mov	r3, fp
 8011994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011998:	f7ee fdb6 	bl	8000508 <__aeabi_dmul>
 801199c:	e7d9      	b.n	8011952 <_strtod_l+0x382>
 801199e:	4b6f      	ldr	r3, [pc, #444]	@ (8011b5c <_strtod_l+0x58c>)
 80119a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80119a8:	f7ee fdae 	bl	8000508 <__aeabi_dmul>
 80119ac:	4682      	mov	sl, r0
 80119ae:	9808      	ldr	r0, [sp, #32]
 80119b0:	468b      	mov	fp, r1
 80119b2:	f7ee fd2f 	bl	8000414 <__aeabi_ui2d>
 80119b6:	4602      	mov	r2, r0
 80119b8:	460b      	mov	r3, r1
 80119ba:	4650      	mov	r0, sl
 80119bc:	4659      	mov	r1, fp
 80119be:	f7ee fbed 	bl	800019c <__adddf3>
 80119c2:	2d0f      	cmp	r5, #15
 80119c4:	4682      	mov	sl, r0
 80119c6:	468b      	mov	fp, r1
 80119c8:	ddd7      	ble.n	801197a <_strtod_l+0x3aa>
 80119ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119cc:	1b2c      	subs	r4, r5, r4
 80119ce:	441c      	add	r4, r3
 80119d0:	2c00      	cmp	r4, #0
 80119d2:	f340 8096 	ble.w	8011b02 <_strtod_l+0x532>
 80119d6:	f014 030f 	ands.w	r3, r4, #15
 80119da:	d00a      	beq.n	80119f2 <_strtod_l+0x422>
 80119dc:	495f      	ldr	r1, [pc, #380]	@ (8011b5c <_strtod_l+0x58c>)
 80119de:	4652      	mov	r2, sl
 80119e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80119e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119e8:	465b      	mov	r3, fp
 80119ea:	f7ee fd8d 	bl	8000508 <__aeabi_dmul>
 80119ee:	4682      	mov	sl, r0
 80119f0:	468b      	mov	fp, r1
 80119f2:	f034 040f 	bics.w	r4, r4, #15
 80119f6:	d073      	beq.n	8011ae0 <_strtod_l+0x510>
 80119f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80119fc:	dd48      	ble.n	8011a90 <_strtod_l+0x4c0>
 80119fe:	2400      	movs	r4, #0
 8011a00:	46a0      	mov	r8, r4
 8011a02:	46a1      	mov	r9, r4
 8011a04:	940a      	str	r4, [sp, #40]	@ 0x28
 8011a06:	2322      	movs	r3, #34	@ 0x22
 8011a08:	f04f 0a00 	mov.w	sl, #0
 8011a0c:	9a05      	ldr	r2, [sp, #20]
 8011a0e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8011b54 <_strtod_l+0x584>
 8011a12:	6013      	str	r3, [r2, #0]
 8011a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f43f ae13 	beq.w	8011642 <_strtod_l+0x72>
 8011a1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011a1e:	9805      	ldr	r0, [sp, #20]
 8011a20:	f7ff f94c 	bl	8010cbc <_Bfree>
 8011a24:	4649      	mov	r1, r9
 8011a26:	9805      	ldr	r0, [sp, #20]
 8011a28:	f7ff f948 	bl	8010cbc <_Bfree>
 8011a2c:	4641      	mov	r1, r8
 8011a2e:	9805      	ldr	r0, [sp, #20]
 8011a30:	f7ff f944 	bl	8010cbc <_Bfree>
 8011a34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011a36:	9805      	ldr	r0, [sp, #20]
 8011a38:	f7ff f940 	bl	8010cbc <_Bfree>
 8011a3c:	4621      	mov	r1, r4
 8011a3e:	9805      	ldr	r0, [sp, #20]
 8011a40:	f7ff f93c 	bl	8010cbc <_Bfree>
 8011a44:	e5fd      	b.n	8011642 <_strtod_l+0x72>
 8011a46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011a4c:	4293      	cmp	r3, r2
 8011a4e:	dbbc      	blt.n	80119ca <_strtod_l+0x3fa>
 8011a50:	4c42      	ldr	r4, [pc, #264]	@ (8011b5c <_strtod_l+0x58c>)
 8011a52:	f1c5 050f 	rsb	r5, r5, #15
 8011a56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011a5a:	4652      	mov	r2, sl
 8011a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a60:	465b      	mov	r3, fp
 8011a62:	f7ee fd51 	bl	8000508 <__aeabi_dmul>
 8011a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a68:	1b5d      	subs	r5, r3, r5
 8011a6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011a6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011a72:	e791      	b.n	8011998 <_strtod_l+0x3c8>
 8011a74:	3316      	adds	r3, #22
 8011a76:	dba8      	blt.n	80119ca <_strtod_l+0x3fa>
 8011a78:	4b38      	ldr	r3, [pc, #224]	@ (8011b5c <_strtod_l+0x58c>)
 8011a7a:	eba9 0808 	sub.w	r8, r9, r8
 8011a7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011a82:	4650      	mov	r0, sl
 8011a84:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011a88:	4659      	mov	r1, fp
 8011a8a:	f7ee fe67 	bl	800075c <__aeabi_ddiv>
 8011a8e:	e760      	b.n	8011952 <_strtod_l+0x382>
 8011a90:	4b33      	ldr	r3, [pc, #204]	@ (8011b60 <_strtod_l+0x590>)
 8011a92:	4650      	mov	r0, sl
 8011a94:	9308      	str	r3, [sp, #32]
 8011a96:	2300      	movs	r3, #0
 8011a98:	4659      	mov	r1, fp
 8011a9a:	461e      	mov	r6, r3
 8011a9c:	1124      	asrs	r4, r4, #4
 8011a9e:	2c01      	cmp	r4, #1
 8011aa0:	dc21      	bgt.n	8011ae6 <_strtod_l+0x516>
 8011aa2:	b10b      	cbz	r3, 8011aa8 <_strtod_l+0x4d8>
 8011aa4:	4682      	mov	sl, r0
 8011aa6:	468b      	mov	fp, r1
 8011aa8:	492d      	ldr	r1, [pc, #180]	@ (8011b60 <_strtod_l+0x590>)
 8011aaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011aae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011ab2:	4652      	mov	r2, sl
 8011ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ab8:	465b      	mov	r3, fp
 8011aba:	f7ee fd25 	bl	8000508 <__aeabi_dmul>
 8011abe:	4b25      	ldr	r3, [pc, #148]	@ (8011b54 <_strtod_l+0x584>)
 8011ac0:	460a      	mov	r2, r1
 8011ac2:	400b      	ands	r3, r1
 8011ac4:	4927      	ldr	r1, [pc, #156]	@ (8011b64 <_strtod_l+0x594>)
 8011ac6:	4682      	mov	sl, r0
 8011ac8:	428b      	cmp	r3, r1
 8011aca:	d898      	bhi.n	80119fe <_strtod_l+0x42e>
 8011acc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011ad0:	428b      	cmp	r3, r1
 8011ad2:	bf86      	itte	hi
 8011ad4:	f04f 3aff 	movhi.w	sl, #4294967295
 8011ad8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8011b68 <_strtod_l+0x598>
 8011adc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	9308      	str	r3, [sp, #32]
 8011ae4:	e07a      	b.n	8011bdc <_strtod_l+0x60c>
 8011ae6:	07e2      	lsls	r2, r4, #31
 8011ae8:	d505      	bpl.n	8011af6 <_strtod_l+0x526>
 8011aea:	9b08      	ldr	r3, [sp, #32]
 8011aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af0:	f7ee fd0a 	bl	8000508 <__aeabi_dmul>
 8011af4:	2301      	movs	r3, #1
 8011af6:	9a08      	ldr	r2, [sp, #32]
 8011af8:	3601      	adds	r6, #1
 8011afa:	3208      	adds	r2, #8
 8011afc:	1064      	asrs	r4, r4, #1
 8011afe:	9208      	str	r2, [sp, #32]
 8011b00:	e7cd      	b.n	8011a9e <_strtod_l+0x4ce>
 8011b02:	d0ed      	beq.n	8011ae0 <_strtod_l+0x510>
 8011b04:	4264      	negs	r4, r4
 8011b06:	f014 020f 	ands.w	r2, r4, #15
 8011b0a:	d00a      	beq.n	8011b22 <_strtod_l+0x552>
 8011b0c:	4b13      	ldr	r3, [pc, #76]	@ (8011b5c <_strtod_l+0x58c>)
 8011b0e:	4650      	mov	r0, sl
 8011b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b14:	4659      	mov	r1, fp
 8011b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1a:	f7ee fe1f 	bl	800075c <__aeabi_ddiv>
 8011b1e:	4682      	mov	sl, r0
 8011b20:	468b      	mov	fp, r1
 8011b22:	1124      	asrs	r4, r4, #4
 8011b24:	d0dc      	beq.n	8011ae0 <_strtod_l+0x510>
 8011b26:	2c1f      	cmp	r4, #31
 8011b28:	dd20      	ble.n	8011b6c <_strtod_l+0x59c>
 8011b2a:	2400      	movs	r4, #0
 8011b2c:	46a0      	mov	r8, r4
 8011b2e:	46a1      	mov	r9, r4
 8011b30:	940a      	str	r4, [sp, #40]	@ 0x28
 8011b32:	2322      	movs	r3, #34	@ 0x22
 8011b34:	9a05      	ldr	r2, [sp, #20]
 8011b36:	f04f 0a00 	mov.w	sl, #0
 8011b3a:	f04f 0b00 	mov.w	fp, #0
 8011b3e:	6013      	str	r3, [r2, #0]
 8011b40:	e768      	b.n	8011a14 <_strtod_l+0x444>
 8011b42:	bf00      	nop
 8011b44:	08014693 	.word	0x08014693
 8011b48:	080148ac 	.word	0x080148ac
 8011b4c:	0801468b 	.word	0x0801468b
 8011b50:	080146c2 	.word	0x080146c2
 8011b54:	7ff00000 	.word	0x7ff00000
 8011b58:	08014a55 	.word	0x08014a55
 8011b5c:	080147e0 	.word	0x080147e0
 8011b60:	080147b8 	.word	0x080147b8
 8011b64:	7ca00000 	.word	0x7ca00000
 8011b68:	7fefffff 	.word	0x7fefffff
 8011b6c:	f014 0310 	ands.w	r3, r4, #16
 8011b70:	bf18      	it	ne
 8011b72:	236a      	movne	r3, #106	@ 0x6a
 8011b74:	4650      	mov	r0, sl
 8011b76:	9308      	str	r3, [sp, #32]
 8011b78:	4659      	mov	r1, fp
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	4ea9      	ldr	r6, [pc, #676]	@ (8011e24 <_strtod_l+0x854>)
 8011b7e:	07e2      	lsls	r2, r4, #31
 8011b80:	d504      	bpl.n	8011b8c <_strtod_l+0x5bc>
 8011b82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011b86:	f7ee fcbf 	bl	8000508 <__aeabi_dmul>
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	1064      	asrs	r4, r4, #1
 8011b8e:	f106 0608 	add.w	r6, r6, #8
 8011b92:	d1f4      	bne.n	8011b7e <_strtod_l+0x5ae>
 8011b94:	b10b      	cbz	r3, 8011b9a <_strtod_l+0x5ca>
 8011b96:	4682      	mov	sl, r0
 8011b98:	468b      	mov	fp, r1
 8011b9a:	9b08      	ldr	r3, [sp, #32]
 8011b9c:	b1b3      	cbz	r3, 8011bcc <_strtod_l+0x5fc>
 8011b9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011ba2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	4659      	mov	r1, fp
 8011baa:	dd0f      	ble.n	8011bcc <_strtod_l+0x5fc>
 8011bac:	2b1f      	cmp	r3, #31
 8011bae:	dd57      	ble.n	8011c60 <_strtod_l+0x690>
 8011bb0:	2b34      	cmp	r3, #52	@ 0x34
 8011bb2:	bfd8      	it	le
 8011bb4:	f04f 33ff 	movle.w	r3, #4294967295
 8011bb8:	f04f 0a00 	mov.w	sl, #0
 8011bbc:	bfcf      	iteee	gt
 8011bbe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011bc2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011bc6:	4093      	lslle	r3, r2
 8011bc8:	ea03 0b01 	andle.w	fp, r3, r1
 8011bcc:	2200      	movs	r2, #0
 8011bce:	2300      	movs	r3, #0
 8011bd0:	4650      	mov	r0, sl
 8011bd2:	4659      	mov	r1, fp
 8011bd4:	f7ee ff00 	bl	80009d8 <__aeabi_dcmpeq>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d1a6      	bne.n	8011b2a <_strtod_l+0x55a>
 8011bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011bde:	463a      	mov	r2, r7
 8011be0:	9300      	str	r3, [sp, #0]
 8011be2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011be4:	462b      	mov	r3, r5
 8011be6:	9805      	ldr	r0, [sp, #20]
 8011be8:	f7ff f8d0 	bl	8010d8c <__s2b>
 8011bec:	900a      	str	r0, [sp, #40]	@ 0x28
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	f43f af05 	beq.w	80119fe <_strtod_l+0x42e>
 8011bf4:	2400      	movs	r4, #0
 8011bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bf8:	eba9 0308 	sub.w	r3, r9, r8
 8011bfc:	2a00      	cmp	r2, #0
 8011bfe:	bfa8      	it	ge
 8011c00:	2300      	movge	r3, #0
 8011c02:	46a0      	mov	r8, r4
 8011c04:	9312      	str	r3, [sp, #72]	@ 0x48
 8011c06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011c0a:	9316      	str	r3, [sp, #88]	@ 0x58
 8011c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c0e:	9805      	ldr	r0, [sp, #20]
 8011c10:	6859      	ldr	r1, [r3, #4]
 8011c12:	f7ff f813 	bl	8010c3c <_Balloc>
 8011c16:	4681      	mov	r9, r0
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	f43f aef4 	beq.w	8011a06 <_strtod_l+0x436>
 8011c1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c20:	300c      	adds	r0, #12
 8011c22:	691a      	ldr	r2, [r3, #16]
 8011c24:	f103 010c 	add.w	r1, r3, #12
 8011c28:	3202      	adds	r2, #2
 8011c2a:	0092      	lsls	r2, r2, #2
 8011c2c:	f000 ff2a 	bl	8012a84 <memcpy>
 8011c30:	ab1c      	add	r3, sp, #112	@ 0x70
 8011c32:	9301      	str	r3, [sp, #4]
 8011c34:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011c36:	9300      	str	r3, [sp, #0]
 8011c38:	4652      	mov	r2, sl
 8011c3a:	465b      	mov	r3, fp
 8011c3c:	9805      	ldr	r0, [sp, #20]
 8011c3e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011c42:	f7ff fbd5 	bl	80113f0 <__d2b>
 8011c46:	901a      	str	r0, [sp, #104]	@ 0x68
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	f43f aedc 	beq.w	8011a06 <_strtod_l+0x436>
 8011c4e:	2101      	movs	r1, #1
 8011c50:	9805      	ldr	r0, [sp, #20]
 8011c52:	f7ff f931 	bl	8010eb8 <__i2b>
 8011c56:	4680      	mov	r8, r0
 8011c58:	b948      	cbnz	r0, 8011c6e <_strtod_l+0x69e>
 8011c5a:	f04f 0800 	mov.w	r8, #0
 8011c5e:	e6d2      	b.n	8011a06 <_strtod_l+0x436>
 8011c60:	f04f 32ff 	mov.w	r2, #4294967295
 8011c64:	fa02 f303 	lsl.w	r3, r2, r3
 8011c68:	ea03 0a0a 	and.w	sl, r3, sl
 8011c6c:	e7ae      	b.n	8011bcc <_strtod_l+0x5fc>
 8011c6e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011c70:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011c72:	2d00      	cmp	r5, #0
 8011c74:	bfab      	itete	ge
 8011c76:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011c78:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011c7a:	18ef      	addge	r7, r5, r3
 8011c7c:	1b5e      	sublt	r6, r3, r5
 8011c7e:	9b08      	ldr	r3, [sp, #32]
 8011c80:	bfa8      	it	ge
 8011c82:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011c84:	eba5 0503 	sub.w	r5, r5, r3
 8011c88:	4415      	add	r5, r2
 8011c8a:	4b67      	ldr	r3, [pc, #412]	@ (8011e28 <_strtod_l+0x858>)
 8011c8c:	f105 35ff 	add.w	r5, r5, #4294967295
 8011c90:	bfb8      	it	lt
 8011c92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011c94:	429d      	cmp	r5, r3
 8011c96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011c9a:	da50      	bge.n	8011d3e <_strtod_l+0x76e>
 8011c9c:	1b5b      	subs	r3, r3, r5
 8011c9e:	2b1f      	cmp	r3, #31
 8011ca0:	f04f 0101 	mov.w	r1, #1
 8011ca4:	eba2 0203 	sub.w	r2, r2, r3
 8011ca8:	dc3d      	bgt.n	8011d26 <_strtod_l+0x756>
 8011caa:	fa01 f303 	lsl.w	r3, r1, r3
 8011cae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8011cb4:	18bd      	adds	r5, r7, r2
 8011cb6:	9b08      	ldr	r3, [sp, #32]
 8011cb8:	42af      	cmp	r7, r5
 8011cba:	4416      	add	r6, r2
 8011cbc:	441e      	add	r6, r3
 8011cbe:	463b      	mov	r3, r7
 8011cc0:	bfa8      	it	ge
 8011cc2:	462b      	movge	r3, r5
 8011cc4:	42b3      	cmp	r3, r6
 8011cc6:	bfa8      	it	ge
 8011cc8:	4633      	movge	r3, r6
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	bfc2      	ittt	gt
 8011cce:	1aed      	subgt	r5, r5, r3
 8011cd0:	1af6      	subgt	r6, r6, r3
 8011cd2:	1aff      	subgt	r7, r7, r3
 8011cd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	dd16      	ble.n	8011d08 <_strtod_l+0x738>
 8011cda:	4641      	mov	r1, r8
 8011cdc:	461a      	mov	r2, r3
 8011cde:	9805      	ldr	r0, [sp, #20]
 8011ce0:	f7ff f9a8 	bl	8011034 <__pow5mult>
 8011ce4:	4680      	mov	r8, r0
 8011ce6:	2800      	cmp	r0, #0
 8011ce8:	d0b7      	beq.n	8011c5a <_strtod_l+0x68a>
 8011cea:	4601      	mov	r1, r0
 8011cec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011cee:	9805      	ldr	r0, [sp, #20]
 8011cf0:	f7ff f8f8 	bl	8010ee4 <__multiply>
 8011cf4:	900e      	str	r0, [sp, #56]	@ 0x38
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	f43f ae85 	beq.w	8011a06 <_strtod_l+0x436>
 8011cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011cfe:	9805      	ldr	r0, [sp, #20]
 8011d00:	f7fe ffdc 	bl	8010cbc <_Bfree>
 8011d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d06:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d08:	2d00      	cmp	r5, #0
 8011d0a:	dc1d      	bgt.n	8011d48 <_strtod_l+0x778>
 8011d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	dd23      	ble.n	8011d5a <_strtod_l+0x78a>
 8011d12:	4649      	mov	r1, r9
 8011d14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011d16:	9805      	ldr	r0, [sp, #20]
 8011d18:	f7ff f98c 	bl	8011034 <__pow5mult>
 8011d1c:	4681      	mov	r9, r0
 8011d1e:	b9e0      	cbnz	r0, 8011d5a <_strtod_l+0x78a>
 8011d20:	f04f 0900 	mov.w	r9, #0
 8011d24:	e66f      	b.n	8011a06 <_strtod_l+0x436>
 8011d26:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011d2a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011d2e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011d32:	35e2      	adds	r5, #226	@ 0xe2
 8011d34:	fa01 f305 	lsl.w	r3, r1, r5
 8011d38:	9310      	str	r3, [sp, #64]	@ 0x40
 8011d3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011d3c:	e7ba      	b.n	8011cb4 <_strtod_l+0x6e4>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	9310      	str	r3, [sp, #64]	@ 0x40
 8011d42:	2301      	movs	r3, #1
 8011d44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011d46:	e7b5      	b.n	8011cb4 <_strtod_l+0x6e4>
 8011d48:	462a      	mov	r2, r5
 8011d4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d4c:	9805      	ldr	r0, [sp, #20]
 8011d4e:	f7ff f9cb 	bl	80110e8 <__lshift>
 8011d52:	901a      	str	r0, [sp, #104]	@ 0x68
 8011d54:	2800      	cmp	r0, #0
 8011d56:	d1d9      	bne.n	8011d0c <_strtod_l+0x73c>
 8011d58:	e655      	b.n	8011a06 <_strtod_l+0x436>
 8011d5a:	2e00      	cmp	r6, #0
 8011d5c:	dd07      	ble.n	8011d6e <_strtod_l+0x79e>
 8011d5e:	4649      	mov	r1, r9
 8011d60:	4632      	mov	r2, r6
 8011d62:	9805      	ldr	r0, [sp, #20]
 8011d64:	f7ff f9c0 	bl	80110e8 <__lshift>
 8011d68:	4681      	mov	r9, r0
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	d0d8      	beq.n	8011d20 <_strtod_l+0x750>
 8011d6e:	2f00      	cmp	r7, #0
 8011d70:	dd08      	ble.n	8011d84 <_strtod_l+0x7b4>
 8011d72:	4641      	mov	r1, r8
 8011d74:	463a      	mov	r2, r7
 8011d76:	9805      	ldr	r0, [sp, #20]
 8011d78:	f7ff f9b6 	bl	80110e8 <__lshift>
 8011d7c:	4680      	mov	r8, r0
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	f43f ae41 	beq.w	8011a06 <_strtod_l+0x436>
 8011d84:	464a      	mov	r2, r9
 8011d86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d88:	9805      	ldr	r0, [sp, #20]
 8011d8a:	f7ff fa35 	bl	80111f8 <__mdiff>
 8011d8e:	4604      	mov	r4, r0
 8011d90:	2800      	cmp	r0, #0
 8011d92:	f43f ae38 	beq.w	8011a06 <_strtod_l+0x436>
 8011d96:	68c3      	ldr	r3, [r0, #12]
 8011d98:	4641      	mov	r1, r8
 8011d9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	60c3      	str	r3, [r0, #12]
 8011da0:	f7ff fa0e 	bl	80111c0 <__mcmp>
 8011da4:	2800      	cmp	r0, #0
 8011da6:	da45      	bge.n	8011e34 <_strtod_l+0x864>
 8011da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011daa:	ea53 030a 	orrs.w	r3, r3, sl
 8011dae:	d16b      	bne.n	8011e88 <_strtod_l+0x8b8>
 8011db0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d167      	bne.n	8011e88 <_strtod_l+0x8b8>
 8011db8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011dbc:	0d1b      	lsrs	r3, r3, #20
 8011dbe:	051b      	lsls	r3, r3, #20
 8011dc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011dc4:	d960      	bls.n	8011e88 <_strtod_l+0x8b8>
 8011dc6:	6963      	ldr	r3, [r4, #20]
 8011dc8:	b913      	cbnz	r3, 8011dd0 <_strtod_l+0x800>
 8011dca:	6923      	ldr	r3, [r4, #16]
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	dd5b      	ble.n	8011e88 <_strtod_l+0x8b8>
 8011dd0:	4621      	mov	r1, r4
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	9805      	ldr	r0, [sp, #20]
 8011dd6:	f7ff f987 	bl	80110e8 <__lshift>
 8011dda:	4641      	mov	r1, r8
 8011ddc:	4604      	mov	r4, r0
 8011dde:	f7ff f9ef 	bl	80111c0 <__mcmp>
 8011de2:	2800      	cmp	r0, #0
 8011de4:	dd50      	ble.n	8011e88 <_strtod_l+0x8b8>
 8011de6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011dea:	9a08      	ldr	r2, [sp, #32]
 8011dec:	0d1b      	lsrs	r3, r3, #20
 8011dee:	051b      	lsls	r3, r3, #20
 8011df0:	2a00      	cmp	r2, #0
 8011df2:	d06a      	beq.n	8011eca <_strtod_l+0x8fa>
 8011df4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011df8:	d867      	bhi.n	8011eca <_strtod_l+0x8fa>
 8011dfa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011dfe:	f67f ae98 	bls.w	8011b32 <_strtod_l+0x562>
 8011e02:	4650      	mov	r0, sl
 8011e04:	4659      	mov	r1, fp
 8011e06:	4b09      	ldr	r3, [pc, #36]	@ (8011e2c <_strtod_l+0x85c>)
 8011e08:	2200      	movs	r2, #0
 8011e0a:	f7ee fb7d 	bl	8000508 <__aeabi_dmul>
 8011e0e:	4b08      	ldr	r3, [pc, #32]	@ (8011e30 <_strtod_l+0x860>)
 8011e10:	4682      	mov	sl, r0
 8011e12:	400b      	ands	r3, r1
 8011e14:	468b      	mov	fp, r1
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	f47f ae00 	bne.w	8011a1c <_strtod_l+0x44c>
 8011e1c:	2322      	movs	r3, #34	@ 0x22
 8011e1e:	9a05      	ldr	r2, [sp, #20]
 8011e20:	6013      	str	r3, [r2, #0]
 8011e22:	e5fb      	b.n	8011a1c <_strtod_l+0x44c>
 8011e24:	080148d8 	.word	0x080148d8
 8011e28:	fffffc02 	.word	0xfffffc02
 8011e2c:	39500000 	.word	0x39500000
 8011e30:	7ff00000 	.word	0x7ff00000
 8011e34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011e38:	d165      	bne.n	8011f06 <_strtod_l+0x936>
 8011e3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011e3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e40:	b35a      	cbz	r2, 8011e9a <_strtod_l+0x8ca>
 8011e42:	4a99      	ldr	r2, [pc, #612]	@ (80120a8 <_strtod_l+0xad8>)
 8011e44:	4293      	cmp	r3, r2
 8011e46:	d12b      	bne.n	8011ea0 <_strtod_l+0x8d0>
 8011e48:	9b08      	ldr	r3, [sp, #32]
 8011e4a:	4651      	mov	r1, sl
 8011e4c:	b303      	cbz	r3, 8011e90 <_strtod_l+0x8c0>
 8011e4e:	465a      	mov	r2, fp
 8011e50:	4b96      	ldr	r3, [pc, #600]	@ (80120ac <_strtod_l+0xadc>)
 8011e52:	4013      	ands	r3, r2
 8011e54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011e58:	f04f 32ff 	mov.w	r2, #4294967295
 8011e5c:	d81b      	bhi.n	8011e96 <_strtod_l+0x8c6>
 8011e5e:	0d1b      	lsrs	r3, r3, #20
 8011e60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011e64:	fa02 f303 	lsl.w	r3, r2, r3
 8011e68:	4299      	cmp	r1, r3
 8011e6a:	d119      	bne.n	8011ea0 <_strtod_l+0x8d0>
 8011e6c:	4b90      	ldr	r3, [pc, #576]	@ (80120b0 <_strtod_l+0xae0>)
 8011e6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d102      	bne.n	8011e7a <_strtod_l+0x8aa>
 8011e74:	3101      	adds	r1, #1
 8011e76:	f43f adc6 	beq.w	8011a06 <_strtod_l+0x436>
 8011e7a:	f04f 0a00 	mov.w	sl, #0
 8011e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80120ac <_strtod_l+0xadc>)
 8011e80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e82:	401a      	ands	r2, r3
 8011e84:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011e88:	9b08      	ldr	r3, [sp, #32]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d1b9      	bne.n	8011e02 <_strtod_l+0x832>
 8011e8e:	e5c5      	b.n	8011a1c <_strtod_l+0x44c>
 8011e90:	f04f 33ff 	mov.w	r3, #4294967295
 8011e94:	e7e8      	b.n	8011e68 <_strtod_l+0x898>
 8011e96:	4613      	mov	r3, r2
 8011e98:	e7e6      	b.n	8011e68 <_strtod_l+0x898>
 8011e9a:	ea53 030a 	orrs.w	r3, r3, sl
 8011e9e:	d0a2      	beq.n	8011de6 <_strtod_l+0x816>
 8011ea0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ea2:	b1db      	cbz	r3, 8011edc <_strtod_l+0x90c>
 8011ea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ea6:	4213      	tst	r3, r2
 8011ea8:	d0ee      	beq.n	8011e88 <_strtod_l+0x8b8>
 8011eaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011eac:	4650      	mov	r0, sl
 8011eae:	4659      	mov	r1, fp
 8011eb0:	9a08      	ldr	r2, [sp, #32]
 8011eb2:	b1bb      	cbz	r3, 8011ee4 <_strtod_l+0x914>
 8011eb4:	f7ff fb68 	bl	8011588 <sulp>
 8011eb8:	4602      	mov	r2, r0
 8011eba:	460b      	mov	r3, r1
 8011ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ec0:	f7ee f96c 	bl	800019c <__adddf3>
 8011ec4:	4682      	mov	sl, r0
 8011ec6:	468b      	mov	fp, r1
 8011ec8:	e7de      	b.n	8011e88 <_strtod_l+0x8b8>
 8011eca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011ece:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011ed2:	f04f 3aff 	mov.w	sl, #4294967295
 8011ed6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011eda:	e7d5      	b.n	8011e88 <_strtod_l+0x8b8>
 8011edc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011ede:	ea13 0f0a 	tst.w	r3, sl
 8011ee2:	e7e1      	b.n	8011ea8 <_strtod_l+0x8d8>
 8011ee4:	f7ff fb50 	bl	8011588 <sulp>
 8011ee8:	4602      	mov	r2, r0
 8011eea:	460b      	mov	r3, r1
 8011eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ef0:	f7ee f952 	bl	8000198 <__aeabi_dsub>
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	4682      	mov	sl, r0
 8011efa:	468b      	mov	fp, r1
 8011efc:	f7ee fd6c 	bl	80009d8 <__aeabi_dcmpeq>
 8011f00:	2800      	cmp	r0, #0
 8011f02:	d0c1      	beq.n	8011e88 <_strtod_l+0x8b8>
 8011f04:	e615      	b.n	8011b32 <_strtod_l+0x562>
 8011f06:	4641      	mov	r1, r8
 8011f08:	4620      	mov	r0, r4
 8011f0a:	f7ff fac9 	bl	80114a0 <__ratio>
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011f14:	4606      	mov	r6, r0
 8011f16:	460f      	mov	r7, r1
 8011f18:	f7ee fd72 	bl	8000a00 <__aeabi_dcmple>
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d06d      	beq.n	8011ffc <_strtod_l+0xa2c>
 8011f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d178      	bne.n	8012018 <_strtod_l+0xa48>
 8011f26:	f1ba 0f00 	cmp.w	sl, #0
 8011f2a:	d156      	bne.n	8011fda <_strtod_l+0xa0a>
 8011f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d158      	bne.n	8011fe8 <_strtod_l+0xa18>
 8011f36:	2200      	movs	r2, #0
 8011f38:	4630      	mov	r0, r6
 8011f3a:	4639      	mov	r1, r7
 8011f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80120b4 <_strtod_l+0xae4>)
 8011f3e:	f7ee fd55 	bl	80009ec <__aeabi_dcmplt>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	d157      	bne.n	8011ff6 <_strtod_l+0xa26>
 8011f46:	4630      	mov	r0, r6
 8011f48:	4639      	mov	r1, r7
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80120b8 <_strtod_l+0xae8>)
 8011f4e:	f7ee fadb 	bl	8000508 <__aeabi_dmul>
 8011f52:	4606      	mov	r6, r0
 8011f54:	460f      	mov	r7, r1
 8011f56:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011f5a:	9606      	str	r6, [sp, #24]
 8011f5c:	9307      	str	r3, [sp, #28]
 8011f5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f62:	4d52      	ldr	r5, [pc, #328]	@ (80120ac <_strtod_l+0xadc>)
 8011f64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011f68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f6a:	401d      	ands	r5, r3
 8011f6c:	4b53      	ldr	r3, [pc, #332]	@ (80120bc <_strtod_l+0xaec>)
 8011f6e:	429d      	cmp	r5, r3
 8011f70:	f040 80aa 	bne.w	80120c8 <_strtod_l+0xaf8>
 8011f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f76:	4650      	mov	r0, sl
 8011f78:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011f7c:	4659      	mov	r1, fp
 8011f7e:	f7ff f9cf 	bl	8011320 <__ulp>
 8011f82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f86:	f7ee fabf 	bl	8000508 <__aeabi_dmul>
 8011f8a:	4652      	mov	r2, sl
 8011f8c:	465b      	mov	r3, fp
 8011f8e:	f7ee f905 	bl	800019c <__adddf3>
 8011f92:	460b      	mov	r3, r1
 8011f94:	4945      	ldr	r1, [pc, #276]	@ (80120ac <_strtod_l+0xadc>)
 8011f96:	4a4a      	ldr	r2, [pc, #296]	@ (80120c0 <_strtod_l+0xaf0>)
 8011f98:	4019      	ands	r1, r3
 8011f9a:	4291      	cmp	r1, r2
 8011f9c:	4682      	mov	sl, r0
 8011f9e:	d942      	bls.n	8012026 <_strtod_l+0xa56>
 8011fa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011fa2:	4b43      	ldr	r3, [pc, #268]	@ (80120b0 <_strtod_l+0xae0>)
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d103      	bne.n	8011fb0 <_strtod_l+0x9e0>
 8011fa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011faa:	3301      	adds	r3, #1
 8011fac:	f43f ad2b 	beq.w	8011a06 <_strtod_l+0x436>
 8011fb0:	f04f 3aff 	mov.w	sl, #4294967295
 8011fb4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80120b0 <_strtod_l+0xae0>
 8011fb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011fba:	9805      	ldr	r0, [sp, #20]
 8011fbc:	f7fe fe7e 	bl	8010cbc <_Bfree>
 8011fc0:	4649      	mov	r1, r9
 8011fc2:	9805      	ldr	r0, [sp, #20]
 8011fc4:	f7fe fe7a 	bl	8010cbc <_Bfree>
 8011fc8:	4641      	mov	r1, r8
 8011fca:	9805      	ldr	r0, [sp, #20]
 8011fcc:	f7fe fe76 	bl	8010cbc <_Bfree>
 8011fd0:	4621      	mov	r1, r4
 8011fd2:	9805      	ldr	r0, [sp, #20]
 8011fd4:	f7fe fe72 	bl	8010cbc <_Bfree>
 8011fd8:	e618      	b.n	8011c0c <_strtod_l+0x63c>
 8011fda:	f1ba 0f01 	cmp.w	sl, #1
 8011fde:	d103      	bne.n	8011fe8 <_strtod_l+0xa18>
 8011fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	f43f ada5 	beq.w	8011b32 <_strtod_l+0x562>
 8011fe8:	2200      	movs	r2, #0
 8011fea:	4b36      	ldr	r3, [pc, #216]	@ (80120c4 <_strtod_l+0xaf4>)
 8011fec:	2600      	movs	r6, #0
 8011fee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011ff2:	4f30      	ldr	r7, [pc, #192]	@ (80120b4 <_strtod_l+0xae4>)
 8011ff4:	e7b3      	b.n	8011f5e <_strtod_l+0x98e>
 8011ff6:	2600      	movs	r6, #0
 8011ff8:	4f2f      	ldr	r7, [pc, #188]	@ (80120b8 <_strtod_l+0xae8>)
 8011ffa:	e7ac      	b.n	8011f56 <_strtod_l+0x986>
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	4639      	mov	r1, r7
 8012000:	4b2d      	ldr	r3, [pc, #180]	@ (80120b8 <_strtod_l+0xae8>)
 8012002:	2200      	movs	r2, #0
 8012004:	f7ee fa80 	bl	8000508 <__aeabi_dmul>
 8012008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801200a:	4606      	mov	r6, r0
 801200c:	460f      	mov	r7, r1
 801200e:	2b00      	cmp	r3, #0
 8012010:	d0a1      	beq.n	8011f56 <_strtod_l+0x986>
 8012012:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012016:	e7a2      	b.n	8011f5e <_strtod_l+0x98e>
 8012018:	2200      	movs	r2, #0
 801201a:	4b26      	ldr	r3, [pc, #152]	@ (80120b4 <_strtod_l+0xae4>)
 801201c:	4616      	mov	r6, r2
 801201e:	461f      	mov	r7, r3
 8012020:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012024:	e79b      	b.n	8011f5e <_strtod_l+0x98e>
 8012026:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801202a:	9b08      	ldr	r3, [sp, #32]
 801202c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012030:	2b00      	cmp	r3, #0
 8012032:	d1c1      	bne.n	8011fb8 <_strtod_l+0x9e8>
 8012034:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012038:	0d1b      	lsrs	r3, r3, #20
 801203a:	051b      	lsls	r3, r3, #20
 801203c:	429d      	cmp	r5, r3
 801203e:	d1bb      	bne.n	8011fb8 <_strtod_l+0x9e8>
 8012040:	4630      	mov	r0, r6
 8012042:	4639      	mov	r1, r7
 8012044:	f7ef f8ba 	bl	80011bc <__aeabi_d2lz>
 8012048:	f7ee fa30 	bl	80004ac <__aeabi_l2d>
 801204c:	4602      	mov	r2, r0
 801204e:	460b      	mov	r3, r1
 8012050:	4630      	mov	r0, r6
 8012052:	4639      	mov	r1, r7
 8012054:	f7ee f8a0 	bl	8000198 <__aeabi_dsub>
 8012058:	460b      	mov	r3, r1
 801205a:	4602      	mov	r2, r0
 801205c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012060:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012066:	ea46 060a 	orr.w	r6, r6, sl
 801206a:	431e      	orrs	r6, r3
 801206c:	d069      	beq.n	8012142 <_strtod_l+0xb72>
 801206e:	a30a      	add	r3, pc, #40	@ (adr r3, 8012098 <_strtod_l+0xac8>)
 8012070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012074:	f7ee fcba 	bl	80009ec <__aeabi_dcmplt>
 8012078:	2800      	cmp	r0, #0
 801207a:	f47f accf 	bne.w	8011a1c <_strtod_l+0x44c>
 801207e:	a308      	add	r3, pc, #32	@ (adr r3, 80120a0 <_strtod_l+0xad0>)
 8012080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012088:	f7ee fcce 	bl	8000a28 <__aeabi_dcmpgt>
 801208c:	2800      	cmp	r0, #0
 801208e:	d093      	beq.n	8011fb8 <_strtod_l+0x9e8>
 8012090:	e4c4      	b.n	8011a1c <_strtod_l+0x44c>
 8012092:	bf00      	nop
 8012094:	f3af 8000 	nop.w
 8012098:	94a03595 	.word	0x94a03595
 801209c:	3fdfffff 	.word	0x3fdfffff
 80120a0:	35afe535 	.word	0x35afe535
 80120a4:	3fe00000 	.word	0x3fe00000
 80120a8:	000fffff 	.word	0x000fffff
 80120ac:	7ff00000 	.word	0x7ff00000
 80120b0:	7fefffff 	.word	0x7fefffff
 80120b4:	3ff00000 	.word	0x3ff00000
 80120b8:	3fe00000 	.word	0x3fe00000
 80120bc:	7fe00000 	.word	0x7fe00000
 80120c0:	7c9fffff 	.word	0x7c9fffff
 80120c4:	bff00000 	.word	0xbff00000
 80120c8:	9b08      	ldr	r3, [sp, #32]
 80120ca:	b323      	cbz	r3, 8012116 <_strtod_l+0xb46>
 80120cc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80120d0:	d821      	bhi.n	8012116 <_strtod_l+0xb46>
 80120d2:	a327      	add	r3, pc, #156	@ (adr r3, 8012170 <_strtod_l+0xba0>)
 80120d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d8:	4630      	mov	r0, r6
 80120da:	4639      	mov	r1, r7
 80120dc:	f7ee fc90 	bl	8000a00 <__aeabi_dcmple>
 80120e0:	b1a0      	cbz	r0, 801210c <_strtod_l+0xb3c>
 80120e2:	4639      	mov	r1, r7
 80120e4:	4630      	mov	r0, r6
 80120e6:	f7ee fce7 	bl	8000ab8 <__aeabi_d2uiz>
 80120ea:	2801      	cmp	r0, #1
 80120ec:	bf38      	it	cc
 80120ee:	2001      	movcc	r0, #1
 80120f0:	f7ee f990 	bl	8000414 <__aeabi_ui2d>
 80120f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120f6:	4606      	mov	r6, r0
 80120f8:	460f      	mov	r7, r1
 80120fa:	b9fb      	cbnz	r3, 801213c <_strtod_l+0xb6c>
 80120fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012100:	9014      	str	r0, [sp, #80]	@ 0x50
 8012102:	9315      	str	r3, [sp, #84]	@ 0x54
 8012104:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012108:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801210c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801210e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012112:	1b5b      	subs	r3, r3, r5
 8012114:	9311      	str	r3, [sp, #68]	@ 0x44
 8012116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801211a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801211e:	f7ff f8ff 	bl	8011320 <__ulp>
 8012122:	4602      	mov	r2, r0
 8012124:	460b      	mov	r3, r1
 8012126:	4650      	mov	r0, sl
 8012128:	4659      	mov	r1, fp
 801212a:	f7ee f9ed 	bl	8000508 <__aeabi_dmul>
 801212e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012132:	f7ee f833 	bl	800019c <__adddf3>
 8012136:	4682      	mov	sl, r0
 8012138:	468b      	mov	fp, r1
 801213a:	e776      	b.n	801202a <_strtod_l+0xa5a>
 801213c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012140:	e7e0      	b.n	8012104 <_strtod_l+0xb34>
 8012142:	a30d      	add	r3, pc, #52	@ (adr r3, 8012178 <_strtod_l+0xba8>)
 8012144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012148:	f7ee fc50 	bl	80009ec <__aeabi_dcmplt>
 801214c:	e79e      	b.n	801208c <_strtod_l+0xabc>
 801214e:	2300      	movs	r3, #0
 8012150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012152:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012154:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012156:	6013      	str	r3, [r2, #0]
 8012158:	f7ff ba77 	b.w	801164a <_strtod_l+0x7a>
 801215c:	2a65      	cmp	r2, #101	@ 0x65
 801215e:	f43f ab6e 	beq.w	801183e <_strtod_l+0x26e>
 8012162:	2a45      	cmp	r2, #69	@ 0x45
 8012164:	f43f ab6b 	beq.w	801183e <_strtod_l+0x26e>
 8012168:	2301      	movs	r3, #1
 801216a:	f7ff bba6 	b.w	80118ba <_strtod_l+0x2ea>
 801216e:	bf00      	nop
 8012170:	ffc00000 	.word	0xffc00000
 8012174:	41dfffff 	.word	0x41dfffff
 8012178:	94a03595 	.word	0x94a03595
 801217c:	3fcfffff 	.word	0x3fcfffff

08012180 <_strtod_r>:
 8012180:	4b01      	ldr	r3, [pc, #4]	@ (8012188 <_strtod_r+0x8>)
 8012182:	f7ff ba25 	b.w	80115d0 <_strtod_l>
 8012186:	bf00      	nop
 8012188:	200001f4 	.word	0x200001f4

0801218c <_strtol_l.constprop.0>:
 801218c:	2b24      	cmp	r3, #36	@ 0x24
 801218e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012192:	4686      	mov	lr, r0
 8012194:	4690      	mov	r8, r2
 8012196:	d801      	bhi.n	801219c <_strtol_l.constprop.0+0x10>
 8012198:	2b01      	cmp	r3, #1
 801219a:	d106      	bne.n	80121aa <_strtol_l.constprop.0+0x1e>
 801219c:	f7fd fdc0 	bl	800fd20 <__errno>
 80121a0:	2316      	movs	r3, #22
 80121a2:	6003      	str	r3, [r0, #0]
 80121a4:	2000      	movs	r0, #0
 80121a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121aa:	460d      	mov	r5, r1
 80121ac:	4833      	ldr	r0, [pc, #204]	@ (801227c <_strtol_l.constprop.0+0xf0>)
 80121ae:	462a      	mov	r2, r5
 80121b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80121b4:	5d06      	ldrb	r6, [r0, r4]
 80121b6:	f016 0608 	ands.w	r6, r6, #8
 80121ba:	d1f8      	bne.n	80121ae <_strtol_l.constprop.0+0x22>
 80121bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80121be:	d12d      	bne.n	801221c <_strtol_l.constprop.0+0x90>
 80121c0:	2601      	movs	r6, #1
 80121c2:	782c      	ldrb	r4, [r5, #0]
 80121c4:	1c95      	adds	r5, r2, #2
 80121c6:	f033 0210 	bics.w	r2, r3, #16
 80121ca:	d109      	bne.n	80121e0 <_strtol_l.constprop.0+0x54>
 80121cc:	2c30      	cmp	r4, #48	@ 0x30
 80121ce:	d12a      	bne.n	8012226 <_strtol_l.constprop.0+0x9a>
 80121d0:	782a      	ldrb	r2, [r5, #0]
 80121d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80121d6:	2a58      	cmp	r2, #88	@ 0x58
 80121d8:	d125      	bne.n	8012226 <_strtol_l.constprop.0+0x9a>
 80121da:	2310      	movs	r3, #16
 80121dc:	786c      	ldrb	r4, [r5, #1]
 80121de:	3502      	adds	r5, #2
 80121e0:	2200      	movs	r2, #0
 80121e2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80121e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80121ea:	fbbc f9f3 	udiv	r9, ip, r3
 80121ee:	4610      	mov	r0, r2
 80121f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80121f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80121f8:	2f09      	cmp	r7, #9
 80121fa:	d81b      	bhi.n	8012234 <_strtol_l.constprop.0+0xa8>
 80121fc:	463c      	mov	r4, r7
 80121fe:	42a3      	cmp	r3, r4
 8012200:	dd27      	ble.n	8012252 <_strtol_l.constprop.0+0xc6>
 8012202:	1c57      	adds	r7, r2, #1
 8012204:	d007      	beq.n	8012216 <_strtol_l.constprop.0+0x8a>
 8012206:	4581      	cmp	r9, r0
 8012208:	d320      	bcc.n	801224c <_strtol_l.constprop.0+0xc0>
 801220a:	d101      	bne.n	8012210 <_strtol_l.constprop.0+0x84>
 801220c:	45a2      	cmp	sl, r4
 801220e:	db1d      	blt.n	801224c <_strtol_l.constprop.0+0xc0>
 8012210:	2201      	movs	r2, #1
 8012212:	fb00 4003 	mla	r0, r0, r3, r4
 8012216:	f815 4b01 	ldrb.w	r4, [r5], #1
 801221a:	e7eb      	b.n	80121f4 <_strtol_l.constprop.0+0x68>
 801221c:	2c2b      	cmp	r4, #43	@ 0x2b
 801221e:	bf04      	itt	eq
 8012220:	782c      	ldrbeq	r4, [r5, #0]
 8012222:	1c95      	addeq	r5, r2, #2
 8012224:	e7cf      	b.n	80121c6 <_strtol_l.constprop.0+0x3a>
 8012226:	2b00      	cmp	r3, #0
 8012228:	d1da      	bne.n	80121e0 <_strtol_l.constprop.0+0x54>
 801222a:	2c30      	cmp	r4, #48	@ 0x30
 801222c:	bf0c      	ite	eq
 801222e:	2308      	moveq	r3, #8
 8012230:	230a      	movne	r3, #10
 8012232:	e7d5      	b.n	80121e0 <_strtol_l.constprop.0+0x54>
 8012234:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012238:	2f19      	cmp	r7, #25
 801223a:	d801      	bhi.n	8012240 <_strtol_l.constprop.0+0xb4>
 801223c:	3c37      	subs	r4, #55	@ 0x37
 801223e:	e7de      	b.n	80121fe <_strtol_l.constprop.0+0x72>
 8012240:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012244:	2f19      	cmp	r7, #25
 8012246:	d804      	bhi.n	8012252 <_strtol_l.constprop.0+0xc6>
 8012248:	3c57      	subs	r4, #87	@ 0x57
 801224a:	e7d8      	b.n	80121fe <_strtol_l.constprop.0+0x72>
 801224c:	f04f 32ff 	mov.w	r2, #4294967295
 8012250:	e7e1      	b.n	8012216 <_strtol_l.constprop.0+0x8a>
 8012252:	1c53      	adds	r3, r2, #1
 8012254:	d108      	bne.n	8012268 <_strtol_l.constprop.0+0xdc>
 8012256:	2322      	movs	r3, #34	@ 0x22
 8012258:	4660      	mov	r0, ip
 801225a:	f8ce 3000 	str.w	r3, [lr]
 801225e:	f1b8 0f00 	cmp.w	r8, #0
 8012262:	d0a0      	beq.n	80121a6 <_strtol_l.constprop.0+0x1a>
 8012264:	1e69      	subs	r1, r5, #1
 8012266:	e006      	b.n	8012276 <_strtol_l.constprop.0+0xea>
 8012268:	b106      	cbz	r6, 801226c <_strtol_l.constprop.0+0xe0>
 801226a:	4240      	negs	r0, r0
 801226c:	f1b8 0f00 	cmp.w	r8, #0
 8012270:	d099      	beq.n	80121a6 <_strtol_l.constprop.0+0x1a>
 8012272:	2a00      	cmp	r2, #0
 8012274:	d1f6      	bne.n	8012264 <_strtol_l.constprop.0+0xd8>
 8012276:	f8c8 1000 	str.w	r1, [r8]
 801227a:	e794      	b.n	80121a6 <_strtol_l.constprop.0+0x1a>
 801227c:	08014901 	.word	0x08014901

08012280 <_strtol_r>:
 8012280:	f7ff bf84 	b.w	801218c <_strtol_l.constprop.0>

08012284 <__ssputs_r>:
 8012284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012288:	461f      	mov	r7, r3
 801228a:	688e      	ldr	r6, [r1, #8]
 801228c:	4682      	mov	sl, r0
 801228e:	42be      	cmp	r6, r7
 8012290:	460c      	mov	r4, r1
 8012292:	4690      	mov	r8, r2
 8012294:	680b      	ldr	r3, [r1, #0]
 8012296:	d82d      	bhi.n	80122f4 <__ssputs_r+0x70>
 8012298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801229c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80122a0:	d026      	beq.n	80122f0 <__ssputs_r+0x6c>
 80122a2:	6965      	ldr	r5, [r4, #20]
 80122a4:	6909      	ldr	r1, [r1, #16]
 80122a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80122aa:	eba3 0901 	sub.w	r9, r3, r1
 80122ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80122b2:	1c7b      	adds	r3, r7, #1
 80122b4:	444b      	add	r3, r9
 80122b6:	106d      	asrs	r5, r5, #1
 80122b8:	429d      	cmp	r5, r3
 80122ba:	bf38      	it	cc
 80122bc:	461d      	movcc	r5, r3
 80122be:	0553      	lsls	r3, r2, #21
 80122c0:	d527      	bpl.n	8012312 <__ssputs_r+0x8e>
 80122c2:	4629      	mov	r1, r5
 80122c4:	f7fe fc2e 	bl	8010b24 <_malloc_r>
 80122c8:	4606      	mov	r6, r0
 80122ca:	b360      	cbz	r0, 8012326 <__ssputs_r+0xa2>
 80122cc:	464a      	mov	r2, r9
 80122ce:	6921      	ldr	r1, [r4, #16]
 80122d0:	f000 fbd8 	bl	8012a84 <memcpy>
 80122d4:	89a3      	ldrh	r3, [r4, #12]
 80122d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80122da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122de:	81a3      	strh	r3, [r4, #12]
 80122e0:	6126      	str	r6, [r4, #16]
 80122e2:	444e      	add	r6, r9
 80122e4:	6026      	str	r6, [r4, #0]
 80122e6:	463e      	mov	r6, r7
 80122e8:	6165      	str	r5, [r4, #20]
 80122ea:	eba5 0509 	sub.w	r5, r5, r9
 80122ee:	60a5      	str	r5, [r4, #8]
 80122f0:	42be      	cmp	r6, r7
 80122f2:	d900      	bls.n	80122f6 <__ssputs_r+0x72>
 80122f4:	463e      	mov	r6, r7
 80122f6:	4632      	mov	r2, r6
 80122f8:	4641      	mov	r1, r8
 80122fa:	6820      	ldr	r0, [r4, #0]
 80122fc:	f000 fb63 	bl	80129c6 <memmove>
 8012300:	2000      	movs	r0, #0
 8012302:	68a3      	ldr	r3, [r4, #8]
 8012304:	1b9b      	subs	r3, r3, r6
 8012306:	60a3      	str	r3, [r4, #8]
 8012308:	6823      	ldr	r3, [r4, #0]
 801230a:	4433      	add	r3, r6
 801230c:	6023      	str	r3, [r4, #0]
 801230e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012312:	462a      	mov	r2, r5
 8012314:	f000 ff47 	bl	80131a6 <_realloc_r>
 8012318:	4606      	mov	r6, r0
 801231a:	2800      	cmp	r0, #0
 801231c:	d1e0      	bne.n	80122e0 <__ssputs_r+0x5c>
 801231e:	4650      	mov	r0, sl
 8012320:	6921      	ldr	r1, [r4, #16]
 8012322:	f7fe fb8d 	bl	8010a40 <_free_r>
 8012326:	230c      	movs	r3, #12
 8012328:	f8ca 3000 	str.w	r3, [sl]
 801232c:	89a3      	ldrh	r3, [r4, #12]
 801232e:	f04f 30ff 	mov.w	r0, #4294967295
 8012332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012336:	81a3      	strh	r3, [r4, #12]
 8012338:	e7e9      	b.n	801230e <__ssputs_r+0x8a>
	...

0801233c <_svfiprintf_r>:
 801233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012340:	4698      	mov	r8, r3
 8012342:	898b      	ldrh	r3, [r1, #12]
 8012344:	4607      	mov	r7, r0
 8012346:	061b      	lsls	r3, r3, #24
 8012348:	460d      	mov	r5, r1
 801234a:	4614      	mov	r4, r2
 801234c:	b09d      	sub	sp, #116	@ 0x74
 801234e:	d510      	bpl.n	8012372 <_svfiprintf_r+0x36>
 8012350:	690b      	ldr	r3, [r1, #16]
 8012352:	b973      	cbnz	r3, 8012372 <_svfiprintf_r+0x36>
 8012354:	2140      	movs	r1, #64	@ 0x40
 8012356:	f7fe fbe5 	bl	8010b24 <_malloc_r>
 801235a:	6028      	str	r0, [r5, #0]
 801235c:	6128      	str	r0, [r5, #16]
 801235e:	b930      	cbnz	r0, 801236e <_svfiprintf_r+0x32>
 8012360:	230c      	movs	r3, #12
 8012362:	603b      	str	r3, [r7, #0]
 8012364:	f04f 30ff 	mov.w	r0, #4294967295
 8012368:	b01d      	add	sp, #116	@ 0x74
 801236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801236e:	2340      	movs	r3, #64	@ 0x40
 8012370:	616b      	str	r3, [r5, #20]
 8012372:	2300      	movs	r3, #0
 8012374:	9309      	str	r3, [sp, #36]	@ 0x24
 8012376:	2320      	movs	r3, #32
 8012378:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801237c:	2330      	movs	r3, #48	@ 0x30
 801237e:	f04f 0901 	mov.w	r9, #1
 8012382:	f8cd 800c 	str.w	r8, [sp, #12]
 8012386:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8012520 <_svfiprintf_r+0x1e4>
 801238a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801238e:	4623      	mov	r3, r4
 8012390:	469a      	mov	sl, r3
 8012392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012396:	b10a      	cbz	r2, 801239c <_svfiprintf_r+0x60>
 8012398:	2a25      	cmp	r2, #37	@ 0x25
 801239a:	d1f9      	bne.n	8012390 <_svfiprintf_r+0x54>
 801239c:	ebba 0b04 	subs.w	fp, sl, r4
 80123a0:	d00b      	beq.n	80123ba <_svfiprintf_r+0x7e>
 80123a2:	465b      	mov	r3, fp
 80123a4:	4622      	mov	r2, r4
 80123a6:	4629      	mov	r1, r5
 80123a8:	4638      	mov	r0, r7
 80123aa:	f7ff ff6b 	bl	8012284 <__ssputs_r>
 80123ae:	3001      	adds	r0, #1
 80123b0:	f000 80a7 	beq.w	8012502 <_svfiprintf_r+0x1c6>
 80123b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123b6:	445a      	add	r2, fp
 80123b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80123ba:	f89a 3000 	ldrb.w	r3, [sl]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	f000 809f 	beq.w	8012502 <_svfiprintf_r+0x1c6>
 80123c4:	2300      	movs	r3, #0
 80123c6:	f04f 32ff 	mov.w	r2, #4294967295
 80123ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123ce:	f10a 0a01 	add.w	sl, sl, #1
 80123d2:	9304      	str	r3, [sp, #16]
 80123d4:	9307      	str	r3, [sp, #28]
 80123d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123da:	931a      	str	r3, [sp, #104]	@ 0x68
 80123dc:	4654      	mov	r4, sl
 80123de:	2205      	movs	r2, #5
 80123e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123e4:	484e      	ldr	r0, [pc, #312]	@ (8012520 <_svfiprintf_r+0x1e4>)
 80123e6:	f7fd fcc8 	bl	800fd7a <memchr>
 80123ea:	9a04      	ldr	r2, [sp, #16]
 80123ec:	b9d8      	cbnz	r0, 8012426 <_svfiprintf_r+0xea>
 80123ee:	06d0      	lsls	r0, r2, #27
 80123f0:	bf44      	itt	mi
 80123f2:	2320      	movmi	r3, #32
 80123f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123f8:	0711      	lsls	r1, r2, #28
 80123fa:	bf44      	itt	mi
 80123fc:	232b      	movmi	r3, #43	@ 0x2b
 80123fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012402:	f89a 3000 	ldrb.w	r3, [sl]
 8012406:	2b2a      	cmp	r3, #42	@ 0x2a
 8012408:	d015      	beq.n	8012436 <_svfiprintf_r+0xfa>
 801240a:	4654      	mov	r4, sl
 801240c:	2000      	movs	r0, #0
 801240e:	f04f 0c0a 	mov.w	ip, #10
 8012412:	9a07      	ldr	r2, [sp, #28]
 8012414:	4621      	mov	r1, r4
 8012416:	f811 3b01 	ldrb.w	r3, [r1], #1
 801241a:	3b30      	subs	r3, #48	@ 0x30
 801241c:	2b09      	cmp	r3, #9
 801241e:	d94b      	bls.n	80124b8 <_svfiprintf_r+0x17c>
 8012420:	b1b0      	cbz	r0, 8012450 <_svfiprintf_r+0x114>
 8012422:	9207      	str	r2, [sp, #28]
 8012424:	e014      	b.n	8012450 <_svfiprintf_r+0x114>
 8012426:	eba0 0308 	sub.w	r3, r0, r8
 801242a:	fa09 f303 	lsl.w	r3, r9, r3
 801242e:	4313      	orrs	r3, r2
 8012430:	46a2      	mov	sl, r4
 8012432:	9304      	str	r3, [sp, #16]
 8012434:	e7d2      	b.n	80123dc <_svfiprintf_r+0xa0>
 8012436:	9b03      	ldr	r3, [sp, #12]
 8012438:	1d19      	adds	r1, r3, #4
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	9103      	str	r1, [sp, #12]
 801243e:	2b00      	cmp	r3, #0
 8012440:	bfbb      	ittet	lt
 8012442:	425b      	neglt	r3, r3
 8012444:	f042 0202 	orrlt.w	r2, r2, #2
 8012448:	9307      	strge	r3, [sp, #28]
 801244a:	9307      	strlt	r3, [sp, #28]
 801244c:	bfb8      	it	lt
 801244e:	9204      	strlt	r2, [sp, #16]
 8012450:	7823      	ldrb	r3, [r4, #0]
 8012452:	2b2e      	cmp	r3, #46	@ 0x2e
 8012454:	d10a      	bne.n	801246c <_svfiprintf_r+0x130>
 8012456:	7863      	ldrb	r3, [r4, #1]
 8012458:	2b2a      	cmp	r3, #42	@ 0x2a
 801245a:	d132      	bne.n	80124c2 <_svfiprintf_r+0x186>
 801245c:	9b03      	ldr	r3, [sp, #12]
 801245e:	3402      	adds	r4, #2
 8012460:	1d1a      	adds	r2, r3, #4
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	9203      	str	r2, [sp, #12]
 8012466:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801246a:	9305      	str	r3, [sp, #20]
 801246c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8012524 <_svfiprintf_r+0x1e8>
 8012470:	2203      	movs	r2, #3
 8012472:	4650      	mov	r0, sl
 8012474:	7821      	ldrb	r1, [r4, #0]
 8012476:	f7fd fc80 	bl	800fd7a <memchr>
 801247a:	b138      	cbz	r0, 801248c <_svfiprintf_r+0x150>
 801247c:	2240      	movs	r2, #64	@ 0x40
 801247e:	9b04      	ldr	r3, [sp, #16]
 8012480:	eba0 000a 	sub.w	r0, r0, sl
 8012484:	4082      	lsls	r2, r0
 8012486:	4313      	orrs	r3, r2
 8012488:	3401      	adds	r4, #1
 801248a:	9304      	str	r3, [sp, #16]
 801248c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012490:	2206      	movs	r2, #6
 8012492:	4825      	ldr	r0, [pc, #148]	@ (8012528 <_svfiprintf_r+0x1ec>)
 8012494:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012498:	f7fd fc6f 	bl	800fd7a <memchr>
 801249c:	2800      	cmp	r0, #0
 801249e:	d036      	beq.n	801250e <_svfiprintf_r+0x1d2>
 80124a0:	4b22      	ldr	r3, [pc, #136]	@ (801252c <_svfiprintf_r+0x1f0>)
 80124a2:	bb1b      	cbnz	r3, 80124ec <_svfiprintf_r+0x1b0>
 80124a4:	9b03      	ldr	r3, [sp, #12]
 80124a6:	3307      	adds	r3, #7
 80124a8:	f023 0307 	bic.w	r3, r3, #7
 80124ac:	3308      	adds	r3, #8
 80124ae:	9303      	str	r3, [sp, #12]
 80124b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124b2:	4433      	add	r3, r6
 80124b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80124b6:	e76a      	b.n	801238e <_svfiprintf_r+0x52>
 80124b8:	460c      	mov	r4, r1
 80124ba:	2001      	movs	r0, #1
 80124bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80124c0:	e7a8      	b.n	8012414 <_svfiprintf_r+0xd8>
 80124c2:	2300      	movs	r3, #0
 80124c4:	f04f 0c0a 	mov.w	ip, #10
 80124c8:	4619      	mov	r1, r3
 80124ca:	3401      	adds	r4, #1
 80124cc:	9305      	str	r3, [sp, #20]
 80124ce:	4620      	mov	r0, r4
 80124d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124d4:	3a30      	subs	r2, #48	@ 0x30
 80124d6:	2a09      	cmp	r2, #9
 80124d8:	d903      	bls.n	80124e2 <_svfiprintf_r+0x1a6>
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d0c6      	beq.n	801246c <_svfiprintf_r+0x130>
 80124de:	9105      	str	r1, [sp, #20]
 80124e0:	e7c4      	b.n	801246c <_svfiprintf_r+0x130>
 80124e2:	4604      	mov	r4, r0
 80124e4:	2301      	movs	r3, #1
 80124e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80124ea:	e7f0      	b.n	80124ce <_svfiprintf_r+0x192>
 80124ec:	ab03      	add	r3, sp, #12
 80124ee:	9300      	str	r3, [sp, #0]
 80124f0:	462a      	mov	r2, r5
 80124f2:	4638      	mov	r0, r7
 80124f4:	4b0e      	ldr	r3, [pc, #56]	@ (8012530 <_svfiprintf_r+0x1f4>)
 80124f6:	a904      	add	r1, sp, #16
 80124f8:	f7fc fbc8 	bl	800ec8c <_printf_float>
 80124fc:	1c42      	adds	r2, r0, #1
 80124fe:	4606      	mov	r6, r0
 8012500:	d1d6      	bne.n	80124b0 <_svfiprintf_r+0x174>
 8012502:	89ab      	ldrh	r3, [r5, #12]
 8012504:	065b      	lsls	r3, r3, #25
 8012506:	f53f af2d 	bmi.w	8012364 <_svfiprintf_r+0x28>
 801250a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801250c:	e72c      	b.n	8012368 <_svfiprintf_r+0x2c>
 801250e:	ab03      	add	r3, sp, #12
 8012510:	9300      	str	r3, [sp, #0]
 8012512:	462a      	mov	r2, r5
 8012514:	4638      	mov	r0, r7
 8012516:	4b06      	ldr	r3, [pc, #24]	@ (8012530 <_svfiprintf_r+0x1f4>)
 8012518:	a904      	add	r1, sp, #16
 801251a:	f7fc fe55 	bl	800f1c8 <_printf_i>
 801251e:	e7ed      	b.n	80124fc <_svfiprintf_r+0x1c0>
 8012520:	08014a01 	.word	0x08014a01
 8012524:	08014a07 	.word	0x08014a07
 8012528:	08014a0b 	.word	0x08014a0b
 801252c:	0800ec8d 	.word	0x0800ec8d
 8012530:	08012285 	.word	0x08012285

08012534 <__sfputc_r>:
 8012534:	6893      	ldr	r3, [r2, #8]
 8012536:	b410      	push	{r4}
 8012538:	3b01      	subs	r3, #1
 801253a:	2b00      	cmp	r3, #0
 801253c:	6093      	str	r3, [r2, #8]
 801253e:	da07      	bge.n	8012550 <__sfputc_r+0x1c>
 8012540:	6994      	ldr	r4, [r2, #24]
 8012542:	42a3      	cmp	r3, r4
 8012544:	db01      	blt.n	801254a <__sfputc_r+0x16>
 8012546:	290a      	cmp	r1, #10
 8012548:	d102      	bne.n	8012550 <__sfputc_r+0x1c>
 801254a:	bc10      	pop	{r4}
 801254c:	f7fd bb01 	b.w	800fb52 <__swbuf_r>
 8012550:	6813      	ldr	r3, [r2, #0]
 8012552:	1c58      	adds	r0, r3, #1
 8012554:	6010      	str	r0, [r2, #0]
 8012556:	7019      	strb	r1, [r3, #0]
 8012558:	4608      	mov	r0, r1
 801255a:	bc10      	pop	{r4}
 801255c:	4770      	bx	lr

0801255e <__sfputs_r>:
 801255e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012560:	4606      	mov	r6, r0
 8012562:	460f      	mov	r7, r1
 8012564:	4614      	mov	r4, r2
 8012566:	18d5      	adds	r5, r2, r3
 8012568:	42ac      	cmp	r4, r5
 801256a:	d101      	bne.n	8012570 <__sfputs_r+0x12>
 801256c:	2000      	movs	r0, #0
 801256e:	e007      	b.n	8012580 <__sfputs_r+0x22>
 8012570:	463a      	mov	r2, r7
 8012572:	4630      	mov	r0, r6
 8012574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012578:	f7ff ffdc 	bl	8012534 <__sfputc_r>
 801257c:	1c43      	adds	r3, r0, #1
 801257e:	d1f3      	bne.n	8012568 <__sfputs_r+0xa>
 8012580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012584 <_vfiprintf_r>:
 8012584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012588:	460d      	mov	r5, r1
 801258a:	4614      	mov	r4, r2
 801258c:	4698      	mov	r8, r3
 801258e:	4606      	mov	r6, r0
 8012590:	b09d      	sub	sp, #116	@ 0x74
 8012592:	b118      	cbz	r0, 801259c <_vfiprintf_r+0x18>
 8012594:	6a03      	ldr	r3, [r0, #32]
 8012596:	b90b      	cbnz	r3, 801259c <_vfiprintf_r+0x18>
 8012598:	f7fd f9d2 	bl	800f940 <__sinit>
 801259c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801259e:	07d9      	lsls	r1, r3, #31
 80125a0:	d405      	bmi.n	80125ae <_vfiprintf_r+0x2a>
 80125a2:	89ab      	ldrh	r3, [r5, #12]
 80125a4:	059a      	lsls	r2, r3, #22
 80125a6:	d402      	bmi.n	80125ae <_vfiprintf_r+0x2a>
 80125a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125aa:	f7fd fbe4 	bl	800fd76 <__retarget_lock_acquire_recursive>
 80125ae:	89ab      	ldrh	r3, [r5, #12]
 80125b0:	071b      	lsls	r3, r3, #28
 80125b2:	d501      	bpl.n	80125b8 <_vfiprintf_r+0x34>
 80125b4:	692b      	ldr	r3, [r5, #16]
 80125b6:	b99b      	cbnz	r3, 80125e0 <_vfiprintf_r+0x5c>
 80125b8:	4629      	mov	r1, r5
 80125ba:	4630      	mov	r0, r6
 80125bc:	f7fd fb08 	bl	800fbd0 <__swsetup_r>
 80125c0:	b170      	cbz	r0, 80125e0 <_vfiprintf_r+0x5c>
 80125c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125c4:	07dc      	lsls	r4, r3, #31
 80125c6:	d504      	bpl.n	80125d2 <_vfiprintf_r+0x4e>
 80125c8:	f04f 30ff 	mov.w	r0, #4294967295
 80125cc:	b01d      	add	sp, #116	@ 0x74
 80125ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d2:	89ab      	ldrh	r3, [r5, #12]
 80125d4:	0598      	lsls	r0, r3, #22
 80125d6:	d4f7      	bmi.n	80125c8 <_vfiprintf_r+0x44>
 80125d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125da:	f7fd fbcd 	bl	800fd78 <__retarget_lock_release_recursive>
 80125de:	e7f3      	b.n	80125c8 <_vfiprintf_r+0x44>
 80125e0:	2300      	movs	r3, #0
 80125e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80125e4:	2320      	movs	r3, #32
 80125e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80125ea:	2330      	movs	r3, #48	@ 0x30
 80125ec:	f04f 0901 	mov.w	r9, #1
 80125f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80125f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80127a0 <_vfiprintf_r+0x21c>
 80125f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80125fc:	4623      	mov	r3, r4
 80125fe:	469a      	mov	sl, r3
 8012600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012604:	b10a      	cbz	r2, 801260a <_vfiprintf_r+0x86>
 8012606:	2a25      	cmp	r2, #37	@ 0x25
 8012608:	d1f9      	bne.n	80125fe <_vfiprintf_r+0x7a>
 801260a:	ebba 0b04 	subs.w	fp, sl, r4
 801260e:	d00b      	beq.n	8012628 <_vfiprintf_r+0xa4>
 8012610:	465b      	mov	r3, fp
 8012612:	4622      	mov	r2, r4
 8012614:	4629      	mov	r1, r5
 8012616:	4630      	mov	r0, r6
 8012618:	f7ff ffa1 	bl	801255e <__sfputs_r>
 801261c:	3001      	adds	r0, #1
 801261e:	f000 80a7 	beq.w	8012770 <_vfiprintf_r+0x1ec>
 8012622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012624:	445a      	add	r2, fp
 8012626:	9209      	str	r2, [sp, #36]	@ 0x24
 8012628:	f89a 3000 	ldrb.w	r3, [sl]
 801262c:	2b00      	cmp	r3, #0
 801262e:	f000 809f 	beq.w	8012770 <_vfiprintf_r+0x1ec>
 8012632:	2300      	movs	r3, #0
 8012634:	f04f 32ff 	mov.w	r2, #4294967295
 8012638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801263c:	f10a 0a01 	add.w	sl, sl, #1
 8012640:	9304      	str	r3, [sp, #16]
 8012642:	9307      	str	r3, [sp, #28]
 8012644:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012648:	931a      	str	r3, [sp, #104]	@ 0x68
 801264a:	4654      	mov	r4, sl
 801264c:	2205      	movs	r2, #5
 801264e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012652:	4853      	ldr	r0, [pc, #332]	@ (80127a0 <_vfiprintf_r+0x21c>)
 8012654:	f7fd fb91 	bl	800fd7a <memchr>
 8012658:	9a04      	ldr	r2, [sp, #16]
 801265a:	b9d8      	cbnz	r0, 8012694 <_vfiprintf_r+0x110>
 801265c:	06d1      	lsls	r1, r2, #27
 801265e:	bf44      	itt	mi
 8012660:	2320      	movmi	r3, #32
 8012662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012666:	0713      	lsls	r3, r2, #28
 8012668:	bf44      	itt	mi
 801266a:	232b      	movmi	r3, #43	@ 0x2b
 801266c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012670:	f89a 3000 	ldrb.w	r3, [sl]
 8012674:	2b2a      	cmp	r3, #42	@ 0x2a
 8012676:	d015      	beq.n	80126a4 <_vfiprintf_r+0x120>
 8012678:	4654      	mov	r4, sl
 801267a:	2000      	movs	r0, #0
 801267c:	f04f 0c0a 	mov.w	ip, #10
 8012680:	9a07      	ldr	r2, [sp, #28]
 8012682:	4621      	mov	r1, r4
 8012684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012688:	3b30      	subs	r3, #48	@ 0x30
 801268a:	2b09      	cmp	r3, #9
 801268c:	d94b      	bls.n	8012726 <_vfiprintf_r+0x1a2>
 801268e:	b1b0      	cbz	r0, 80126be <_vfiprintf_r+0x13a>
 8012690:	9207      	str	r2, [sp, #28]
 8012692:	e014      	b.n	80126be <_vfiprintf_r+0x13a>
 8012694:	eba0 0308 	sub.w	r3, r0, r8
 8012698:	fa09 f303 	lsl.w	r3, r9, r3
 801269c:	4313      	orrs	r3, r2
 801269e:	46a2      	mov	sl, r4
 80126a0:	9304      	str	r3, [sp, #16]
 80126a2:	e7d2      	b.n	801264a <_vfiprintf_r+0xc6>
 80126a4:	9b03      	ldr	r3, [sp, #12]
 80126a6:	1d19      	adds	r1, r3, #4
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	9103      	str	r1, [sp, #12]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	bfbb      	ittet	lt
 80126b0:	425b      	neglt	r3, r3
 80126b2:	f042 0202 	orrlt.w	r2, r2, #2
 80126b6:	9307      	strge	r3, [sp, #28]
 80126b8:	9307      	strlt	r3, [sp, #28]
 80126ba:	bfb8      	it	lt
 80126bc:	9204      	strlt	r2, [sp, #16]
 80126be:	7823      	ldrb	r3, [r4, #0]
 80126c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80126c2:	d10a      	bne.n	80126da <_vfiprintf_r+0x156>
 80126c4:	7863      	ldrb	r3, [r4, #1]
 80126c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80126c8:	d132      	bne.n	8012730 <_vfiprintf_r+0x1ac>
 80126ca:	9b03      	ldr	r3, [sp, #12]
 80126cc:	3402      	adds	r4, #2
 80126ce:	1d1a      	adds	r2, r3, #4
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	9203      	str	r2, [sp, #12]
 80126d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80126d8:	9305      	str	r3, [sp, #20]
 80126da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80127a4 <_vfiprintf_r+0x220>
 80126de:	2203      	movs	r2, #3
 80126e0:	4650      	mov	r0, sl
 80126e2:	7821      	ldrb	r1, [r4, #0]
 80126e4:	f7fd fb49 	bl	800fd7a <memchr>
 80126e8:	b138      	cbz	r0, 80126fa <_vfiprintf_r+0x176>
 80126ea:	2240      	movs	r2, #64	@ 0x40
 80126ec:	9b04      	ldr	r3, [sp, #16]
 80126ee:	eba0 000a 	sub.w	r0, r0, sl
 80126f2:	4082      	lsls	r2, r0
 80126f4:	4313      	orrs	r3, r2
 80126f6:	3401      	adds	r4, #1
 80126f8:	9304      	str	r3, [sp, #16]
 80126fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126fe:	2206      	movs	r2, #6
 8012700:	4829      	ldr	r0, [pc, #164]	@ (80127a8 <_vfiprintf_r+0x224>)
 8012702:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012706:	f7fd fb38 	bl	800fd7a <memchr>
 801270a:	2800      	cmp	r0, #0
 801270c:	d03f      	beq.n	801278e <_vfiprintf_r+0x20a>
 801270e:	4b27      	ldr	r3, [pc, #156]	@ (80127ac <_vfiprintf_r+0x228>)
 8012710:	bb1b      	cbnz	r3, 801275a <_vfiprintf_r+0x1d6>
 8012712:	9b03      	ldr	r3, [sp, #12]
 8012714:	3307      	adds	r3, #7
 8012716:	f023 0307 	bic.w	r3, r3, #7
 801271a:	3308      	adds	r3, #8
 801271c:	9303      	str	r3, [sp, #12]
 801271e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012720:	443b      	add	r3, r7
 8012722:	9309      	str	r3, [sp, #36]	@ 0x24
 8012724:	e76a      	b.n	80125fc <_vfiprintf_r+0x78>
 8012726:	460c      	mov	r4, r1
 8012728:	2001      	movs	r0, #1
 801272a:	fb0c 3202 	mla	r2, ip, r2, r3
 801272e:	e7a8      	b.n	8012682 <_vfiprintf_r+0xfe>
 8012730:	2300      	movs	r3, #0
 8012732:	f04f 0c0a 	mov.w	ip, #10
 8012736:	4619      	mov	r1, r3
 8012738:	3401      	adds	r4, #1
 801273a:	9305      	str	r3, [sp, #20]
 801273c:	4620      	mov	r0, r4
 801273e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012742:	3a30      	subs	r2, #48	@ 0x30
 8012744:	2a09      	cmp	r2, #9
 8012746:	d903      	bls.n	8012750 <_vfiprintf_r+0x1cc>
 8012748:	2b00      	cmp	r3, #0
 801274a:	d0c6      	beq.n	80126da <_vfiprintf_r+0x156>
 801274c:	9105      	str	r1, [sp, #20]
 801274e:	e7c4      	b.n	80126da <_vfiprintf_r+0x156>
 8012750:	4604      	mov	r4, r0
 8012752:	2301      	movs	r3, #1
 8012754:	fb0c 2101 	mla	r1, ip, r1, r2
 8012758:	e7f0      	b.n	801273c <_vfiprintf_r+0x1b8>
 801275a:	ab03      	add	r3, sp, #12
 801275c:	9300      	str	r3, [sp, #0]
 801275e:	462a      	mov	r2, r5
 8012760:	4630      	mov	r0, r6
 8012762:	4b13      	ldr	r3, [pc, #76]	@ (80127b0 <_vfiprintf_r+0x22c>)
 8012764:	a904      	add	r1, sp, #16
 8012766:	f7fc fa91 	bl	800ec8c <_printf_float>
 801276a:	4607      	mov	r7, r0
 801276c:	1c78      	adds	r0, r7, #1
 801276e:	d1d6      	bne.n	801271e <_vfiprintf_r+0x19a>
 8012770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012772:	07d9      	lsls	r1, r3, #31
 8012774:	d405      	bmi.n	8012782 <_vfiprintf_r+0x1fe>
 8012776:	89ab      	ldrh	r3, [r5, #12]
 8012778:	059a      	lsls	r2, r3, #22
 801277a:	d402      	bmi.n	8012782 <_vfiprintf_r+0x1fe>
 801277c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801277e:	f7fd fafb 	bl	800fd78 <__retarget_lock_release_recursive>
 8012782:	89ab      	ldrh	r3, [r5, #12]
 8012784:	065b      	lsls	r3, r3, #25
 8012786:	f53f af1f 	bmi.w	80125c8 <_vfiprintf_r+0x44>
 801278a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801278c:	e71e      	b.n	80125cc <_vfiprintf_r+0x48>
 801278e:	ab03      	add	r3, sp, #12
 8012790:	9300      	str	r3, [sp, #0]
 8012792:	462a      	mov	r2, r5
 8012794:	4630      	mov	r0, r6
 8012796:	4b06      	ldr	r3, [pc, #24]	@ (80127b0 <_vfiprintf_r+0x22c>)
 8012798:	a904      	add	r1, sp, #16
 801279a:	f7fc fd15 	bl	800f1c8 <_printf_i>
 801279e:	e7e4      	b.n	801276a <_vfiprintf_r+0x1e6>
 80127a0:	08014a01 	.word	0x08014a01
 80127a4:	08014a07 	.word	0x08014a07
 80127a8:	08014a0b 	.word	0x08014a0b
 80127ac:	0800ec8d 	.word	0x0800ec8d
 80127b0:	0801255f 	.word	0x0801255f

080127b4 <__sflush_r>:
 80127b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80127b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ba:	0716      	lsls	r6, r2, #28
 80127bc:	4605      	mov	r5, r0
 80127be:	460c      	mov	r4, r1
 80127c0:	d454      	bmi.n	801286c <__sflush_r+0xb8>
 80127c2:	684b      	ldr	r3, [r1, #4]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	dc02      	bgt.n	80127ce <__sflush_r+0x1a>
 80127c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	dd48      	ble.n	8012860 <__sflush_r+0xac>
 80127ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80127d0:	2e00      	cmp	r6, #0
 80127d2:	d045      	beq.n	8012860 <__sflush_r+0xac>
 80127d4:	2300      	movs	r3, #0
 80127d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80127da:	682f      	ldr	r7, [r5, #0]
 80127dc:	6a21      	ldr	r1, [r4, #32]
 80127de:	602b      	str	r3, [r5, #0]
 80127e0:	d030      	beq.n	8012844 <__sflush_r+0x90>
 80127e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	0759      	lsls	r1, r3, #29
 80127e8:	d505      	bpl.n	80127f6 <__sflush_r+0x42>
 80127ea:	6863      	ldr	r3, [r4, #4]
 80127ec:	1ad2      	subs	r2, r2, r3
 80127ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80127f0:	b10b      	cbz	r3, 80127f6 <__sflush_r+0x42>
 80127f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80127f4:	1ad2      	subs	r2, r2, r3
 80127f6:	2300      	movs	r3, #0
 80127f8:	4628      	mov	r0, r5
 80127fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80127fc:	6a21      	ldr	r1, [r4, #32]
 80127fe:	47b0      	blx	r6
 8012800:	1c43      	adds	r3, r0, #1
 8012802:	89a3      	ldrh	r3, [r4, #12]
 8012804:	d106      	bne.n	8012814 <__sflush_r+0x60>
 8012806:	6829      	ldr	r1, [r5, #0]
 8012808:	291d      	cmp	r1, #29
 801280a:	d82b      	bhi.n	8012864 <__sflush_r+0xb0>
 801280c:	4a28      	ldr	r2, [pc, #160]	@ (80128b0 <__sflush_r+0xfc>)
 801280e:	410a      	asrs	r2, r1
 8012810:	07d6      	lsls	r6, r2, #31
 8012812:	d427      	bmi.n	8012864 <__sflush_r+0xb0>
 8012814:	2200      	movs	r2, #0
 8012816:	6062      	str	r2, [r4, #4]
 8012818:	6922      	ldr	r2, [r4, #16]
 801281a:	04d9      	lsls	r1, r3, #19
 801281c:	6022      	str	r2, [r4, #0]
 801281e:	d504      	bpl.n	801282a <__sflush_r+0x76>
 8012820:	1c42      	adds	r2, r0, #1
 8012822:	d101      	bne.n	8012828 <__sflush_r+0x74>
 8012824:	682b      	ldr	r3, [r5, #0]
 8012826:	b903      	cbnz	r3, 801282a <__sflush_r+0x76>
 8012828:	6560      	str	r0, [r4, #84]	@ 0x54
 801282a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801282c:	602f      	str	r7, [r5, #0]
 801282e:	b1b9      	cbz	r1, 8012860 <__sflush_r+0xac>
 8012830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012834:	4299      	cmp	r1, r3
 8012836:	d002      	beq.n	801283e <__sflush_r+0x8a>
 8012838:	4628      	mov	r0, r5
 801283a:	f7fe f901 	bl	8010a40 <_free_r>
 801283e:	2300      	movs	r3, #0
 8012840:	6363      	str	r3, [r4, #52]	@ 0x34
 8012842:	e00d      	b.n	8012860 <__sflush_r+0xac>
 8012844:	2301      	movs	r3, #1
 8012846:	4628      	mov	r0, r5
 8012848:	47b0      	blx	r6
 801284a:	4602      	mov	r2, r0
 801284c:	1c50      	adds	r0, r2, #1
 801284e:	d1c9      	bne.n	80127e4 <__sflush_r+0x30>
 8012850:	682b      	ldr	r3, [r5, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d0c6      	beq.n	80127e4 <__sflush_r+0x30>
 8012856:	2b1d      	cmp	r3, #29
 8012858:	d001      	beq.n	801285e <__sflush_r+0xaa>
 801285a:	2b16      	cmp	r3, #22
 801285c:	d11d      	bne.n	801289a <__sflush_r+0xe6>
 801285e:	602f      	str	r7, [r5, #0]
 8012860:	2000      	movs	r0, #0
 8012862:	e021      	b.n	80128a8 <__sflush_r+0xf4>
 8012864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012868:	b21b      	sxth	r3, r3
 801286a:	e01a      	b.n	80128a2 <__sflush_r+0xee>
 801286c:	690f      	ldr	r7, [r1, #16]
 801286e:	2f00      	cmp	r7, #0
 8012870:	d0f6      	beq.n	8012860 <__sflush_r+0xac>
 8012872:	0793      	lsls	r3, r2, #30
 8012874:	bf18      	it	ne
 8012876:	2300      	movne	r3, #0
 8012878:	680e      	ldr	r6, [r1, #0]
 801287a:	bf08      	it	eq
 801287c:	694b      	ldreq	r3, [r1, #20]
 801287e:	1bf6      	subs	r6, r6, r7
 8012880:	600f      	str	r7, [r1, #0]
 8012882:	608b      	str	r3, [r1, #8]
 8012884:	2e00      	cmp	r6, #0
 8012886:	ddeb      	ble.n	8012860 <__sflush_r+0xac>
 8012888:	4633      	mov	r3, r6
 801288a:	463a      	mov	r2, r7
 801288c:	4628      	mov	r0, r5
 801288e:	6a21      	ldr	r1, [r4, #32]
 8012890:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8012894:	47e0      	blx	ip
 8012896:	2800      	cmp	r0, #0
 8012898:	dc07      	bgt.n	80128aa <__sflush_r+0xf6>
 801289a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801289e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128a2:	f04f 30ff 	mov.w	r0, #4294967295
 80128a6:	81a3      	strh	r3, [r4, #12]
 80128a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128aa:	4407      	add	r7, r0
 80128ac:	1a36      	subs	r6, r6, r0
 80128ae:	e7e9      	b.n	8012884 <__sflush_r+0xd0>
 80128b0:	dfbffffe 	.word	0xdfbffffe

080128b4 <_fflush_r>:
 80128b4:	b538      	push	{r3, r4, r5, lr}
 80128b6:	690b      	ldr	r3, [r1, #16]
 80128b8:	4605      	mov	r5, r0
 80128ba:	460c      	mov	r4, r1
 80128bc:	b913      	cbnz	r3, 80128c4 <_fflush_r+0x10>
 80128be:	2500      	movs	r5, #0
 80128c0:	4628      	mov	r0, r5
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	b118      	cbz	r0, 80128ce <_fflush_r+0x1a>
 80128c6:	6a03      	ldr	r3, [r0, #32]
 80128c8:	b90b      	cbnz	r3, 80128ce <_fflush_r+0x1a>
 80128ca:	f7fd f839 	bl	800f940 <__sinit>
 80128ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d0f3      	beq.n	80128be <_fflush_r+0xa>
 80128d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80128d8:	07d0      	lsls	r0, r2, #31
 80128da:	d404      	bmi.n	80128e6 <_fflush_r+0x32>
 80128dc:	0599      	lsls	r1, r3, #22
 80128de:	d402      	bmi.n	80128e6 <_fflush_r+0x32>
 80128e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128e2:	f7fd fa48 	bl	800fd76 <__retarget_lock_acquire_recursive>
 80128e6:	4628      	mov	r0, r5
 80128e8:	4621      	mov	r1, r4
 80128ea:	f7ff ff63 	bl	80127b4 <__sflush_r>
 80128ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80128f0:	4605      	mov	r5, r0
 80128f2:	07da      	lsls	r2, r3, #31
 80128f4:	d4e4      	bmi.n	80128c0 <_fflush_r+0xc>
 80128f6:	89a3      	ldrh	r3, [r4, #12]
 80128f8:	059b      	lsls	r3, r3, #22
 80128fa:	d4e1      	bmi.n	80128c0 <_fflush_r+0xc>
 80128fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128fe:	f7fd fa3b 	bl	800fd78 <__retarget_lock_release_recursive>
 8012902:	e7dd      	b.n	80128c0 <_fflush_r+0xc>

08012904 <__swhatbuf_r>:
 8012904:	b570      	push	{r4, r5, r6, lr}
 8012906:	460c      	mov	r4, r1
 8012908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801290c:	4615      	mov	r5, r2
 801290e:	2900      	cmp	r1, #0
 8012910:	461e      	mov	r6, r3
 8012912:	b096      	sub	sp, #88	@ 0x58
 8012914:	da0c      	bge.n	8012930 <__swhatbuf_r+0x2c>
 8012916:	89a3      	ldrh	r3, [r4, #12]
 8012918:	2100      	movs	r1, #0
 801291a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801291e:	bf14      	ite	ne
 8012920:	2340      	movne	r3, #64	@ 0x40
 8012922:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012926:	2000      	movs	r0, #0
 8012928:	6031      	str	r1, [r6, #0]
 801292a:	602b      	str	r3, [r5, #0]
 801292c:	b016      	add	sp, #88	@ 0x58
 801292e:	bd70      	pop	{r4, r5, r6, pc}
 8012930:	466a      	mov	r2, sp
 8012932:	f000 f875 	bl	8012a20 <_fstat_r>
 8012936:	2800      	cmp	r0, #0
 8012938:	dbed      	blt.n	8012916 <__swhatbuf_r+0x12>
 801293a:	9901      	ldr	r1, [sp, #4]
 801293c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012940:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012944:	4259      	negs	r1, r3
 8012946:	4159      	adcs	r1, r3
 8012948:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801294c:	e7eb      	b.n	8012926 <__swhatbuf_r+0x22>

0801294e <__smakebuf_r>:
 801294e:	898b      	ldrh	r3, [r1, #12]
 8012950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012952:	079d      	lsls	r5, r3, #30
 8012954:	4606      	mov	r6, r0
 8012956:	460c      	mov	r4, r1
 8012958:	d507      	bpl.n	801296a <__smakebuf_r+0x1c>
 801295a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801295e:	6023      	str	r3, [r4, #0]
 8012960:	6123      	str	r3, [r4, #16]
 8012962:	2301      	movs	r3, #1
 8012964:	6163      	str	r3, [r4, #20]
 8012966:	b003      	add	sp, #12
 8012968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801296a:	466a      	mov	r2, sp
 801296c:	ab01      	add	r3, sp, #4
 801296e:	f7ff ffc9 	bl	8012904 <__swhatbuf_r>
 8012972:	9f00      	ldr	r7, [sp, #0]
 8012974:	4605      	mov	r5, r0
 8012976:	4639      	mov	r1, r7
 8012978:	4630      	mov	r0, r6
 801297a:	f7fe f8d3 	bl	8010b24 <_malloc_r>
 801297e:	b948      	cbnz	r0, 8012994 <__smakebuf_r+0x46>
 8012980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012984:	059a      	lsls	r2, r3, #22
 8012986:	d4ee      	bmi.n	8012966 <__smakebuf_r+0x18>
 8012988:	f023 0303 	bic.w	r3, r3, #3
 801298c:	f043 0302 	orr.w	r3, r3, #2
 8012990:	81a3      	strh	r3, [r4, #12]
 8012992:	e7e2      	b.n	801295a <__smakebuf_r+0xc>
 8012994:	89a3      	ldrh	r3, [r4, #12]
 8012996:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801299a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801299e:	81a3      	strh	r3, [r4, #12]
 80129a0:	9b01      	ldr	r3, [sp, #4]
 80129a2:	6020      	str	r0, [r4, #0]
 80129a4:	b15b      	cbz	r3, 80129be <__smakebuf_r+0x70>
 80129a6:	4630      	mov	r0, r6
 80129a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129ac:	f000 f84a 	bl	8012a44 <_isatty_r>
 80129b0:	b128      	cbz	r0, 80129be <__smakebuf_r+0x70>
 80129b2:	89a3      	ldrh	r3, [r4, #12]
 80129b4:	f023 0303 	bic.w	r3, r3, #3
 80129b8:	f043 0301 	orr.w	r3, r3, #1
 80129bc:	81a3      	strh	r3, [r4, #12]
 80129be:	89a3      	ldrh	r3, [r4, #12]
 80129c0:	431d      	orrs	r5, r3
 80129c2:	81a5      	strh	r5, [r4, #12]
 80129c4:	e7cf      	b.n	8012966 <__smakebuf_r+0x18>

080129c6 <memmove>:
 80129c6:	4288      	cmp	r0, r1
 80129c8:	b510      	push	{r4, lr}
 80129ca:	eb01 0402 	add.w	r4, r1, r2
 80129ce:	d902      	bls.n	80129d6 <memmove+0x10>
 80129d0:	4284      	cmp	r4, r0
 80129d2:	4623      	mov	r3, r4
 80129d4:	d807      	bhi.n	80129e6 <memmove+0x20>
 80129d6:	1e43      	subs	r3, r0, #1
 80129d8:	42a1      	cmp	r1, r4
 80129da:	d008      	beq.n	80129ee <memmove+0x28>
 80129dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129e4:	e7f8      	b.n	80129d8 <memmove+0x12>
 80129e6:	4601      	mov	r1, r0
 80129e8:	4402      	add	r2, r0
 80129ea:	428a      	cmp	r2, r1
 80129ec:	d100      	bne.n	80129f0 <memmove+0x2a>
 80129ee:	bd10      	pop	{r4, pc}
 80129f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80129f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80129f8:	e7f7      	b.n	80129ea <memmove+0x24>

080129fa <strncmp>:
 80129fa:	b510      	push	{r4, lr}
 80129fc:	b16a      	cbz	r2, 8012a1a <strncmp+0x20>
 80129fe:	3901      	subs	r1, #1
 8012a00:	1884      	adds	r4, r0, r2
 8012a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d103      	bne.n	8012a16 <strncmp+0x1c>
 8012a0e:	42a0      	cmp	r0, r4
 8012a10:	d001      	beq.n	8012a16 <strncmp+0x1c>
 8012a12:	2a00      	cmp	r2, #0
 8012a14:	d1f5      	bne.n	8012a02 <strncmp+0x8>
 8012a16:	1ad0      	subs	r0, r2, r3
 8012a18:	bd10      	pop	{r4, pc}
 8012a1a:	4610      	mov	r0, r2
 8012a1c:	e7fc      	b.n	8012a18 <strncmp+0x1e>
	...

08012a20 <_fstat_r>:
 8012a20:	b538      	push	{r3, r4, r5, lr}
 8012a22:	2300      	movs	r3, #0
 8012a24:	4d06      	ldr	r5, [pc, #24]	@ (8012a40 <_fstat_r+0x20>)
 8012a26:	4604      	mov	r4, r0
 8012a28:	4608      	mov	r0, r1
 8012a2a:	4611      	mov	r1, r2
 8012a2c:	602b      	str	r3, [r5, #0]
 8012a2e:	f7f0 f9bb 	bl	8002da8 <_fstat>
 8012a32:	1c43      	adds	r3, r0, #1
 8012a34:	d102      	bne.n	8012a3c <_fstat_r+0x1c>
 8012a36:	682b      	ldr	r3, [r5, #0]
 8012a38:	b103      	cbz	r3, 8012a3c <_fstat_r+0x1c>
 8012a3a:	6023      	str	r3, [r4, #0]
 8012a3c:	bd38      	pop	{r3, r4, r5, pc}
 8012a3e:	bf00      	nop
 8012a40:	200008b8 	.word	0x200008b8

08012a44 <_isatty_r>:
 8012a44:	b538      	push	{r3, r4, r5, lr}
 8012a46:	2300      	movs	r3, #0
 8012a48:	4d05      	ldr	r5, [pc, #20]	@ (8012a60 <_isatty_r+0x1c>)
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	4608      	mov	r0, r1
 8012a4e:	602b      	str	r3, [r5, #0]
 8012a50:	f7f0 f9b9 	bl	8002dc6 <_isatty>
 8012a54:	1c43      	adds	r3, r0, #1
 8012a56:	d102      	bne.n	8012a5e <_isatty_r+0x1a>
 8012a58:	682b      	ldr	r3, [r5, #0]
 8012a5a:	b103      	cbz	r3, 8012a5e <_isatty_r+0x1a>
 8012a5c:	6023      	str	r3, [r4, #0]
 8012a5e:	bd38      	pop	{r3, r4, r5, pc}
 8012a60:	200008b8 	.word	0x200008b8

08012a64 <_sbrk_r>:
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	2300      	movs	r3, #0
 8012a68:	4d05      	ldr	r5, [pc, #20]	@ (8012a80 <_sbrk_r+0x1c>)
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	4608      	mov	r0, r1
 8012a6e:	602b      	str	r3, [r5, #0]
 8012a70:	f7f0 f9c0 	bl	8002df4 <_sbrk>
 8012a74:	1c43      	adds	r3, r0, #1
 8012a76:	d102      	bne.n	8012a7e <_sbrk_r+0x1a>
 8012a78:	682b      	ldr	r3, [r5, #0]
 8012a7a:	b103      	cbz	r3, 8012a7e <_sbrk_r+0x1a>
 8012a7c:	6023      	str	r3, [r4, #0]
 8012a7e:	bd38      	pop	{r3, r4, r5, pc}
 8012a80:	200008b8 	.word	0x200008b8

08012a84 <memcpy>:
 8012a84:	440a      	add	r2, r1
 8012a86:	4291      	cmp	r1, r2
 8012a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a8c:	d100      	bne.n	8012a90 <memcpy+0xc>
 8012a8e:	4770      	bx	lr
 8012a90:	b510      	push	{r4, lr}
 8012a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a96:	4291      	cmp	r1, r2
 8012a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a9c:	d1f9      	bne.n	8012a92 <memcpy+0xe>
 8012a9e:	bd10      	pop	{r4, pc}

08012aa0 <nan>:
 8012aa0:	2000      	movs	r0, #0
 8012aa2:	4901      	ldr	r1, [pc, #4]	@ (8012aa8 <nan+0x8>)
 8012aa4:	4770      	bx	lr
 8012aa6:	bf00      	nop
 8012aa8:	7ff80000 	.word	0x7ff80000

08012aac <__assert_func>:
 8012aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012aae:	4614      	mov	r4, r2
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	4b09      	ldr	r3, [pc, #36]	@ (8012ad8 <__assert_func+0x2c>)
 8012ab4:	4605      	mov	r5, r0
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	68d8      	ldr	r0, [r3, #12]
 8012aba:	b954      	cbnz	r4, 8012ad2 <__assert_func+0x26>
 8012abc:	4b07      	ldr	r3, [pc, #28]	@ (8012adc <__assert_func+0x30>)
 8012abe:	461c      	mov	r4, r3
 8012ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ac4:	9100      	str	r1, [sp, #0]
 8012ac6:	462b      	mov	r3, r5
 8012ac8:	4905      	ldr	r1, [pc, #20]	@ (8012ae0 <__assert_func+0x34>)
 8012aca:	f000 fba7 	bl	801321c <fiprintf>
 8012ace:	f000 fbb7 	bl	8013240 <abort>
 8012ad2:	4b04      	ldr	r3, [pc, #16]	@ (8012ae4 <__assert_func+0x38>)
 8012ad4:	e7f4      	b.n	8012ac0 <__assert_func+0x14>
 8012ad6:	bf00      	nop
 8012ad8:	200001a4 	.word	0x200001a4
 8012adc:	08014a55 	.word	0x08014a55
 8012ae0:	08014a27 	.word	0x08014a27
 8012ae4:	08014a1a 	.word	0x08014a1a

08012ae8 <_calloc_r>:
 8012ae8:	b570      	push	{r4, r5, r6, lr}
 8012aea:	fba1 5402 	umull	r5, r4, r1, r2
 8012aee:	b93c      	cbnz	r4, 8012b00 <_calloc_r+0x18>
 8012af0:	4629      	mov	r1, r5
 8012af2:	f7fe f817 	bl	8010b24 <_malloc_r>
 8012af6:	4606      	mov	r6, r0
 8012af8:	b928      	cbnz	r0, 8012b06 <_calloc_r+0x1e>
 8012afa:	2600      	movs	r6, #0
 8012afc:	4630      	mov	r0, r6
 8012afe:	bd70      	pop	{r4, r5, r6, pc}
 8012b00:	220c      	movs	r2, #12
 8012b02:	6002      	str	r2, [r0, #0]
 8012b04:	e7f9      	b.n	8012afa <_calloc_r+0x12>
 8012b06:	462a      	mov	r2, r5
 8012b08:	4621      	mov	r1, r4
 8012b0a:	f7fd f8b7 	bl	800fc7c <memset>
 8012b0e:	e7f5      	b.n	8012afc <_calloc_r+0x14>

08012b10 <rshift>:
 8012b10:	6903      	ldr	r3, [r0, #16]
 8012b12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012b1a:	f100 0414 	add.w	r4, r0, #20
 8012b1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012b22:	dd46      	ble.n	8012bb2 <rshift+0xa2>
 8012b24:	f011 011f 	ands.w	r1, r1, #31
 8012b28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012b2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012b30:	d10c      	bne.n	8012b4c <rshift+0x3c>
 8012b32:	4629      	mov	r1, r5
 8012b34:	f100 0710 	add.w	r7, r0, #16
 8012b38:	42b1      	cmp	r1, r6
 8012b3a:	d335      	bcc.n	8012ba8 <rshift+0x98>
 8012b3c:	1a9b      	subs	r3, r3, r2
 8012b3e:	009b      	lsls	r3, r3, #2
 8012b40:	1eea      	subs	r2, r5, #3
 8012b42:	4296      	cmp	r6, r2
 8012b44:	bf38      	it	cc
 8012b46:	2300      	movcc	r3, #0
 8012b48:	4423      	add	r3, r4
 8012b4a:	e015      	b.n	8012b78 <rshift+0x68>
 8012b4c:	46a1      	mov	r9, r4
 8012b4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012b52:	f1c1 0820 	rsb	r8, r1, #32
 8012b56:	40cf      	lsrs	r7, r1
 8012b58:	f105 0e04 	add.w	lr, r5, #4
 8012b5c:	4576      	cmp	r6, lr
 8012b5e:	46f4      	mov	ip, lr
 8012b60:	d816      	bhi.n	8012b90 <rshift+0x80>
 8012b62:	1a9a      	subs	r2, r3, r2
 8012b64:	0092      	lsls	r2, r2, #2
 8012b66:	3a04      	subs	r2, #4
 8012b68:	3501      	adds	r5, #1
 8012b6a:	42ae      	cmp	r6, r5
 8012b6c:	bf38      	it	cc
 8012b6e:	2200      	movcc	r2, #0
 8012b70:	18a3      	adds	r3, r4, r2
 8012b72:	50a7      	str	r7, [r4, r2]
 8012b74:	b107      	cbz	r7, 8012b78 <rshift+0x68>
 8012b76:	3304      	adds	r3, #4
 8012b78:	42a3      	cmp	r3, r4
 8012b7a:	eba3 0204 	sub.w	r2, r3, r4
 8012b7e:	bf08      	it	eq
 8012b80:	2300      	moveq	r3, #0
 8012b82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012b86:	6102      	str	r2, [r0, #16]
 8012b88:	bf08      	it	eq
 8012b8a:	6143      	streq	r3, [r0, #20]
 8012b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b90:	f8dc c000 	ldr.w	ip, [ip]
 8012b94:	fa0c fc08 	lsl.w	ip, ip, r8
 8012b98:	ea4c 0707 	orr.w	r7, ip, r7
 8012b9c:	f849 7b04 	str.w	r7, [r9], #4
 8012ba0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012ba4:	40cf      	lsrs	r7, r1
 8012ba6:	e7d9      	b.n	8012b5c <rshift+0x4c>
 8012ba8:	f851 cb04 	ldr.w	ip, [r1], #4
 8012bac:	f847 cf04 	str.w	ip, [r7, #4]!
 8012bb0:	e7c2      	b.n	8012b38 <rshift+0x28>
 8012bb2:	4623      	mov	r3, r4
 8012bb4:	e7e0      	b.n	8012b78 <rshift+0x68>

08012bb6 <__hexdig_fun>:
 8012bb6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012bba:	2b09      	cmp	r3, #9
 8012bbc:	d802      	bhi.n	8012bc4 <__hexdig_fun+0xe>
 8012bbe:	3820      	subs	r0, #32
 8012bc0:	b2c0      	uxtb	r0, r0
 8012bc2:	4770      	bx	lr
 8012bc4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012bc8:	2b05      	cmp	r3, #5
 8012bca:	d801      	bhi.n	8012bd0 <__hexdig_fun+0x1a>
 8012bcc:	3847      	subs	r0, #71	@ 0x47
 8012bce:	e7f7      	b.n	8012bc0 <__hexdig_fun+0xa>
 8012bd0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012bd4:	2b05      	cmp	r3, #5
 8012bd6:	d801      	bhi.n	8012bdc <__hexdig_fun+0x26>
 8012bd8:	3827      	subs	r0, #39	@ 0x27
 8012bda:	e7f1      	b.n	8012bc0 <__hexdig_fun+0xa>
 8012bdc:	2000      	movs	r0, #0
 8012bde:	4770      	bx	lr

08012be0 <__gethex>:
 8012be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be4:	468a      	mov	sl, r1
 8012be6:	4690      	mov	r8, r2
 8012be8:	b085      	sub	sp, #20
 8012bea:	9302      	str	r3, [sp, #8]
 8012bec:	680b      	ldr	r3, [r1, #0]
 8012bee:	9001      	str	r0, [sp, #4]
 8012bf0:	1c9c      	adds	r4, r3, #2
 8012bf2:	46a1      	mov	r9, r4
 8012bf4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012bf8:	2830      	cmp	r0, #48	@ 0x30
 8012bfa:	d0fa      	beq.n	8012bf2 <__gethex+0x12>
 8012bfc:	eba9 0303 	sub.w	r3, r9, r3
 8012c00:	f1a3 0b02 	sub.w	fp, r3, #2
 8012c04:	f7ff ffd7 	bl	8012bb6 <__hexdig_fun>
 8012c08:	4605      	mov	r5, r0
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	d168      	bne.n	8012ce0 <__gethex+0x100>
 8012c0e:	2201      	movs	r2, #1
 8012c10:	4648      	mov	r0, r9
 8012c12:	499f      	ldr	r1, [pc, #636]	@ (8012e90 <__gethex+0x2b0>)
 8012c14:	f7ff fef1 	bl	80129fa <strncmp>
 8012c18:	4607      	mov	r7, r0
 8012c1a:	2800      	cmp	r0, #0
 8012c1c:	d167      	bne.n	8012cee <__gethex+0x10e>
 8012c1e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012c22:	4626      	mov	r6, r4
 8012c24:	f7ff ffc7 	bl	8012bb6 <__hexdig_fun>
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	d062      	beq.n	8012cf2 <__gethex+0x112>
 8012c2c:	4623      	mov	r3, r4
 8012c2e:	7818      	ldrb	r0, [r3, #0]
 8012c30:	4699      	mov	r9, r3
 8012c32:	2830      	cmp	r0, #48	@ 0x30
 8012c34:	f103 0301 	add.w	r3, r3, #1
 8012c38:	d0f9      	beq.n	8012c2e <__gethex+0x4e>
 8012c3a:	f7ff ffbc 	bl	8012bb6 <__hexdig_fun>
 8012c3e:	fab0 f580 	clz	r5, r0
 8012c42:	f04f 0b01 	mov.w	fp, #1
 8012c46:	096d      	lsrs	r5, r5, #5
 8012c48:	464a      	mov	r2, r9
 8012c4a:	4616      	mov	r6, r2
 8012c4c:	7830      	ldrb	r0, [r6, #0]
 8012c4e:	3201      	adds	r2, #1
 8012c50:	f7ff ffb1 	bl	8012bb6 <__hexdig_fun>
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d1f8      	bne.n	8012c4a <__gethex+0x6a>
 8012c58:	2201      	movs	r2, #1
 8012c5a:	4630      	mov	r0, r6
 8012c5c:	498c      	ldr	r1, [pc, #560]	@ (8012e90 <__gethex+0x2b0>)
 8012c5e:	f7ff fecc 	bl	80129fa <strncmp>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	d13f      	bne.n	8012ce6 <__gethex+0x106>
 8012c66:	b944      	cbnz	r4, 8012c7a <__gethex+0x9a>
 8012c68:	1c74      	adds	r4, r6, #1
 8012c6a:	4622      	mov	r2, r4
 8012c6c:	4616      	mov	r6, r2
 8012c6e:	7830      	ldrb	r0, [r6, #0]
 8012c70:	3201      	adds	r2, #1
 8012c72:	f7ff ffa0 	bl	8012bb6 <__hexdig_fun>
 8012c76:	2800      	cmp	r0, #0
 8012c78:	d1f8      	bne.n	8012c6c <__gethex+0x8c>
 8012c7a:	1ba4      	subs	r4, r4, r6
 8012c7c:	00a7      	lsls	r7, r4, #2
 8012c7e:	7833      	ldrb	r3, [r6, #0]
 8012c80:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012c84:	2b50      	cmp	r3, #80	@ 0x50
 8012c86:	d13e      	bne.n	8012d06 <__gethex+0x126>
 8012c88:	7873      	ldrb	r3, [r6, #1]
 8012c8a:	2b2b      	cmp	r3, #43	@ 0x2b
 8012c8c:	d033      	beq.n	8012cf6 <__gethex+0x116>
 8012c8e:	2b2d      	cmp	r3, #45	@ 0x2d
 8012c90:	d034      	beq.n	8012cfc <__gethex+0x11c>
 8012c92:	2400      	movs	r4, #0
 8012c94:	1c71      	adds	r1, r6, #1
 8012c96:	7808      	ldrb	r0, [r1, #0]
 8012c98:	f7ff ff8d 	bl	8012bb6 <__hexdig_fun>
 8012c9c:	1e43      	subs	r3, r0, #1
 8012c9e:	b2db      	uxtb	r3, r3
 8012ca0:	2b18      	cmp	r3, #24
 8012ca2:	d830      	bhi.n	8012d06 <__gethex+0x126>
 8012ca4:	f1a0 0210 	sub.w	r2, r0, #16
 8012ca8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012cac:	f7ff ff83 	bl	8012bb6 <__hexdig_fun>
 8012cb0:	f100 3cff 	add.w	ip, r0, #4294967295
 8012cb4:	fa5f fc8c 	uxtb.w	ip, ip
 8012cb8:	f1bc 0f18 	cmp.w	ip, #24
 8012cbc:	f04f 030a 	mov.w	r3, #10
 8012cc0:	d91e      	bls.n	8012d00 <__gethex+0x120>
 8012cc2:	b104      	cbz	r4, 8012cc6 <__gethex+0xe6>
 8012cc4:	4252      	negs	r2, r2
 8012cc6:	4417      	add	r7, r2
 8012cc8:	f8ca 1000 	str.w	r1, [sl]
 8012ccc:	b1ed      	cbz	r5, 8012d0a <__gethex+0x12a>
 8012cce:	f1bb 0f00 	cmp.w	fp, #0
 8012cd2:	bf0c      	ite	eq
 8012cd4:	2506      	moveq	r5, #6
 8012cd6:	2500      	movne	r5, #0
 8012cd8:	4628      	mov	r0, r5
 8012cda:	b005      	add	sp, #20
 8012cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce0:	2500      	movs	r5, #0
 8012ce2:	462c      	mov	r4, r5
 8012ce4:	e7b0      	b.n	8012c48 <__gethex+0x68>
 8012ce6:	2c00      	cmp	r4, #0
 8012ce8:	d1c7      	bne.n	8012c7a <__gethex+0x9a>
 8012cea:	4627      	mov	r7, r4
 8012cec:	e7c7      	b.n	8012c7e <__gethex+0x9e>
 8012cee:	464e      	mov	r6, r9
 8012cf0:	462f      	mov	r7, r5
 8012cf2:	2501      	movs	r5, #1
 8012cf4:	e7c3      	b.n	8012c7e <__gethex+0x9e>
 8012cf6:	2400      	movs	r4, #0
 8012cf8:	1cb1      	adds	r1, r6, #2
 8012cfa:	e7cc      	b.n	8012c96 <__gethex+0xb6>
 8012cfc:	2401      	movs	r4, #1
 8012cfe:	e7fb      	b.n	8012cf8 <__gethex+0x118>
 8012d00:	fb03 0002 	mla	r0, r3, r2, r0
 8012d04:	e7ce      	b.n	8012ca4 <__gethex+0xc4>
 8012d06:	4631      	mov	r1, r6
 8012d08:	e7de      	b.n	8012cc8 <__gethex+0xe8>
 8012d0a:	4629      	mov	r1, r5
 8012d0c:	eba6 0309 	sub.w	r3, r6, r9
 8012d10:	3b01      	subs	r3, #1
 8012d12:	2b07      	cmp	r3, #7
 8012d14:	dc0a      	bgt.n	8012d2c <__gethex+0x14c>
 8012d16:	9801      	ldr	r0, [sp, #4]
 8012d18:	f7fd ff90 	bl	8010c3c <_Balloc>
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	b940      	cbnz	r0, 8012d32 <__gethex+0x152>
 8012d20:	4602      	mov	r2, r0
 8012d22:	21e4      	movs	r1, #228	@ 0xe4
 8012d24:	4b5b      	ldr	r3, [pc, #364]	@ (8012e94 <__gethex+0x2b4>)
 8012d26:	485c      	ldr	r0, [pc, #368]	@ (8012e98 <__gethex+0x2b8>)
 8012d28:	f7ff fec0 	bl	8012aac <__assert_func>
 8012d2c:	3101      	adds	r1, #1
 8012d2e:	105b      	asrs	r3, r3, #1
 8012d30:	e7ef      	b.n	8012d12 <__gethex+0x132>
 8012d32:	2300      	movs	r3, #0
 8012d34:	f100 0a14 	add.w	sl, r0, #20
 8012d38:	4655      	mov	r5, sl
 8012d3a:	469b      	mov	fp, r3
 8012d3c:	45b1      	cmp	r9, r6
 8012d3e:	d337      	bcc.n	8012db0 <__gethex+0x1d0>
 8012d40:	f845 bb04 	str.w	fp, [r5], #4
 8012d44:	eba5 050a 	sub.w	r5, r5, sl
 8012d48:	10ad      	asrs	r5, r5, #2
 8012d4a:	6125      	str	r5, [r4, #16]
 8012d4c:	4658      	mov	r0, fp
 8012d4e:	f7fe f867 	bl	8010e20 <__hi0bits>
 8012d52:	016d      	lsls	r5, r5, #5
 8012d54:	f8d8 6000 	ldr.w	r6, [r8]
 8012d58:	1a2d      	subs	r5, r5, r0
 8012d5a:	42b5      	cmp	r5, r6
 8012d5c:	dd54      	ble.n	8012e08 <__gethex+0x228>
 8012d5e:	1bad      	subs	r5, r5, r6
 8012d60:	4629      	mov	r1, r5
 8012d62:	4620      	mov	r0, r4
 8012d64:	f7fe fbef 	bl	8011546 <__any_on>
 8012d68:	4681      	mov	r9, r0
 8012d6a:	b178      	cbz	r0, 8012d8c <__gethex+0x1ac>
 8012d6c:	f04f 0901 	mov.w	r9, #1
 8012d70:	1e6b      	subs	r3, r5, #1
 8012d72:	1159      	asrs	r1, r3, #5
 8012d74:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012d78:	f003 021f 	and.w	r2, r3, #31
 8012d7c:	fa09 f202 	lsl.w	r2, r9, r2
 8012d80:	420a      	tst	r2, r1
 8012d82:	d003      	beq.n	8012d8c <__gethex+0x1ac>
 8012d84:	454b      	cmp	r3, r9
 8012d86:	dc36      	bgt.n	8012df6 <__gethex+0x216>
 8012d88:	f04f 0902 	mov.w	r9, #2
 8012d8c:	4629      	mov	r1, r5
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f7ff febe 	bl	8012b10 <rshift>
 8012d94:	442f      	add	r7, r5
 8012d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012d9a:	42bb      	cmp	r3, r7
 8012d9c:	da42      	bge.n	8012e24 <__gethex+0x244>
 8012d9e:	4621      	mov	r1, r4
 8012da0:	9801      	ldr	r0, [sp, #4]
 8012da2:	f7fd ff8b 	bl	8010cbc <_Bfree>
 8012da6:	2300      	movs	r3, #0
 8012da8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012daa:	25a3      	movs	r5, #163	@ 0xa3
 8012dac:	6013      	str	r3, [r2, #0]
 8012dae:	e793      	b.n	8012cd8 <__gethex+0xf8>
 8012db0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012db4:	2a2e      	cmp	r2, #46	@ 0x2e
 8012db6:	d012      	beq.n	8012dde <__gethex+0x1fe>
 8012db8:	2b20      	cmp	r3, #32
 8012dba:	d104      	bne.n	8012dc6 <__gethex+0x1e6>
 8012dbc:	f845 bb04 	str.w	fp, [r5], #4
 8012dc0:	f04f 0b00 	mov.w	fp, #0
 8012dc4:	465b      	mov	r3, fp
 8012dc6:	7830      	ldrb	r0, [r6, #0]
 8012dc8:	9303      	str	r3, [sp, #12]
 8012dca:	f7ff fef4 	bl	8012bb6 <__hexdig_fun>
 8012dce:	9b03      	ldr	r3, [sp, #12]
 8012dd0:	f000 000f 	and.w	r0, r0, #15
 8012dd4:	4098      	lsls	r0, r3
 8012dd6:	ea4b 0b00 	orr.w	fp, fp, r0
 8012dda:	3304      	adds	r3, #4
 8012ddc:	e7ae      	b.n	8012d3c <__gethex+0x15c>
 8012dde:	45b1      	cmp	r9, r6
 8012de0:	d8ea      	bhi.n	8012db8 <__gethex+0x1d8>
 8012de2:	2201      	movs	r2, #1
 8012de4:	4630      	mov	r0, r6
 8012de6:	492a      	ldr	r1, [pc, #168]	@ (8012e90 <__gethex+0x2b0>)
 8012de8:	9303      	str	r3, [sp, #12]
 8012dea:	f7ff fe06 	bl	80129fa <strncmp>
 8012dee:	9b03      	ldr	r3, [sp, #12]
 8012df0:	2800      	cmp	r0, #0
 8012df2:	d1e1      	bne.n	8012db8 <__gethex+0x1d8>
 8012df4:	e7a2      	b.n	8012d3c <__gethex+0x15c>
 8012df6:	4620      	mov	r0, r4
 8012df8:	1ea9      	subs	r1, r5, #2
 8012dfa:	f7fe fba4 	bl	8011546 <__any_on>
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	d0c2      	beq.n	8012d88 <__gethex+0x1a8>
 8012e02:	f04f 0903 	mov.w	r9, #3
 8012e06:	e7c1      	b.n	8012d8c <__gethex+0x1ac>
 8012e08:	da09      	bge.n	8012e1e <__gethex+0x23e>
 8012e0a:	1b75      	subs	r5, r6, r5
 8012e0c:	4621      	mov	r1, r4
 8012e0e:	462a      	mov	r2, r5
 8012e10:	9801      	ldr	r0, [sp, #4]
 8012e12:	f7fe f969 	bl	80110e8 <__lshift>
 8012e16:	4604      	mov	r4, r0
 8012e18:	1b7f      	subs	r7, r7, r5
 8012e1a:	f100 0a14 	add.w	sl, r0, #20
 8012e1e:	f04f 0900 	mov.w	r9, #0
 8012e22:	e7b8      	b.n	8012d96 <__gethex+0x1b6>
 8012e24:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012e28:	42bd      	cmp	r5, r7
 8012e2a:	dd6f      	ble.n	8012f0c <__gethex+0x32c>
 8012e2c:	1bed      	subs	r5, r5, r7
 8012e2e:	42ae      	cmp	r6, r5
 8012e30:	dc34      	bgt.n	8012e9c <__gethex+0x2bc>
 8012e32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012e36:	2b02      	cmp	r3, #2
 8012e38:	d022      	beq.n	8012e80 <__gethex+0x2a0>
 8012e3a:	2b03      	cmp	r3, #3
 8012e3c:	d024      	beq.n	8012e88 <__gethex+0x2a8>
 8012e3e:	2b01      	cmp	r3, #1
 8012e40:	d115      	bne.n	8012e6e <__gethex+0x28e>
 8012e42:	42ae      	cmp	r6, r5
 8012e44:	d113      	bne.n	8012e6e <__gethex+0x28e>
 8012e46:	2e01      	cmp	r6, #1
 8012e48:	d10b      	bne.n	8012e62 <__gethex+0x282>
 8012e4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012e4e:	9a02      	ldr	r2, [sp, #8]
 8012e50:	2562      	movs	r5, #98	@ 0x62
 8012e52:	6013      	str	r3, [r2, #0]
 8012e54:	2301      	movs	r3, #1
 8012e56:	6123      	str	r3, [r4, #16]
 8012e58:	f8ca 3000 	str.w	r3, [sl]
 8012e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e5e:	601c      	str	r4, [r3, #0]
 8012e60:	e73a      	b.n	8012cd8 <__gethex+0xf8>
 8012e62:	4620      	mov	r0, r4
 8012e64:	1e71      	subs	r1, r6, #1
 8012e66:	f7fe fb6e 	bl	8011546 <__any_on>
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	d1ed      	bne.n	8012e4a <__gethex+0x26a>
 8012e6e:	4621      	mov	r1, r4
 8012e70:	9801      	ldr	r0, [sp, #4]
 8012e72:	f7fd ff23 	bl	8010cbc <_Bfree>
 8012e76:	2300      	movs	r3, #0
 8012e78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012e7a:	2550      	movs	r5, #80	@ 0x50
 8012e7c:	6013      	str	r3, [r2, #0]
 8012e7e:	e72b      	b.n	8012cd8 <__gethex+0xf8>
 8012e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d1f3      	bne.n	8012e6e <__gethex+0x28e>
 8012e86:	e7e0      	b.n	8012e4a <__gethex+0x26a>
 8012e88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d1dd      	bne.n	8012e4a <__gethex+0x26a>
 8012e8e:	e7ee      	b.n	8012e6e <__gethex+0x28e>
 8012e90:	080148a8 	.word	0x080148a8
 8012e94:	0801473b 	.word	0x0801473b
 8012e98:	08014a56 	.word	0x08014a56
 8012e9c:	1e6f      	subs	r7, r5, #1
 8012e9e:	f1b9 0f00 	cmp.w	r9, #0
 8012ea2:	d130      	bne.n	8012f06 <__gethex+0x326>
 8012ea4:	b127      	cbz	r7, 8012eb0 <__gethex+0x2d0>
 8012ea6:	4639      	mov	r1, r7
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	f7fe fb4c 	bl	8011546 <__any_on>
 8012eae:	4681      	mov	r9, r0
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	4629      	mov	r1, r5
 8012eb4:	1b76      	subs	r6, r6, r5
 8012eb6:	2502      	movs	r5, #2
 8012eb8:	117a      	asrs	r2, r7, #5
 8012eba:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012ebe:	f007 071f 	and.w	r7, r7, #31
 8012ec2:	40bb      	lsls	r3, r7
 8012ec4:	4213      	tst	r3, r2
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	bf18      	it	ne
 8012eca:	f049 0902 	orrne.w	r9, r9, #2
 8012ece:	f7ff fe1f 	bl	8012b10 <rshift>
 8012ed2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012ed6:	f1b9 0f00 	cmp.w	r9, #0
 8012eda:	d047      	beq.n	8012f6c <__gethex+0x38c>
 8012edc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012ee0:	2b02      	cmp	r3, #2
 8012ee2:	d015      	beq.n	8012f10 <__gethex+0x330>
 8012ee4:	2b03      	cmp	r3, #3
 8012ee6:	d017      	beq.n	8012f18 <__gethex+0x338>
 8012ee8:	2b01      	cmp	r3, #1
 8012eea:	d109      	bne.n	8012f00 <__gethex+0x320>
 8012eec:	f019 0f02 	tst.w	r9, #2
 8012ef0:	d006      	beq.n	8012f00 <__gethex+0x320>
 8012ef2:	f8da 3000 	ldr.w	r3, [sl]
 8012ef6:	ea49 0903 	orr.w	r9, r9, r3
 8012efa:	f019 0f01 	tst.w	r9, #1
 8012efe:	d10e      	bne.n	8012f1e <__gethex+0x33e>
 8012f00:	f045 0510 	orr.w	r5, r5, #16
 8012f04:	e032      	b.n	8012f6c <__gethex+0x38c>
 8012f06:	f04f 0901 	mov.w	r9, #1
 8012f0a:	e7d1      	b.n	8012eb0 <__gethex+0x2d0>
 8012f0c:	2501      	movs	r5, #1
 8012f0e:	e7e2      	b.n	8012ed6 <__gethex+0x2f6>
 8012f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f12:	f1c3 0301 	rsb	r3, r3, #1
 8012f16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d0f0      	beq.n	8012f00 <__gethex+0x320>
 8012f1e:	f04f 0c00 	mov.w	ip, #0
 8012f22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012f26:	f104 0314 	add.w	r3, r4, #20
 8012f2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012f2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012f32:	4618      	mov	r0, r3
 8012f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f38:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012f3c:	d01b      	beq.n	8012f76 <__gethex+0x396>
 8012f3e:	3201      	adds	r2, #1
 8012f40:	6002      	str	r2, [r0, #0]
 8012f42:	2d02      	cmp	r5, #2
 8012f44:	f104 0314 	add.w	r3, r4, #20
 8012f48:	d13c      	bne.n	8012fc4 <__gethex+0x3e4>
 8012f4a:	f8d8 2000 	ldr.w	r2, [r8]
 8012f4e:	3a01      	subs	r2, #1
 8012f50:	42b2      	cmp	r2, r6
 8012f52:	d109      	bne.n	8012f68 <__gethex+0x388>
 8012f54:	2201      	movs	r2, #1
 8012f56:	1171      	asrs	r1, r6, #5
 8012f58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012f5c:	f006 061f 	and.w	r6, r6, #31
 8012f60:	fa02 f606 	lsl.w	r6, r2, r6
 8012f64:	421e      	tst	r6, r3
 8012f66:	d13a      	bne.n	8012fde <__gethex+0x3fe>
 8012f68:	f045 0520 	orr.w	r5, r5, #32
 8012f6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f6e:	601c      	str	r4, [r3, #0]
 8012f70:	9b02      	ldr	r3, [sp, #8]
 8012f72:	601f      	str	r7, [r3, #0]
 8012f74:	e6b0      	b.n	8012cd8 <__gethex+0xf8>
 8012f76:	4299      	cmp	r1, r3
 8012f78:	f843 cc04 	str.w	ip, [r3, #-4]
 8012f7c:	d8d9      	bhi.n	8012f32 <__gethex+0x352>
 8012f7e:	68a3      	ldr	r3, [r4, #8]
 8012f80:	459b      	cmp	fp, r3
 8012f82:	db17      	blt.n	8012fb4 <__gethex+0x3d4>
 8012f84:	6861      	ldr	r1, [r4, #4]
 8012f86:	9801      	ldr	r0, [sp, #4]
 8012f88:	3101      	adds	r1, #1
 8012f8a:	f7fd fe57 	bl	8010c3c <_Balloc>
 8012f8e:	4681      	mov	r9, r0
 8012f90:	b918      	cbnz	r0, 8012f9a <__gethex+0x3ba>
 8012f92:	4602      	mov	r2, r0
 8012f94:	2184      	movs	r1, #132	@ 0x84
 8012f96:	4b19      	ldr	r3, [pc, #100]	@ (8012ffc <__gethex+0x41c>)
 8012f98:	e6c5      	b.n	8012d26 <__gethex+0x146>
 8012f9a:	6922      	ldr	r2, [r4, #16]
 8012f9c:	f104 010c 	add.w	r1, r4, #12
 8012fa0:	3202      	adds	r2, #2
 8012fa2:	0092      	lsls	r2, r2, #2
 8012fa4:	300c      	adds	r0, #12
 8012fa6:	f7ff fd6d 	bl	8012a84 <memcpy>
 8012faa:	4621      	mov	r1, r4
 8012fac:	9801      	ldr	r0, [sp, #4]
 8012fae:	f7fd fe85 	bl	8010cbc <_Bfree>
 8012fb2:	464c      	mov	r4, r9
 8012fb4:	6923      	ldr	r3, [r4, #16]
 8012fb6:	1c5a      	adds	r2, r3, #1
 8012fb8:	6122      	str	r2, [r4, #16]
 8012fba:	2201      	movs	r2, #1
 8012fbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012fc0:	615a      	str	r2, [r3, #20]
 8012fc2:	e7be      	b.n	8012f42 <__gethex+0x362>
 8012fc4:	6922      	ldr	r2, [r4, #16]
 8012fc6:	455a      	cmp	r2, fp
 8012fc8:	dd0b      	ble.n	8012fe2 <__gethex+0x402>
 8012fca:	2101      	movs	r1, #1
 8012fcc:	4620      	mov	r0, r4
 8012fce:	f7ff fd9f 	bl	8012b10 <rshift>
 8012fd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012fd6:	3701      	adds	r7, #1
 8012fd8:	42bb      	cmp	r3, r7
 8012fda:	f6ff aee0 	blt.w	8012d9e <__gethex+0x1be>
 8012fde:	2501      	movs	r5, #1
 8012fe0:	e7c2      	b.n	8012f68 <__gethex+0x388>
 8012fe2:	f016 061f 	ands.w	r6, r6, #31
 8012fe6:	d0fa      	beq.n	8012fde <__gethex+0x3fe>
 8012fe8:	4453      	add	r3, sl
 8012fea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012fee:	f7fd ff17 	bl	8010e20 <__hi0bits>
 8012ff2:	f1c6 0620 	rsb	r6, r6, #32
 8012ff6:	42b0      	cmp	r0, r6
 8012ff8:	dbe7      	blt.n	8012fca <__gethex+0x3ea>
 8012ffa:	e7f0      	b.n	8012fde <__gethex+0x3fe>
 8012ffc:	0801473b 	.word	0x0801473b

08013000 <L_shift>:
 8013000:	f1c2 0208 	rsb	r2, r2, #8
 8013004:	0092      	lsls	r2, r2, #2
 8013006:	b570      	push	{r4, r5, r6, lr}
 8013008:	f1c2 0620 	rsb	r6, r2, #32
 801300c:	6843      	ldr	r3, [r0, #4]
 801300e:	6804      	ldr	r4, [r0, #0]
 8013010:	fa03 f506 	lsl.w	r5, r3, r6
 8013014:	432c      	orrs	r4, r5
 8013016:	40d3      	lsrs	r3, r2
 8013018:	6004      	str	r4, [r0, #0]
 801301a:	f840 3f04 	str.w	r3, [r0, #4]!
 801301e:	4288      	cmp	r0, r1
 8013020:	d3f4      	bcc.n	801300c <L_shift+0xc>
 8013022:	bd70      	pop	{r4, r5, r6, pc}

08013024 <__match>:
 8013024:	b530      	push	{r4, r5, lr}
 8013026:	6803      	ldr	r3, [r0, #0]
 8013028:	3301      	adds	r3, #1
 801302a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801302e:	b914      	cbnz	r4, 8013036 <__match+0x12>
 8013030:	6003      	str	r3, [r0, #0]
 8013032:	2001      	movs	r0, #1
 8013034:	bd30      	pop	{r4, r5, pc}
 8013036:	f813 2b01 	ldrb.w	r2, [r3], #1
 801303a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801303e:	2d19      	cmp	r5, #25
 8013040:	bf98      	it	ls
 8013042:	3220      	addls	r2, #32
 8013044:	42a2      	cmp	r2, r4
 8013046:	d0f0      	beq.n	801302a <__match+0x6>
 8013048:	2000      	movs	r0, #0
 801304a:	e7f3      	b.n	8013034 <__match+0x10>

0801304c <__hexnan>:
 801304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013050:	2500      	movs	r5, #0
 8013052:	680b      	ldr	r3, [r1, #0]
 8013054:	4682      	mov	sl, r0
 8013056:	115e      	asrs	r6, r3, #5
 8013058:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801305c:	f013 031f 	ands.w	r3, r3, #31
 8013060:	bf18      	it	ne
 8013062:	3604      	addne	r6, #4
 8013064:	1f37      	subs	r7, r6, #4
 8013066:	4690      	mov	r8, r2
 8013068:	46b9      	mov	r9, r7
 801306a:	463c      	mov	r4, r7
 801306c:	46ab      	mov	fp, r5
 801306e:	b087      	sub	sp, #28
 8013070:	6801      	ldr	r1, [r0, #0]
 8013072:	9301      	str	r3, [sp, #4]
 8013074:	f846 5c04 	str.w	r5, [r6, #-4]
 8013078:	9502      	str	r5, [sp, #8]
 801307a:	784a      	ldrb	r2, [r1, #1]
 801307c:	1c4b      	adds	r3, r1, #1
 801307e:	9303      	str	r3, [sp, #12]
 8013080:	b342      	cbz	r2, 80130d4 <__hexnan+0x88>
 8013082:	4610      	mov	r0, r2
 8013084:	9105      	str	r1, [sp, #20]
 8013086:	9204      	str	r2, [sp, #16]
 8013088:	f7ff fd95 	bl	8012bb6 <__hexdig_fun>
 801308c:	2800      	cmp	r0, #0
 801308e:	d151      	bne.n	8013134 <__hexnan+0xe8>
 8013090:	9a04      	ldr	r2, [sp, #16]
 8013092:	9905      	ldr	r1, [sp, #20]
 8013094:	2a20      	cmp	r2, #32
 8013096:	d818      	bhi.n	80130ca <__hexnan+0x7e>
 8013098:	9b02      	ldr	r3, [sp, #8]
 801309a:	459b      	cmp	fp, r3
 801309c:	dd13      	ble.n	80130c6 <__hexnan+0x7a>
 801309e:	454c      	cmp	r4, r9
 80130a0:	d206      	bcs.n	80130b0 <__hexnan+0x64>
 80130a2:	2d07      	cmp	r5, #7
 80130a4:	dc04      	bgt.n	80130b0 <__hexnan+0x64>
 80130a6:	462a      	mov	r2, r5
 80130a8:	4649      	mov	r1, r9
 80130aa:	4620      	mov	r0, r4
 80130ac:	f7ff ffa8 	bl	8013000 <L_shift>
 80130b0:	4544      	cmp	r4, r8
 80130b2:	d952      	bls.n	801315a <__hexnan+0x10e>
 80130b4:	2300      	movs	r3, #0
 80130b6:	f1a4 0904 	sub.w	r9, r4, #4
 80130ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80130be:	461d      	mov	r5, r3
 80130c0:	464c      	mov	r4, r9
 80130c2:	f8cd b008 	str.w	fp, [sp, #8]
 80130c6:	9903      	ldr	r1, [sp, #12]
 80130c8:	e7d7      	b.n	801307a <__hexnan+0x2e>
 80130ca:	2a29      	cmp	r2, #41	@ 0x29
 80130cc:	d157      	bne.n	801317e <__hexnan+0x132>
 80130ce:	3102      	adds	r1, #2
 80130d0:	f8ca 1000 	str.w	r1, [sl]
 80130d4:	f1bb 0f00 	cmp.w	fp, #0
 80130d8:	d051      	beq.n	801317e <__hexnan+0x132>
 80130da:	454c      	cmp	r4, r9
 80130dc:	d206      	bcs.n	80130ec <__hexnan+0xa0>
 80130de:	2d07      	cmp	r5, #7
 80130e0:	dc04      	bgt.n	80130ec <__hexnan+0xa0>
 80130e2:	462a      	mov	r2, r5
 80130e4:	4649      	mov	r1, r9
 80130e6:	4620      	mov	r0, r4
 80130e8:	f7ff ff8a 	bl	8013000 <L_shift>
 80130ec:	4544      	cmp	r4, r8
 80130ee:	d936      	bls.n	801315e <__hexnan+0x112>
 80130f0:	4623      	mov	r3, r4
 80130f2:	f1a8 0204 	sub.w	r2, r8, #4
 80130f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80130fa:	429f      	cmp	r7, r3
 80130fc:	f842 1f04 	str.w	r1, [r2, #4]!
 8013100:	d2f9      	bcs.n	80130f6 <__hexnan+0xaa>
 8013102:	1b3b      	subs	r3, r7, r4
 8013104:	f023 0303 	bic.w	r3, r3, #3
 8013108:	3304      	adds	r3, #4
 801310a:	3401      	adds	r4, #1
 801310c:	3e03      	subs	r6, #3
 801310e:	42b4      	cmp	r4, r6
 8013110:	bf88      	it	hi
 8013112:	2304      	movhi	r3, #4
 8013114:	2200      	movs	r2, #0
 8013116:	4443      	add	r3, r8
 8013118:	f843 2b04 	str.w	r2, [r3], #4
 801311c:	429f      	cmp	r7, r3
 801311e:	d2fb      	bcs.n	8013118 <__hexnan+0xcc>
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	b91b      	cbnz	r3, 801312c <__hexnan+0xe0>
 8013124:	4547      	cmp	r7, r8
 8013126:	d128      	bne.n	801317a <__hexnan+0x12e>
 8013128:	2301      	movs	r3, #1
 801312a:	603b      	str	r3, [r7, #0]
 801312c:	2005      	movs	r0, #5
 801312e:	b007      	add	sp, #28
 8013130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013134:	3501      	adds	r5, #1
 8013136:	2d08      	cmp	r5, #8
 8013138:	f10b 0b01 	add.w	fp, fp, #1
 801313c:	dd06      	ble.n	801314c <__hexnan+0x100>
 801313e:	4544      	cmp	r4, r8
 8013140:	d9c1      	bls.n	80130c6 <__hexnan+0x7a>
 8013142:	2300      	movs	r3, #0
 8013144:	2501      	movs	r5, #1
 8013146:	f844 3c04 	str.w	r3, [r4, #-4]
 801314a:	3c04      	subs	r4, #4
 801314c:	6822      	ldr	r2, [r4, #0]
 801314e:	f000 000f 	and.w	r0, r0, #15
 8013152:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013156:	6020      	str	r0, [r4, #0]
 8013158:	e7b5      	b.n	80130c6 <__hexnan+0x7a>
 801315a:	2508      	movs	r5, #8
 801315c:	e7b3      	b.n	80130c6 <__hexnan+0x7a>
 801315e:	9b01      	ldr	r3, [sp, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d0dd      	beq.n	8013120 <__hexnan+0xd4>
 8013164:	f04f 32ff 	mov.w	r2, #4294967295
 8013168:	f1c3 0320 	rsb	r3, r3, #32
 801316c:	40da      	lsrs	r2, r3
 801316e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013172:	4013      	ands	r3, r2
 8013174:	f846 3c04 	str.w	r3, [r6, #-4]
 8013178:	e7d2      	b.n	8013120 <__hexnan+0xd4>
 801317a:	3f04      	subs	r7, #4
 801317c:	e7d0      	b.n	8013120 <__hexnan+0xd4>
 801317e:	2004      	movs	r0, #4
 8013180:	e7d5      	b.n	801312e <__hexnan+0xe2>

08013182 <__ascii_mbtowc>:
 8013182:	b082      	sub	sp, #8
 8013184:	b901      	cbnz	r1, 8013188 <__ascii_mbtowc+0x6>
 8013186:	a901      	add	r1, sp, #4
 8013188:	b142      	cbz	r2, 801319c <__ascii_mbtowc+0x1a>
 801318a:	b14b      	cbz	r3, 80131a0 <__ascii_mbtowc+0x1e>
 801318c:	7813      	ldrb	r3, [r2, #0]
 801318e:	600b      	str	r3, [r1, #0]
 8013190:	7812      	ldrb	r2, [r2, #0]
 8013192:	1e10      	subs	r0, r2, #0
 8013194:	bf18      	it	ne
 8013196:	2001      	movne	r0, #1
 8013198:	b002      	add	sp, #8
 801319a:	4770      	bx	lr
 801319c:	4610      	mov	r0, r2
 801319e:	e7fb      	b.n	8013198 <__ascii_mbtowc+0x16>
 80131a0:	f06f 0001 	mvn.w	r0, #1
 80131a4:	e7f8      	b.n	8013198 <__ascii_mbtowc+0x16>

080131a6 <_realloc_r>:
 80131a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131aa:	4680      	mov	r8, r0
 80131ac:	4615      	mov	r5, r2
 80131ae:	460c      	mov	r4, r1
 80131b0:	b921      	cbnz	r1, 80131bc <_realloc_r+0x16>
 80131b2:	4611      	mov	r1, r2
 80131b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131b8:	f7fd bcb4 	b.w	8010b24 <_malloc_r>
 80131bc:	b92a      	cbnz	r2, 80131ca <_realloc_r+0x24>
 80131be:	f7fd fc3f 	bl	8010a40 <_free_r>
 80131c2:	2400      	movs	r4, #0
 80131c4:	4620      	mov	r0, r4
 80131c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ca:	f000 f840 	bl	801324e <_malloc_usable_size_r>
 80131ce:	4285      	cmp	r5, r0
 80131d0:	4606      	mov	r6, r0
 80131d2:	d802      	bhi.n	80131da <_realloc_r+0x34>
 80131d4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80131d8:	d8f4      	bhi.n	80131c4 <_realloc_r+0x1e>
 80131da:	4629      	mov	r1, r5
 80131dc:	4640      	mov	r0, r8
 80131de:	f7fd fca1 	bl	8010b24 <_malloc_r>
 80131e2:	4607      	mov	r7, r0
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d0ec      	beq.n	80131c2 <_realloc_r+0x1c>
 80131e8:	42b5      	cmp	r5, r6
 80131ea:	462a      	mov	r2, r5
 80131ec:	4621      	mov	r1, r4
 80131ee:	bf28      	it	cs
 80131f0:	4632      	movcs	r2, r6
 80131f2:	f7ff fc47 	bl	8012a84 <memcpy>
 80131f6:	4621      	mov	r1, r4
 80131f8:	4640      	mov	r0, r8
 80131fa:	f7fd fc21 	bl	8010a40 <_free_r>
 80131fe:	463c      	mov	r4, r7
 8013200:	e7e0      	b.n	80131c4 <_realloc_r+0x1e>

08013202 <__ascii_wctomb>:
 8013202:	4603      	mov	r3, r0
 8013204:	4608      	mov	r0, r1
 8013206:	b141      	cbz	r1, 801321a <__ascii_wctomb+0x18>
 8013208:	2aff      	cmp	r2, #255	@ 0xff
 801320a:	d904      	bls.n	8013216 <__ascii_wctomb+0x14>
 801320c:	228a      	movs	r2, #138	@ 0x8a
 801320e:	f04f 30ff 	mov.w	r0, #4294967295
 8013212:	601a      	str	r2, [r3, #0]
 8013214:	4770      	bx	lr
 8013216:	2001      	movs	r0, #1
 8013218:	700a      	strb	r2, [r1, #0]
 801321a:	4770      	bx	lr

0801321c <fiprintf>:
 801321c:	b40e      	push	{r1, r2, r3}
 801321e:	b503      	push	{r0, r1, lr}
 8013220:	4601      	mov	r1, r0
 8013222:	ab03      	add	r3, sp, #12
 8013224:	4805      	ldr	r0, [pc, #20]	@ (801323c <fiprintf+0x20>)
 8013226:	f853 2b04 	ldr.w	r2, [r3], #4
 801322a:	6800      	ldr	r0, [r0, #0]
 801322c:	9301      	str	r3, [sp, #4]
 801322e:	f7ff f9a9 	bl	8012584 <_vfiprintf_r>
 8013232:	b002      	add	sp, #8
 8013234:	f85d eb04 	ldr.w	lr, [sp], #4
 8013238:	b003      	add	sp, #12
 801323a:	4770      	bx	lr
 801323c:	200001a4 	.word	0x200001a4

08013240 <abort>:
 8013240:	2006      	movs	r0, #6
 8013242:	b508      	push	{r3, lr}
 8013244:	f000 f834 	bl	80132b0 <raise>
 8013248:	2001      	movs	r0, #1
 801324a:	f7ef fd5e 	bl	8002d0a <_exit>

0801324e <_malloc_usable_size_r>:
 801324e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013252:	1f18      	subs	r0, r3, #4
 8013254:	2b00      	cmp	r3, #0
 8013256:	bfbc      	itt	lt
 8013258:	580b      	ldrlt	r3, [r1, r0]
 801325a:	18c0      	addlt	r0, r0, r3
 801325c:	4770      	bx	lr

0801325e <_raise_r>:
 801325e:	291f      	cmp	r1, #31
 8013260:	b538      	push	{r3, r4, r5, lr}
 8013262:	4605      	mov	r5, r0
 8013264:	460c      	mov	r4, r1
 8013266:	d904      	bls.n	8013272 <_raise_r+0x14>
 8013268:	2316      	movs	r3, #22
 801326a:	6003      	str	r3, [r0, #0]
 801326c:	f04f 30ff 	mov.w	r0, #4294967295
 8013270:	bd38      	pop	{r3, r4, r5, pc}
 8013272:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013274:	b112      	cbz	r2, 801327c <_raise_r+0x1e>
 8013276:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801327a:	b94b      	cbnz	r3, 8013290 <_raise_r+0x32>
 801327c:	4628      	mov	r0, r5
 801327e:	f000 f831 	bl	80132e4 <_getpid_r>
 8013282:	4622      	mov	r2, r4
 8013284:	4601      	mov	r1, r0
 8013286:	4628      	mov	r0, r5
 8013288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801328c:	f000 b818 	b.w	80132c0 <_kill_r>
 8013290:	2b01      	cmp	r3, #1
 8013292:	d00a      	beq.n	80132aa <_raise_r+0x4c>
 8013294:	1c59      	adds	r1, r3, #1
 8013296:	d103      	bne.n	80132a0 <_raise_r+0x42>
 8013298:	2316      	movs	r3, #22
 801329a:	6003      	str	r3, [r0, #0]
 801329c:	2001      	movs	r0, #1
 801329e:	e7e7      	b.n	8013270 <_raise_r+0x12>
 80132a0:	2100      	movs	r1, #0
 80132a2:	4620      	mov	r0, r4
 80132a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80132a8:	4798      	blx	r3
 80132aa:	2000      	movs	r0, #0
 80132ac:	e7e0      	b.n	8013270 <_raise_r+0x12>
	...

080132b0 <raise>:
 80132b0:	4b02      	ldr	r3, [pc, #8]	@ (80132bc <raise+0xc>)
 80132b2:	4601      	mov	r1, r0
 80132b4:	6818      	ldr	r0, [r3, #0]
 80132b6:	f7ff bfd2 	b.w	801325e <_raise_r>
 80132ba:	bf00      	nop
 80132bc:	200001a4 	.word	0x200001a4

080132c0 <_kill_r>:
 80132c0:	b538      	push	{r3, r4, r5, lr}
 80132c2:	2300      	movs	r3, #0
 80132c4:	4d06      	ldr	r5, [pc, #24]	@ (80132e0 <_kill_r+0x20>)
 80132c6:	4604      	mov	r4, r0
 80132c8:	4608      	mov	r0, r1
 80132ca:	4611      	mov	r1, r2
 80132cc:	602b      	str	r3, [r5, #0]
 80132ce:	f7ef fd0c 	bl	8002cea <_kill>
 80132d2:	1c43      	adds	r3, r0, #1
 80132d4:	d102      	bne.n	80132dc <_kill_r+0x1c>
 80132d6:	682b      	ldr	r3, [r5, #0]
 80132d8:	b103      	cbz	r3, 80132dc <_kill_r+0x1c>
 80132da:	6023      	str	r3, [r4, #0]
 80132dc:	bd38      	pop	{r3, r4, r5, pc}
 80132de:	bf00      	nop
 80132e0:	200008b8 	.word	0x200008b8

080132e4 <_getpid_r>:
 80132e4:	f7ef bcfa 	b.w	8002cdc <_getpid>

080132e8 <pow>:
 80132e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132ec:	4614      	mov	r4, r2
 80132ee:	461d      	mov	r5, r3
 80132f0:	4680      	mov	r8, r0
 80132f2:	4689      	mov	r9, r1
 80132f4:	f000 faf4 	bl	80138e0 <__ieee754_pow>
 80132f8:	4622      	mov	r2, r4
 80132fa:	4606      	mov	r6, r0
 80132fc:	460f      	mov	r7, r1
 80132fe:	462b      	mov	r3, r5
 8013300:	4620      	mov	r0, r4
 8013302:	4629      	mov	r1, r5
 8013304:	f7ed fb9a 	bl	8000a3c <__aeabi_dcmpun>
 8013308:	bbc8      	cbnz	r0, 801337e <pow+0x96>
 801330a:	2200      	movs	r2, #0
 801330c:	2300      	movs	r3, #0
 801330e:	4640      	mov	r0, r8
 8013310:	4649      	mov	r1, r9
 8013312:	f7ed fb61 	bl	80009d8 <__aeabi_dcmpeq>
 8013316:	b1b8      	cbz	r0, 8013348 <pow+0x60>
 8013318:	2200      	movs	r2, #0
 801331a:	2300      	movs	r3, #0
 801331c:	4620      	mov	r0, r4
 801331e:	4629      	mov	r1, r5
 8013320:	f7ed fb5a 	bl	80009d8 <__aeabi_dcmpeq>
 8013324:	2800      	cmp	r0, #0
 8013326:	d141      	bne.n	80133ac <pow+0xc4>
 8013328:	4620      	mov	r0, r4
 801332a:	4629      	mov	r1, r5
 801332c:	f000 f9fc 	bl	8013728 <finite>
 8013330:	b328      	cbz	r0, 801337e <pow+0x96>
 8013332:	2200      	movs	r2, #0
 8013334:	2300      	movs	r3, #0
 8013336:	4620      	mov	r0, r4
 8013338:	4629      	mov	r1, r5
 801333a:	f7ed fb57 	bl	80009ec <__aeabi_dcmplt>
 801333e:	b1f0      	cbz	r0, 801337e <pow+0x96>
 8013340:	f7fc fcee 	bl	800fd20 <__errno>
 8013344:	2322      	movs	r3, #34	@ 0x22
 8013346:	e019      	b.n	801337c <pow+0x94>
 8013348:	4630      	mov	r0, r6
 801334a:	4639      	mov	r1, r7
 801334c:	f000 f9ec 	bl	8013728 <finite>
 8013350:	b9c8      	cbnz	r0, 8013386 <pow+0x9e>
 8013352:	4640      	mov	r0, r8
 8013354:	4649      	mov	r1, r9
 8013356:	f000 f9e7 	bl	8013728 <finite>
 801335a:	b1a0      	cbz	r0, 8013386 <pow+0x9e>
 801335c:	4620      	mov	r0, r4
 801335e:	4629      	mov	r1, r5
 8013360:	f000 f9e2 	bl	8013728 <finite>
 8013364:	b178      	cbz	r0, 8013386 <pow+0x9e>
 8013366:	4632      	mov	r2, r6
 8013368:	463b      	mov	r3, r7
 801336a:	4630      	mov	r0, r6
 801336c:	4639      	mov	r1, r7
 801336e:	f7ed fb65 	bl	8000a3c <__aeabi_dcmpun>
 8013372:	2800      	cmp	r0, #0
 8013374:	d0e4      	beq.n	8013340 <pow+0x58>
 8013376:	f7fc fcd3 	bl	800fd20 <__errno>
 801337a:	2321      	movs	r3, #33	@ 0x21
 801337c:	6003      	str	r3, [r0, #0]
 801337e:	4630      	mov	r0, r6
 8013380:	4639      	mov	r1, r7
 8013382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013386:	2200      	movs	r2, #0
 8013388:	2300      	movs	r3, #0
 801338a:	4630      	mov	r0, r6
 801338c:	4639      	mov	r1, r7
 801338e:	f7ed fb23 	bl	80009d8 <__aeabi_dcmpeq>
 8013392:	2800      	cmp	r0, #0
 8013394:	d0f3      	beq.n	801337e <pow+0x96>
 8013396:	4640      	mov	r0, r8
 8013398:	4649      	mov	r1, r9
 801339a:	f000 f9c5 	bl	8013728 <finite>
 801339e:	2800      	cmp	r0, #0
 80133a0:	d0ed      	beq.n	801337e <pow+0x96>
 80133a2:	4620      	mov	r0, r4
 80133a4:	4629      	mov	r1, r5
 80133a6:	f000 f9bf 	bl	8013728 <finite>
 80133aa:	e7c8      	b.n	801333e <pow+0x56>
 80133ac:	2600      	movs	r6, #0
 80133ae:	4f01      	ldr	r7, [pc, #4]	@ (80133b4 <pow+0xcc>)
 80133b0:	e7e5      	b.n	801337e <pow+0x96>
 80133b2:	bf00      	nop
 80133b4:	3ff00000 	.word	0x3ff00000

080133b8 <sqrt>:
 80133b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ba:	4606      	mov	r6, r0
 80133bc:	460f      	mov	r7, r1
 80133be:	f000 f9b9 	bl	8013734 <__ieee754_sqrt>
 80133c2:	4632      	mov	r2, r6
 80133c4:	4604      	mov	r4, r0
 80133c6:	460d      	mov	r5, r1
 80133c8:	463b      	mov	r3, r7
 80133ca:	4630      	mov	r0, r6
 80133cc:	4639      	mov	r1, r7
 80133ce:	f7ed fb35 	bl	8000a3c <__aeabi_dcmpun>
 80133d2:	b990      	cbnz	r0, 80133fa <sqrt+0x42>
 80133d4:	2200      	movs	r2, #0
 80133d6:	2300      	movs	r3, #0
 80133d8:	4630      	mov	r0, r6
 80133da:	4639      	mov	r1, r7
 80133dc:	f7ed fb06 	bl	80009ec <__aeabi_dcmplt>
 80133e0:	b158      	cbz	r0, 80133fa <sqrt+0x42>
 80133e2:	f7fc fc9d 	bl	800fd20 <__errno>
 80133e6:	2321      	movs	r3, #33	@ 0x21
 80133e8:	2200      	movs	r2, #0
 80133ea:	6003      	str	r3, [r0, #0]
 80133ec:	2300      	movs	r3, #0
 80133ee:	4610      	mov	r0, r2
 80133f0:	4619      	mov	r1, r3
 80133f2:	f7ed f9b3 	bl	800075c <__aeabi_ddiv>
 80133f6:	4604      	mov	r4, r0
 80133f8:	460d      	mov	r5, r1
 80133fa:	4620      	mov	r0, r4
 80133fc:	4629      	mov	r1, r5
 80133fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013400 <atan>:
 8013400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013404:	4bbc      	ldr	r3, [pc, #752]	@ (80136f8 <atan+0x2f8>)
 8013406:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 801340a:	429e      	cmp	r6, r3
 801340c:	4604      	mov	r4, r0
 801340e:	460d      	mov	r5, r1
 8013410:	468b      	mov	fp, r1
 8013412:	d918      	bls.n	8013446 <atan+0x46>
 8013414:	4bb9      	ldr	r3, [pc, #740]	@ (80136fc <atan+0x2fc>)
 8013416:	429e      	cmp	r6, r3
 8013418:	d801      	bhi.n	801341e <atan+0x1e>
 801341a:	d109      	bne.n	8013430 <atan+0x30>
 801341c:	b140      	cbz	r0, 8013430 <atan+0x30>
 801341e:	4622      	mov	r2, r4
 8013420:	462b      	mov	r3, r5
 8013422:	4620      	mov	r0, r4
 8013424:	4629      	mov	r1, r5
 8013426:	f7ec feb9 	bl	800019c <__adddf3>
 801342a:	4604      	mov	r4, r0
 801342c:	460d      	mov	r5, r1
 801342e:	e006      	b.n	801343e <atan+0x3e>
 8013430:	f1bb 0f00 	cmp.w	fp, #0
 8013434:	f340 8123 	ble.w	801367e <atan+0x27e>
 8013438:	a593      	add	r5, pc, #588	@ (adr r5, 8013688 <atan+0x288>)
 801343a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801343e:	4620      	mov	r0, r4
 8013440:	4629      	mov	r1, r5
 8013442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013446:	4bae      	ldr	r3, [pc, #696]	@ (8013700 <atan+0x300>)
 8013448:	429e      	cmp	r6, r3
 801344a:	d811      	bhi.n	8013470 <atan+0x70>
 801344c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8013450:	429e      	cmp	r6, r3
 8013452:	d80a      	bhi.n	801346a <atan+0x6a>
 8013454:	a38e      	add	r3, pc, #568	@ (adr r3, 8013690 <atan+0x290>)
 8013456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801345a:	f7ec fe9f 	bl	800019c <__adddf3>
 801345e:	2200      	movs	r2, #0
 8013460:	4ba8      	ldr	r3, [pc, #672]	@ (8013704 <atan+0x304>)
 8013462:	f7ed fae1 	bl	8000a28 <__aeabi_dcmpgt>
 8013466:	2800      	cmp	r0, #0
 8013468:	d1e9      	bne.n	801343e <atan+0x3e>
 801346a:	f04f 3aff 	mov.w	sl, #4294967295
 801346e:	e027      	b.n	80134c0 <atan+0xc0>
 8013470:	f000 f956 	bl	8013720 <fabs>
 8013474:	4ba4      	ldr	r3, [pc, #656]	@ (8013708 <atan+0x308>)
 8013476:	4604      	mov	r4, r0
 8013478:	429e      	cmp	r6, r3
 801347a:	460d      	mov	r5, r1
 801347c:	f200 80b8 	bhi.w	80135f0 <atan+0x1f0>
 8013480:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013484:	429e      	cmp	r6, r3
 8013486:	f200 809c 	bhi.w	80135c2 <atan+0x1c2>
 801348a:	4602      	mov	r2, r0
 801348c:	460b      	mov	r3, r1
 801348e:	f7ec fe85 	bl	800019c <__adddf3>
 8013492:	2200      	movs	r2, #0
 8013494:	4b9b      	ldr	r3, [pc, #620]	@ (8013704 <atan+0x304>)
 8013496:	f7ec fe7f 	bl	8000198 <__aeabi_dsub>
 801349a:	2200      	movs	r2, #0
 801349c:	4606      	mov	r6, r0
 801349e:	460f      	mov	r7, r1
 80134a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80134a4:	4620      	mov	r0, r4
 80134a6:	4629      	mov	r1, r5
 80134a8:	f7ec fe78 	bl	800019c <__adddf3>
 80134ac:	4602      	mov	r2, r0
 80134ae:	460b      	mov	r3, r1
 80134b0:	4630      	mov	r0, r6
 80134b2:	4639      	mov	r1, r7
 80134b4:	f7ed f952 	bl	800075c <__aeabi_ddiv>
 80134b8:	f04f 0a00 	mov.w	sl, #0
 80134bc:	4604      	mov	r4, r0
 80134be:	460d      	mov	r5, r1
 80134c0:	4622      	mov	r2, r4
 80134c2:	462b      	mov	r3, r5
 80134c4:	4620      	mov	r0, r4
 80134c6:	4629      	mov	r1, r5
 80134c8:	f7ed f81e 	bl	8000508 <__aeabi_dmul>
 80134cc:	4602      	mov	r2, r0
 80134ce:	460b      	mov	r3, r1
 80134d0:	4680      	mov	r8, r0
 80134d2:	4689      	mov	r9, r1
 80134d4:	f7ed f818 	bl	8000508 <__aeabi_dmul>
 80134d8:	a36f      	add	r3, pc, #444	@ (adr r3, 8013698 <atan+0x298>)
 80134da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134de:	4606      	mov	r6, r0
 80134e0:	460f      	mov	r7, r1
 80134e2:	f7ed f811 	bl	8000508 <__aeabi_dmul>
 80134e6:	a36e      	add	r3, pc, #440	@ (adr r3, 80136a0 <atan+0x2a0>)
 80134e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ec:	f7ec fe56 	bl	800019c <__adddf3>
 80134f0:	4632      	mov	r2, r6
 80134f2:	463b      	mov	r3, r7
 80134f4:	f7ed f808 	bl	8000508 <__aeabi_dmul>
 80134f8:	a36b      	add	r3, pc, #428	@ (adr r3, 80136a8 <atan+0x2a8>)
 80134fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fe:	f7ec fe4d 	bl	800019c <__adddf3>
 8013502:	4632      	mov	r2, r6
 8013504:	463b      	mov	r3, r7
 8013506:	f7ec ffff 	bl	8000508 <__aeabi_dmul>
 801350a:	a369      	add	r3, pc, #420	@ (adr r3, 80136b0 <atan+0x2b0>)
 801350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013510:	f7ec fe44 	bl	800019c <__adddf3>
 8013514:	4632      	mov	r2, r6
 8013516:	463b      	mov	r3, r7
 8013518:	f7ec fff6 	bl	8000508 <__aeabi_dmul>
 801351c:	a366      	add	r3, pc, #408	@ (adr r3, 80136b8 <atan+0x2b8>)
 801351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013522:	f7ec fe3b 	bl	800019c <__adddf3>
 8013526:	4632      	mov	r2, r6
 8013528:	463b      	mov	r3, r7
 801352a:	f7ec ffed 	bl	8000508 <__aeabi_dmul>
 801352e:	a364      	add	r3, pc, #400	@ (adr r3, 80136c0 <atan+0x2c0>)
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	f7ec fe32 	bl	800019c <__adddf3>
 8013538:	4642      	mov	r2, r8
 801353a:	464b      	mov	r3, r9
 801353c:	f7ec ffe4 	bl	8000508 <__aeabi_dmul>
 8013540:	a361      	add	r3, pc, #388	@ (adr r3, 80136c8 <atan+0x2c8>)
 8013542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013546:	4680      	mov	r8, r0
 8013548:	4689      	mov	r9, r1
 801354a:	4630      	mov	r0, r6
 801354c:	4639      	mov	r1, r7
 801354e:	f7ec ffdb 	bl	8000508 <__aeabi_dmul>
 8013552:	a35f      	add	r3, pc, #380	@ (adr r3, 80136d0 <atan+0x2d0>)
 8013554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013558:	f7ec fe1e 	bl	8000198 <__aeabi_dsub>
 801355c:	4632      	mov	r2, r6
 801355e:	463b      	mov	r3, r7
 8013560:	f7ec ffd2 	bl	8000508 <__aeabi_dmul>
 8013564:	a35c      	add	r3, pc, #368	@ (adr r3, 80136d8 <atan+0x2d8>)
 8013566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356a:	f7ec fe15 	bl	8000198 <__aeabi_dsub>
 801356e:	4632      	mov	r2, r6
 8013570:	463b      	mov	r3, r7
 8013572:	f7ec ffc9 	bl	8000508 <__aeabi_dmul>
 8013576:	a35a      	add	r3, pc, #360	@ (adr r3, 80136e0 <atan+0x2e0>)
 8013578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357c:	f7ec fe0c 	bl	8000198 <__aeabi_dsub>
 8013580:	4632      	mov	r2, r6
 8013582:	463b      	mov	r3, r7
 8013584:	f7ec ffc0 	bl	8000508 <__aeabi_dmul>
 8013588:	a357      	add	r3, pc, #348	@ (adr r3, 80136e8 <atan+0x2e8>)
 801358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358e:	f7ec fe03 	bl	8000198 <__aeabi_dsub>
 8013592:	4632      	mov	r2, r6
 8013594:	463b      	mov	r3, r7
 8013596:	f7ec ffb7 	bl	8000508 <__aeabi_dmul>
 801359a:	4602      	mov	r2, r0
 801359c:	460b      	mov	r3, r1
 801359e:	4640      	mov	r0, r8
 80135a0:	4649      	mov	r1, r9
 80135a2:	f7ec fdfb 	bl	800019c <__adddf3>
 80135a6:	4622      	mov	r2, r4
 80135a8:	462b      	mov	r3, r5
 80135aa:	f7ec ffad 	bl	8000508 <__aeabi_dmul>
 80135ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 80135b2:	4602      	mov	r2, r0
 80135b4:	460b      	mov	r3, r1
 80135b6:	d144      	bne.n	8013642 <atan+0x242>
 80135b8:	4620      	mov	r0, r4
 80135ba:	4629      	mov	r1, r5
 80135bc:	f7ec fdec 	bl	8000198 <__aeabi_dsub>
 80135c0:	e733      	b.n	801342a <atan+0x2a>
 80135c2:	2200      	movs	r2, #0
 80135c4:	4b4f      	ldr	r3, [pc, #316]	@ (8013704 <atan+0x304>)
 80135c6:	f7ec fde7 	bl	8000198 <__aeabi_dsub>
 80135ca:	2200      	movs	r2, #0
 80135cc:	4606      	mov	r6, r0
 80135ce:	460f      	mov	r7, r1
 80135d0:	4620      	mov	r0, r4
 80135d2:	4629      	mov	r1, r5
 80135d4:	4b4b      	ldr	r3, [pc, #300]	@ (8013704 <atan+0x304>)
 80135d6:	f7ec fde1 	bl	800019c <__adddf3>
 80135da:	4602      	mov	r2, r0
 80135dc:	460b      	mov	r3, r1
 80135de:	4630      	mov	r0, r6
 80135e0:	4639      	mov	r1, r7
 80135e2:	f7ed f8bb 	bl	800075c <__aeabi_ddiv>
 80135e6:	f04f 0a01 	mov.w	sl, #1
 80135ea:	4604      	mov	r4, r0
 80135ec:	460d      	mov	r5, r1
 80135ee:	e767      	b.n	80134c0 <atan+0xc0>
 80135f0:	4b46      	ldr	r3, [pc, #280]	@ (801370c <atan+0x30c>)
 80135f2:	429e      	cmp	r6, r3
 80135f4:	d21a      	bcs.n	801362c <atan+0x22c>
 80135f6:	2200      	movs	r2, #0
 80135f8:	4b45      	ldr	r3, [pc, #276]	@ (8013710 <atan+0x310>)
 80135fa:	f7ec fdcd 	bl	8000198 <__aeabi_dsub>
 80135fe:	2200      	movs	r2, #0
 8013600:	4606      	mov	r6, r0
 8013602:	460f      	mov	r7, r1
 8013604:	4620      	mov	r0, r4
 8013606:	4629      	mov	r1, r5
 8013608:	4b41      	ldr	r3, [pc, #260]	@ (8013710 <atan+0x310>)
 801360a:	f7ec ff7d 	bl	8000508 <__aeabi_dmul>
 801360e:	2200      	movs	r2, #0
 8013610:	4b3c      	ldr	r3, [pc, #240]	@ (8013704 <atan+0x304>)
 8013612:	f7ec fdc3 	bl	800019c <__adddf3>
 8013616:	4602      	mov	r2, r0
 8013618:	460b      	mov	r3, r1
 801361a:	4630      	mov	r0, r6
 801361c:	4639      	mov	r1, r7
 801361e:	f7ed f89d 	bl	800075c <__aeabi_ddiv>
 8013622:	f04f 0a02 	mov.w	sl, #2
 8013626:	4604      	mov	r4, r0
 8013628:	460d      	mov	r5, r1
 801362a:	e749      	b.n	80134c0 <atan+0xc0>
 801362c:	4602      	mov	r2, r0
 801362e:	460b      	mov	r3, r1
 8013630:	2000      	movs	r0, #0
 8013632:	4938      	ldr	r1, [pc, #224]	@ (8013714 <atan+0x314>)
 8013634:	f7ed f892 	bl	800075c <__aeabi_ddiv>
 8013638:	f04f 0a03 	mov.w	sl, #3
 801363c:	4604      	mov	r4, r0
 801363e:	460d      	mov	r5, r1
 8013640:	e73e      	b.n	80134c0 <atan+0xc0>
 8013642:	4b35      	ldr	r3, [pc, #212]	@ (8013718 <atan+0x318>)
 8013644:	4e35      	ldr	r6, [pc, #212]	@ (801371c <atan+0x31c>)
 8013646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364e:	f7ec fda3 	bl	8000198 <__aeabi_dsub>
 8013652:	4622      	mov	r2, r4
 8013654:	462b      	mov	r3, r5
 8013656:	f7ec fd9f 	bl	8000198 <__aeabi_dsub>
 801365a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801365e:	4602      	mov	r2, r0
 8013660:	460b      	mov	r3, r1
 8013662:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013666:	f7ec fd97 	bl	8000198 <__aeabi_dsub>
 801366a:	f1bb 0f00 	cmp.w	fp, #0
 801366e:	4604      	mov	r4, r0
 8013670:	460d      	mov	r5, r1
 8013672:	f6bf aee4 	bge.w	801343e <atan+0x3e>
 8013676:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801367a:	461d      	mov	r5, r3
 801367c:	e6df      	b.n	801343e <atan+0x3e>
 801367e:	a51c      	add	r5, pc, #112	@ (adr r5, 80136f0 <atan+0x2f0>)
 8013680:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013684:	e6db      	b.n	801343e <atan+0x3e>
 8013686:	bf00      	nop
 8013688:	54442d18 	.word	0x54442d18
 801368c:	3ff921fb 	.word	0x3ff921fb
 8013690:	8800759c 	.word	0x8800759c
 8013694:	7e37e43c 	.word	0x7e37e43c
 8013698:	e322da11 	.word	0xe322da11
 801369c:	3f90ad3a 	.word	0x3f90ad3a
 80136a0:	24760deb 	.word	0x24760deb
 80136a4:	3fa97b4b 	.word	0x3fa97b4b
 80136a8:	a0d03d51 	.word	0xa0d03d51
 80136ac:	3fb10d66 	.word	0x3fb10d66
 80136b0:	c54c206e 	.word	0xc54c206e
 80136b4:	3fb745cd 	.word	0x3fb745cd
 80136b8:	920083ff 	.word	0x920083ff
 80136bc:	3fc24924 	.word	0x3fc24924
 80136c0:	5555550d 	.word	0x5555550d
 80136c4:	3fd55555 	.word	0x3fd55555
 80136c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80136cc:	bfa2b444 	.word	0xbfa2b444
 80136d0:	52defd9a 	.word	0x52defd9a
 80136d4:	3fadde2d 	.word	0x3fadde2d
 80136d8:	af749a6d 	.word	0xaf749a6d
 80136dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80136e0:	fe231671 	.word	0xfe231671
 80136e4:	3fbc71c6 	.word	0x3fbc71c6
 80136e8:	9998ebc4 	.word	0x9998ebc4
 80136ec:	3fc99999 	.word	0x3fc99999
 80136f0:	54442d18 	.word	0x54442d18
 80136f4:	bff921fb 	.word	0xbff921fb
 80136f8:	440fffff 	.word	0x440fffff
 80136fc:	7ff00000 	.word	0x7ff00000
 8013700:	3fdbffff 	.word	0x3fdbffff
 8013704:	3ff00000 	.word	0x3ff00000
 8013708:	3ff2ffff 	.word	0x3ff2ffff
 801370c:	40038000 	.word	0x40038000
 8013710:	3ff80000 	.word	0x3ff80000
 8013714:	bff00000 	.word	0xbff00000
 8013718:	08014ab8 	.word	0x08014ab8
 801371c:	08014ad8 	.word	0x08014ad8

08013720 <fabs>:
 8013720:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013724:	4619      	mov	r1, r3
 8013726:	4770      	bx	lr

08013728 <finite>:
 8013728:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 801372c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013730:	0fc0      	lsrs	r0, r0, #31
 8013732:	4770      	bx	lr

08013734 <__ieee754_sqrt>:
 8013734:	4a67      	ldr	r2, [pc, #412]	@ (80138d4 <__ieee754_sqrt+0x1a0>)
 8013736:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801373a:	438a      	bics	r2, r1
 801373c:	4606      	mov	r6, r0
 801373e:	460f      	mov	r7, r1
 8013740:	460b      	mov	r3, r1
 8013742:	4604      	mov	r4, r0
 8013744:	d10e      	bne.n	8013764 <__ieee754_sqrt+0x30>
 8013746:	4602      	mov	r2, r0
 8013748:	f7ec fede 	bl	8000508 <__aeabi_dmul>
 801374c:	4602      	mov	r2, r0
 801374e:	460b      	mov	r3, r1
 8013750:	4630      	mov	r0, r6
 8013752:	4639      	mov	r1, r7
 8013754:	f7ec fd22 	bl	800019c <__adddf3>
 8013758:	4606      	mov	r6, r0
 801375a:	460f      	mov	r7, r1
 801375c:	4630      	mov	r0, r6
 801375e:	4639      	mov	r1, r7
 8013760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013764:	2900      	cmp	r1, #0
 8013766:	dc0c      	bgt.n	8013782 <__ieee754_sqrt+0x4e>
 8013768:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801376c:	4302      	orrs	r2, r0
 801376e:	d0f5      	beq.n	801375c <__ieee754_sqrt+0x28>
 8013770:	b189      	cbz	r1, 8013796 <__ieee754_sqrt+0x62>
 8013772:	4602      	mov	r2, r0
 8013774:	f7ec fd10 	bl	8000198 <__aeabi_dsub>
 8013778:	4602      	mov	r2, r0
 801377a:	460b      	mov	r3, r1
 801377c:	f7ec ffee 	bl	800075c <__aeabi_ddiv>
 8013780:	e7ea      	b.n	8013758 <__ieee754_sqrt+0x24>
 8013782:	150a      	asrs	r2, r1, #20
 8013784:	d115      	bne.n	80137b2 <__ieee754_sqrt+0x7e>
 8013786:	2100      	movs	r1, #0
 8013788:	e009      	b.n	801379e <__ieee754_sqrt+0x6a>
 801378a:	0ae3      	lsrs	r3, r4, #11
 801378c:	3a15      	subs	r2, #21
 801378e:	0564      	lsls	r4, r4, #21
 8013790:	2b00      	cmp	r3, #0
 8013792:	d0fa      	beq.n	801378a <__ieee754_sqrt+0x56>
 8013794:	e7f7      	b.n	8013786 <__ieee754_sqrt+0x52>
 8013796:	460a      	mov	r2, r1
 8013798:	e7fa      	b.n	8013790 <__ieee754_sqrt+0x5c>
 801379a:	005b      	lsls	r3, r3, #1
 801379c:	3101      	adds	r1, #1
 801379e:	02d8      	lsls	r0, r3, #11
 80137a0:	d5fb      	bpl.n	801379a <__ieee754_sqrt+0x66>
 80137a2:	1e48      	subs	r0, r1, #1
 80137a4:	1a12      	subs	r2, r2, r0
 80137a6:	f1c1 0020 	rsb	r0, r1, #32
 80137aa:	fa24 f000 	lsr.w	r0, r4, r0
 80137ae:	4303      	orrs	r3, r0
 80137b0:	408c      	lsls	r4, r1
 80137b2:	2600      	movs	r6, #0
 80137b4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80137b8:	2116      	movs	r1, #22
 80137ba:	07d2      	lsls	r2, r2, #31
 80137bc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80137c0:	4632      	mov	r2, r6
 80137c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80137ca:	bf5c      	itt	pl
 80137cc:	005b      	lslpl	r3, r3, #1
 80137ce:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80137d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80137d6:	bf58      	it	pl
 80137d8:	0064      	lslpl	r4, r4, #1
 80137da:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80137de:	107f      	asrs	r7, r7, #1
 80137e0:	0064      	lsls	r4, r4, #1
 80137e2:	1815      	adds	r5, r2, r0
 80137e4:	429d      	cmp	r5, r3
 80137e6:	bfde      	ittt	le
 80137e8:	182a      	addle	r2, r5, r0
 80137ea:	1b5b      	suble	r3, r3, r5
 80137ec:	1836      	addle	r6, r6, r0
 80137ee:	0fe5      	lsrs	r5, r4, #31
 80137f0:	3901      	subs	r1, #1
 80137f2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80137f6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80137fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80137fe:	d1f0      	bne.n	80137e2 <__ieee754_sqrt+0xae>
 8013800:	460d      	mov	r5, r1
 8013802:	f04f 0a20 	mov.w	sl, #32
 8013806:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801380a:	429a      	cmp	r2, r3
 801380c:	eb01 0c00 	add.w	ip, r1, r0
 8013810:	db02      	blt.n	8013818 <__ieee754_sqrt+0xe4>
 8013812:	d113      	bne.n	801383c <__ieee754_sqrt+0x108>
 8013814:	45a4      	cmp	ip, r4
 8013816:	d811      	bhi.n	801383c <__ieee754_sqrt+0x108>
 8013818:	f1bc 0f00 	cmp.w	ip, #0
 801381c:	eb0c 0100 	add.w	r1, ip, r0
 8013820:	da42      	bge.n	80138a8 <__ieee754_sqrt+0x174>
 8013822:	2900      	cmp	r1, #0
 8013824:	db40      	blt.n	80138a8 <__ieee754_sqrt+0x174>
 8013826:	f102 0e01 	add.w	lr, r2, #1
 801382a:	1a9b      	subs	r3, r3, r2
 801382c:	4672      	mov	r2, lr
 801382e:	45a4      	cmp	ip, r4
 8013830:	bf88      	it	hi
 8013832:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013836:	eba4 040c 	sub.w	r4, r4, ip
 801383a:	4405      	add	r5, r0
 801383c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8013840:	f1ba 0a01 	subs.w	sl, sl, #1
 8013844:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8013848:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801384c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013850:	d1db      	bne.n	801380a <__ieee754_sqrt+0xd6>
 8013852:	431c      	orrs	r4, r3
 8013854:	d01a      	beq.n	801388c <__ieee754_sqrt+0x158>
 8013856:	4c20      	ldr	r4, [pc, #128]	@ (80138d8 <__ieee754_sqrt+0x1a4>)
 8013858:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80138dc <__ieee754_sqrt+0x1a8>
 801385c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013860:	e9db 2300 	ldrd	r2, r3, [fp]
 8013864:	f7ec fc98 	bl	8000198 <__aeabi_dsub>
 8013868:	e9d4 8900 	ldrd	r8, r9, [r4]
 801386c:	4602      	mov	r2, r0
 801386e:	460b      	mov	r3, r1
 8013870:	4640      	mov	r0, r8
 8013872:	4649      	mov	r1, r9
 8013874:	f7ed f8c4 	bl	8000a00 <__aeabi_dcmple>
 8013878:	b140      	cbz	r0, 801388c <__ieee754_sqrt+0x158>
 801387a:	e9d4 0100 	ldrd	r0, r1, [r4]
 801387e:	e9db 2300 	ldrd	r2, r3, [fp]
 8013882:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013886:	d111      	bne.n	80138ac <__ieee754_sqrt+0x178>
 8013888:	4655      	mov	r5, sl
 801388a:	3601      	adds	r6, #1
 801388c:	1072      	asrs	r2, r6, #1
 801388e:	086b      	lsrs	r3, r5, #1
 8013890:	07f1      	lsls	r1, r6, #31
 8013892:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013896:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801389a:	bf48      	it	mi
 801389c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80138a0:	4618      	mov	r0, r3
 80138a2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80138a6:	e757      	b.n	8013758 <__ieee754_sqrt+0x24>
 80138a8:	4696      	mov	lr, r2
 80138aa:	e7be      	b.n	801382a <__ieee754_sqrt+0xf6>
 80138ac:	f7ec fc76 	bl	800019c <__adddf3>
 80138b0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80138b4:	4602      	mov	r2, r0
 80138b6:	460b      	mov	r3, r1
 80138b8:	4640      	mov	r0, r8
 80138ba:	4649      	mov	r1, r9
 80138bc:	f7ed f896 	bl	80009ec <__aeabi_dcmplt>
 80138c0:	b120      	cbz	r0, 80138cc <__ieee754_sqrt+0x198>
 80138c2:	1ca8      	adds	r0, r5, #2
 80138c4:	bf08      	it	eq
 80138c6:	3601      	addeq	r6, #1
 80138c8:	3502      	adds	r5, #2
 80138ca:	e7df      	b.n	801388c <__ieee754_sqrt+0x158>
 80138cc:	1c6b      	adds	r3, r5, #1
 80138ce:	f023 0501 	bic.w	r5, r3, #1
 80138d2:	e7db      	b.n	801388c <__ieee754_sqrt+0x158>
 80138d4:	7ff00000 	.word	0x7ff00000
 80138d8:	20000368 	.word	0x20000368
 80138dc:	20000360 	.word	0x20000360

080138e0 <__ieee754_pow>:
 80138e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138e4:	b091      	sub	sp, #68	@ 0x44
 80138e6:	e9cd 2300 	strd	r2, r3, [sp]
 80138ea:	468b      	mov	fp, r1
 80138ec:	e9dd 1800 	ldrd	r1, r8, [sp]
 80138f0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80138f4:	4682      	mov	sl, r0
 80138f6:	ea57 0001 	orrs.w	r0, r7, r1
 80138fa:	d112      	bne.n	8013922 <__ieee754_pow+0x42>
 80138fc:	4653      	mov	r3, sl
 80138fe:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8013902:	18db      	adds	r3, r3, r3
 8013904:	4152      	adcs	r2, r2
 8013906:	4298      	cmp	r0, r3
 8013908:	4b91      	ldr	r3, [pc, #580]	@ (8013b50 <__ieee754_pow+0x270>)
 801390a:	4193      	sbcs	r3, r2
 801390c:	f080 84ce 	bcs.w	80142ac <__ieee754_pow+0x9cc>
 8013910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013914:	4650      	mov	r0, sl
 8013916:	4659      	mov	r1, fp
 8013918:	f7ec fc40 	bl	800019c <__adddf3>
 801391c:	b011      	add	sp, #68	@ 0x44
 801391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013922:	4b8c      	ldr	r3, [pc, #560]	@ (8013b54 <__ieee754_pow+0x274>)
 8013924:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8013928:	429e      	cmp	r6, r3
 801392a:	465d      	mov	r5, fp
 801392c:	46d1      	mov	r9, sl
 801392e:	d807      	bhi.n	8013940 <__ieee754_pow+0x60>
 8013930:	d102      	bne.n	8013938 <__ieee754_pow+0x58>
 8013932:	f1ba 0f00 	cmp.w	sl, #0
 8013936:	d1eb      	bne.n	8013910 <__ieee754_pow+0x30>
 8013938:	429f      	cmp	r7, r3
 801393a:	d801      	bhi.n	8013940 <__ieee754_pow+0x60>
 801393c:	d10f      	bne.n	801395e <__ieee754_pow+0x7e>
 801393e:	b171      	cbz	r1, 801395e <__ieee754_pow+0x7e>
 8013940:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013944:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013948:	ea55 0509 	orrs.w	r5, r5, r9
 801394c:	d1e0      	bne.n	8013910 <__ieee754_pow+0x30>
 801394e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013952:	18db      	adds	r3, r3, r3
 8013954:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013958:	4152      	adcs	r2, r2
 801395a:	429d      	cmp	r5, r3
 801395c:	e7d4      	b.n	8013908 <__ieee754_pow+0x28>
 801395e:	2d00      	cmp	r5, #0
 8013960:	4633      	mov	r3, r6
 8013962:	da39      	bge.n	80139d8 <__ieee754_pow+0xf8>
 8013964:	4a7c      	ldr	r2, [pc, #496]	@ (8013b58 <__ieee754_pow+0x278>)
 8013966:	4297      	cmp	r7, r2
 8013968:	d84e      	bhi.n	8013a08 <__ieee754_pow+0x128>
 801396a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801396e:	4297      	cmp	r7, r2
 8013970:	f240 84ab 	bls.w	80142ca <__ieee754_pow+0x9ea>
 8013974:	153a      	asrs	r2, r7, #20
 8013976:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801397a:	2a14      	cmp	r2, #20
 801397c:	dd0f      	ble.n	801399e <__ieee754_pow+0xbe>
 801397e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013982:	fa21 f402 	lsr.w	r4, r1, r2
 8013986:	fa04 f202 	lsl.w	r2, r4, r2
 801398a:	428a      	cmp	r2, r1
 801398c:	f040 849d 	bne.w	80142ca <__ieee754_pow+0x9ea>
 8013990:	f004 0401 	and.w	r4, r4, #1
 8013994:	f1c4 0402 	rsb	r4, r4, #2
 8013998:	2900      	cmp	r1, #0
 801399a:	d15a      	bne.n	8013a52 <__ieee754_pow+0x172>
 801399c:	e00e      	b.n	80139bc <__ieee754_pow+0xdc>
 801399e:	2900      	cmp	r1, #0
 80139a0:	d156      	bne.n	8013a50 <__ieee754_pow+0x170>
 80139a2:	f1c2 0214 	rsb	r2, r2, #20
 80139a6:	fa47 f402 	asr.w	r4, r7, r2
 80139aa:	fa04 f202 	lsl.w	r2, r4, r2
 80139ae:	42ba      	cmp	r2, r7
 80139b0:	f040 8488 	bne.w	80142c4 <__ieee754_pow+0x9e4>
 80139b4:	f004 0401 	and.w	r4, r4, #1
 80139b8:	f1c4 0402 	rsb	r4, r4, #2
 80139bc:	4a67      	ldr	r2, [pc, #412]	@ (8013b5c <__ieee754_pow+0x27c>)
 80139be:	4297      	cmp	r7, r2
 80139c0:	d130      	bne.n	8013a24 <__ieee754_pow+0x144>
 80139c2:	f1b8 0f00 	cmp.w	r8, #0
 80139c6:	f280 8479 	bge.w	80142bc <__ieee754_pow+0x9dc>
 80139ca:	4652      	mov	r2, sl
 80139cc:	465b      	mov	r3, fp
 80139ce:	2000      	movs	r0, #0
 80139d0:	4962      	ldr	r1, [pc, #392]	@ (8013b5c <__ieee754_pow+0x27c>)
 80139d2:	f7ec fec3 	bl	800075c <__aeabi_ddiv>
 80139d6:	e7a1      	b.n	801391c <__ieee754_pow+0x3c>
 80139d8:	2400      	movs	r4, #0
 80139da:	2900      	cmp	r1, #0
 80139dc:	d139      	bne.n	8013a52 <__ieee754_pow+0x172>
 80139de:	4a5d      	ldr	r2, [pc, #372]	@ (8013b54 <__ieee754_pow+0x274>)
 80139e0:	4297      	cmp	r7, r2
 80139e2:	d1eb      	bne.n	80139bc <__ieee754_pow+0xdc>
 80139e4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80139e8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80139ec:	ea53 0309 	orrs.w	r3, r3, r9
 80139f0:	f000 845c 	beq.w	80142ac <__ieee754_pow+0x9cc>
 80139f4:	4b5a      	ldr	r3, [pc, #360]	@ (8013b60 <__ieee754_pow+0x280>)
 80139f6:	429e      	cmp	r6, r3
 80139f8:	d908      	bls.n	8013a0c <__ieee754_pow+0x12c>
 80139fa:	f1b8 0f00 	cmp.w	r8, #0
 80139fe:	f2c0 8459 	blt.w	80142b4 <__ieee754_pow+0x9d4>
 8013a02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a06:	e789      	b.n	801391c <__ieee754_pow+0x3c>
 8013a08:	2402      	movs	r4, #2
 8013a0a:	e7e6      	b.n	80139da <__ieee754_pow+0xfa>
 8013a0c:	f1b8 0f00 	cmp.w	r8, #0
 8013a10:	f04f 0000 	mov.w	r0, #0
 8013a14:	f04f 0100 	mov.w	r1, #0
 8013a18:	da80      	bge.n	801391c <__ieee754_pow+0x3c>
 8013a1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013a1e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013a22:	e77b      	b.n	801391c <__ieee754_pow+0x3c>
 8013a24:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8013a28:	d106      	bne.n	8013a38 <__ieee754_pow+0x158>
 8013a2a:	4652      	mov	r2, sl
 8013a2c:	465b      	mov	r3, fp
 8013a2e:	4650      	mov	r0, sl
 8013a30:	4659      	mov	r1, fp
 8013a32:	f7ec fd69 	bl	8000508 <__aeabi_dmul>
 8013a36:	e771      	b.n	801391c <__ieee754_pow+0x3c>
 8013a38:	4a4a      	ldr	r2, [pc, #296]	@ (8013b64 <__ieee754_pow+0x284>)
 8013a3a:	4590      	cmp	r8, r2
 8013a3c:	d109      	bne.n	8013a52 <__ieee754_pow+0x172>
 8013a3e:	2d00      	cmp	r5, #0
 8013a40:	db07      	blt.n	8013a52 <__ieee754_pow+0x172>
 8013a42:	4650      	mov	r0, sl
 8013a44:	4659      	mov	r1, fp
 8013a46:	b011      	add	sp, #68	@ 0x44
 8013a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a4c:	f7ff be72 	b.w	8013734 <__ieee754_sqrt>
 8013a50:	2400      	movs	r4, #0
 8013a52:	4650      	mov	r0, sl
 8013a54:	4659      	mov	r1, fp
 8013a56:	9302      	str	r3, [sp, #8]
 8013a58:	f7ff fe62 	bl	8013720 <fabs>
 8013a5c:	9b02      	ldr	r3, [sp, #8]
 8013a5e:	f1b9 0f00 	cmp.w	r9, #0
 8013a62:	d127      	bne.n	8013ab4 <__ieee754_pow+0x1d4>
 8013a64:	4a3d      	ldr	r2, [pc, #244]	@ (8013b5c <__ieee754_pow+0x27c>)
 8013a66:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8013a6a:	4594      	cmp	ip, r2
 8013a6c:	d000      	beq.n	8013a70 <__ieee754_pow+0x190>
 8013a6e:	bb0e      	cbnz	r6, 8013ab4 <__ieee754_pow+0x1d4>
 8013a70:	f1b8 0f00 	cmp.w	r8, #0
 8013a74:	da05      	bge.n	8013a82 <__ieee754_pow+0x1a2>
 8013a76:	4602      	mov	r2, r0
 8013a78:	460b      	mov	r3, r1
 8013a7a:	2000      	movs	r0, #0
 8013a7c:	4937      	ldr	r1, [pc, #220]	@ (8013b5c <__ieee754_pow+0x27c>)
 8013a7e:	f7ec fe6d 	bl	800075c <__aeabi_ddiv>
 8013a82:	2d00      	cmp	r5, #0
 8013a84:	f6bf af4a 	bge.w	801391c <__ieee754_pow+0x3c>
 8013a88:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8013a8c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8013a90:	4326      	orrs	r6, r4
 8013a92:	d108      	bne.n	8013aa6 <__ieee754_pow+0x1c6>
 8013a94:	4602      	mov	r2, r0
 8013a96:	460b      	mov	r3, r1
 8013a98:	4610      	mov	r0, r2
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	f7ec fb7c 	bl	8000198 <__aeabi_dsub>
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	460b      	mov	r3, r1
 8013aa4:	e795      	b.n	80139d2 <__ieee754_pow+0xf2>
 8013aa6:	2c01      	cmp	r4, #1
 8013aa8:	f47f af38 	bne.w	801391c <__ieee754_pow+0x3c>
 8013aac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	e733      	b.n	801391c <__ieee754_pow+0x3c>
 8013ab4:	0fea      	lsrs	r2, r5, #31
 8013ab6:	3a01      	subs	r2, #1
 8013ab8:	ea52 0c04 	orrs.w	ip, r2, r4
 8013abc:	d102      	bne.n	8013ac4 <__ieee754_pow+0x1e4>
 8013abe:	4652      	mov	r2, sl
 8013ac0:	465b      	mov	r3, fp
 8013ac2:	e7e9      	b.n	8013a98 <__ieee754_pow+0x1b8>
 8013ac4:	f04f 0900 	mov.w	r9, #0
 8013ac8:	3c01      	subs	r4, #1
 8013aca:	4314      	orrs	r4, r2
 8013acc:	bf14      	ite	ne
 8013ace:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8013b5c <__ieee754_pow+0x27c>
 8013ad2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8013b68 <__ieee754_pow+0x288>
 8013ad6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8013ada:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8013ade:	f240 8107 	bls.w	8013cf0 <__ieee754_pow+0x410>
 8013ae2:	4b22      	ldr	r3, [pc, #136]	@ (8013b6c <__ieee754_pow+0x28c>)
 8013ae4:	429f      	cmp	r7, r3
 8013ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8013b60 <__ieee754_pow+0x280>)
 8013ae8:	d913      	bls.n	8013b12 <__ieee754_pow+0x232>
 8013aea:	429e      	cmp	r6, r3
 8013aec:	d808      	bhi.n	8013b00 <__ieee754_pow+0x220>
 8013aee:	f1b8 0f00 	cmp.w	r8, #0
 8013af2:	da08      	bge.n	8013b06 <__ieee754_pow+0x226>
 8013af4:	2000      	movs	r0, #0
 8013af6:	b011      	add	sp, #68	@ 0x44
 8013af8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013afc:	f000 bcb0 	b.w	8014460 <__math_oflow>
 8013b00:	f1b8 0f00 	cmp.w	r8, #0
 8013b04:	dcf6      	bgt.n	8013af4 <__ieee754_pow+0x214>
 8013b06:	2000      	movs	r0, #0
 8013b08:	b011      	add	sp, #68	@ 0x44
 8013b0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b0e:	f000 bca2 	b.w	8014456 <__math_uflow>
 8013b12:	429e      	cmp	r6, r3
 8013b14:	d20c      	bcs.n	8013b30 <__ieee754_pow+0x250>
 8013b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	f7ec ff65 	bl	80009ec <__aeabi_dcmplt>
 8013b22:	3800      	subs	r0, #0
 8013b24:	bf18      	it	ne
 8013b26:	2001      	movne	r0, #1
 8013b28:	f1b8 0f00 	cmp.w	r8, #0
 8013b2c:	daec      	bge.n	8013b08 <__ieee754_pow+0x228>
 8013b2e:	e7e2      	b.n	8013af6 <__ieee754_pow+0x216>
 8013b30:	4b0a      	ldr	r3, [pc, #40]	@ (8013b5c <__ieee754_pow+0x27c>)
 8013b32:	2200      	movs	r2, #0
 8013b34:	429e      	cmp	r6, r3
 8013b36:	d91b      	bls.n	8013b70 <__ieee754_pow+0x290>
 8013b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	f7ec ff55 	bl	80009ec <__aeabi_dcmplt>
 8013b42:	3800      	subs	r0, #0
 8013b44:	bf18      	it	ne
 8013b46:	2001      	movne	r0, #1
 8013b48:	f1b8 0f00 	cmp.w	r8, #0
 8013b4c:	dcd3      	bgt.n	8013af6 <__ieee754_pow+0x216>
 8013b4e:	e7db      	b.n	8013b08 <__ieee754_pow+0x228>
 8013b50:	fff00000 	.word	0xfff00000
 8013b54:	7ff00000 	.word	0x7ff00000
 8013b58:	433fffff 	.word	0x433fffff
 8013b5c:	3ff00000 	.word	0x3ff00000
 8013b60:	3fefffff 	.word	0x3fefffff
 8013b64:	3fe00000 	.word	0x3fe00000
 8013b68:	bff00000 	.word	0xbff00000
 8013b6c:	43f00000 	.word	0x43f00000
 8013b70:	4b5b      	ldr	r3, [pc, #364]	@ (8013ce0 <__ieee754_pow+0x400>)
 8013b72:	f7ec fb11 	bl	8000198 <__aeabi_dsub>
 8013b76:	a352      	add	r3, pc, #328	@ (adr r3, 8013cc0 <__ieee754_pow+0x3e0>)
 8013b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7c:	4604      	mov	r4, r0
 8013b7e:	460d      	mov	r5, r1
 8013b80:	f7ec fcc2 	bl	8000508 <__aeabi_dmul>
 8013b84:	a350      	add	r3, pc, #320	@ (adr r3, 8013cc8 <__ieee754_pow+0x3e8>)
 8013b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8a:	4606      	mov	r6, r0
 8013b8c:	460f      	mov	r7, r1
 8013b8e:	4620      	mov	r0, r4
 8013b90:	4629      	mov	r1, r5
 8013b92:	f7ec fcb9 	bl	8000508 <__aeabi_dmul>
 8013b96:	2200      	movs	r2, #0
 8013b98:	4682      	mov	sl, r0
 8013b9a:	468b      	mov	fp, r1
 8013b9c:	4620      	mov	r0, r4
 8013b9e:	4629      	mov	r1, r5
 8013ba0:	4b50      	ldr	r3, [pc, #320]	@ (8013ce4 <__ieee754_pow+0x404>)
 8013ba2:	f7ec fcb1 	bl	8000508 <__aeabi_dmul>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	460b      	mov	r3, r1
 8013baa:	a149      	add	r1, pc, #292	@ (adr r1, 8013cd0 <__ieee754_pow+0x3f0>)
 8013bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bb0:	f7ec faf2 	bl	8000198 <__aeabi_dsub>
 8013bb4:	4622      	mov	r2, r4
 8013bb6:	462b      	mov	r3, r5
 8013bb8:	f7ec fca6 	bl	8000508 <__aeabi_dmul>
 8013bbc:	4602      	mov	r2, r0
 8013bbe:	460b      	mov	r3, r1
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	4949      	ldr	r1, [pc, #292]	@ (8013ce8 <__ieee754_pow+0x408>)
 8013bc4:	f7ec fae8 	bl	8000198 <__aeabi_dsub>
 8013bc8:	4622      	mov	r2, r4
 8013bca:	4680      	mov	r8, r0
 8013bcc:	4689      	mov	r9, r1
 8013bce:	462b      	mov	r3, r5
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	4629      	mov	r1, r5
 8013bd4:	f7ec fc98 	bl	8000508 <__aeabi_dmul>
 8013bd8:	4602      	mov	r2, r0
 8013bda:	460b      	mov	r3, r1
 8013bdc:	4640      	mov	r0, r8
 8013bde:	4649      	mov	r1, r9
 8013be0:	f7ec fc92 	bl	8000508 <__aeabi_dmul>
 8013be4:	a33c      	add	r3, pc, #240	@ (adr r3, 8013cd8 <__ieee754_pow+0x3f8>)
 8013be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bea:	f7ec fc8d 	bl	8000508 <__aeabi_dmul>
 8013bee:	4602      	mov	r2, r0
 8013bf0:	460b      	mov	r3, r1
 8013bf2:	4650      	mov	r0, sl
 8013bf4:	4659      	mov	r1, fp
 8013bf6:	f7ec facf 	bl	8000198 <__aeabi_dsub>
 8013bfa:	2400      	movs	r4, #0
 8013bfc:	4602      	mov	r2, r0
 8013bfe:	460b      	mov	r3, r1
 8013c00:	4680      	mov	r8, r0
 8013c02:	4689      	mov	r9, r1
 8013c04:	4630      	mov	r0, r6
 8013c06:	4639      	mov	r1, r7
 8013c08:	f7ec fac8 	bl	800019c <__adddf3>
 8013c0c:	4632      	mov	r2, r6
 8013c0e:	463b      	mov	r3, r7
 8013c10:	4620      	mov	r0, r4
 8013c12:	460d      	mov	r5, r1
 8013c14:	f7ec fac0 	bl	8000198 <__aeabi_dsub>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	4640      	mov	r0, r8
 8013c1e:	4649      	mov	r1, r9
 8013c20:	f7ec faba 	bl	8000198 <__aeabi_dsub>
 8013c24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	9304      	str	r3, [sp, #16]
 8013c30:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013c34:	4606      	mov	r6, r0
 8013c36:	460f      	mov	r7, r1
 8013c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c3c:	4652      	mov	r2, sl
 8013c3e:	465b      	mov	r3, fp
 8013c40:	f7ec faaa 	bl	8000198 <__aeabi_dsub>
 8013c44:	4622      	mov	r2, r4
 8013c46:	462b      	mov	r3, r5
 8013c48:	f7ec fc5e 	bl	8000508 <__aeabi_dmul>
 8013c4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c50:	4680      	mov	r8, r0
 8013c52:	4689      	mov	r9, r1
 8013c54:	4630      	mov	r0, r6
 8013c56:	4639      	mov	r1, r7
 8013c58:	f7ec fc56 	bl	8000508 <__aeabi_dmul>
 8013c5c:	4602      	mov	r2, r0
 8013c5e:	460b      	mov	r3, r1
 8013c60:	4640      	mov	r0, r8
 8013c62:	4649      	mov	r1, r9
 8013c64:	f7ec fa9a 	bl	800019c <__adddf3>
 8013c68:	4652      	mov	r2, sl
 8013c6a:	465b      	mov	r3, fp
 8013c6c:	4606      	mov	r6, r0
 8013c6e:	460f      	mov	r7, r1
 8013c70:	4620      	mov	r0, r4
 8013c72:	4629      	mov	r1, r5
 8013c74:	f7ec fc48 	bl	8000508 <__aeabi_dmul>
 8013c78:	460b      	mov	r3, r1
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	4680      	mov	r8, r0
 8013c7e:	4689      	mov	r9, r1
 8013c80:	4630      	mov	r0, r6
 8013c82:	4639      	mov	r1, r7
 8013c84:	f7ec fa8a 	bl	800019c <__adddf3>
 8013c88:	4b18      	ldr	r3, [pc, #96]	@ (8013cec <__ieee754_pow+0x40c>)
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	4299      	cmp	r1, r3
 8013c8e:	460d      	mov	r5, r1
 8013c90:	468a      	mov	sl, r1
 8013c92:	468b      	mov	fp, r1
 8013c94:	f340 82e0 	ble.w	8014258 <__ieee754_pow+0x978>
 8013c98:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013c9c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013ca0:	4303      	orrs	r3, r0
 8013ca2:	f000 81df 	beq.w	8014064 <__ieee754_pow+0x784>
 8013ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013caa:	2200      	movs	r2, #0
 8013cac:	2300      	movs	r3, #0
 8013cae:	f7ec fe9d 	bl	80009ec <__aeabi_dcmplt>
 8013cb2:	3800      	subs	r0, #0
 8013cb4:	bf18      	it	ne
 8013cb6:	2001      	movne	r0, #1
 8013cb8:	e71d      	b.n	8013af6 <__ieee754_pow+0x216>
 8013cba:	bf00      	nop
 8013cbc:	f3af 8000 	nop.w
 8013cc0:	60000000 	.word	0x60000000
 8013cc4:	3ff71547 	.word	0x3ff71547
 8013cc8:	f85ddf44 	.word	0xf85ddf44
 8013ccc:	3e54ae0b 	.word	0x3e54ae0b
 8013cd0:	55555555 	.word	0x55555555
 8013cd4:	3fd55555 	.word	0x3fd55555
 8013cd8:	652b82fe 	.word	0x652b82fe
 8013cdc:	3ff71547 	.word	0x3ff71547
 8013ce0:	3ff00000 	.word	0x3ff00000
 8013ce4:	3fd00000 	.word	0x3fd00000
 8013ce8:	3fe00000 	.word	0x3fe00000
 8013cec:	408fffff 	.word	0x408fffff
 8013cf0:	4ad3      	ldr	r2, [pc, #844]	@ (8014040 <__ieee754_pow+0x760>)
 8013cf2:	402a      	ands	r2, r5
 8013cf4:	2a00      	cmp	r2, #0
 8013cf6:	f040 817a 	bne.w	8013fee <__ieee754_pow+0x70e>
 8013cfa:	4bd2      	ldr	r3, [pc, #840]	@ (8014044 <__ieee754_pow+0x764>)
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	f7ec fc03 	bl	8000508 <__aeabi_dmul>
 8013d02:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8013d06:	460b      	mov	r3, r1
 8013d08:	151a      	asrs	r2, r3, #20
 8013d0a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013d0e:	4422      	add	r2, r4
 8013d10:	920a      	str	r2, [sp, #40]	@ 0x28
 8013d12:	4acd      	ldr	r2, [pc, #820]	@ (8014048 <__ieee754_pow+0x768>)
 8013d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d18:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013d22:	dd08      	ble.n	8013d36 <__ieee754_pow+0x456>
 8013d24:	4ac9      	ldr	r2, [pc, #804]	@ (801404c <__ieee754_pow+0x76c>)
 8013d26:	4293      	cmp	r3, r2
 8013d28:	f340 8163 	ble.w	8013ff2 <__ieee754_pow+0x712>
 8013d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d2e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013d32:	3301      	adds	r3, #1
 8013d34:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d36:	2600      	movs	r6, #0
 8013d38:	00f3      	lsls	r3, r6, #3
 8013d3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013d3c:	4bc4      	ldr	r3, [pc, #784]	@ (8014050 <__ieee754_pow+0x770>)
 8013d3e:	4629      	mov	r1, r5
 8013d40:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013d44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013d48:	461a      	mov	r2, r3
 8013d4a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8013d4e:	4623      	mov	r3, r4
 8013d50:	4682      	mov	sl, r0
 8013d52:	f7ec fa21 	bl	8000198 <__aeabi_dsub>
 8013d56:	4652      	mov	r2, sl
 8013d58:	462b      	mov	r3, r5
 8013d5a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013d5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013d62:	f7ec fa1b 	bl	800019c <__adddf3>
 8013d66:	4602      	mov	r2, r0
 8013d68:	460b      	mov	r3, r1
 8013d6a:	2000      	movs	r0, #0
 8013d6c:	49b9      	ldr	r1, [pc, #740]	@ (8014054 <__ieee754_pow+0x774>)
 8013d6e:	f7ec fcf5 	bl	800075c <__aeabi_ddiv>
 8013d72:	4602      	mov	r2, r0
 8013d74:	460b      	mov	r3, r1
 8013d76:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013d7e:	f7ec fbc3 	bl	8000508 <__aeabi_dmul>
 8013d82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013d86:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8013d8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013d8e:	2300      	movs	r3, #0
 8013d90:	2200      	movs	r2, #0
 8013d92:	46ab      	mov	fp, r5
 8013d94:	106d      	asrs	r5, r5, #1
 8013d96:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013d9a:	9304      	str	r3, [sp, #16]
 8013d9c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013da0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013da4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8013da8:	4640      	mov	r0, r8
 8013daa:	4649      	mov	r1, r9
 8013dac:	4614      	mov	r4, r2
 8013dae:	461d      	mov	r5, r3
 8013db0:	f7ec fbaa 	bl	8000508 <__aeabi_dmul>
 8013db4:	4602      	mov	r2, r0
 8013db6:	460b      	mov	r3, r1
 8013db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013dbc:	f7ec f9ec 	bl	8000198 <__aeabi_dsub>
 8013dc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013dc4:	4606      	mov	r6, r0
 8013dc6:	460f      	mov	r7, r1
 8013dc8:	4620      	mov	r0, r4
 8013dca:	4629      	mov	r1, r5
 8013dcc:	f7ec f9e4 	bl	8000198 <__aeabi_dsub>
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	460b      	mov	r3, r1
 8013dd4:	4650      	mov	r0, sl
 8013dd6:	4659      	mov	r1, fp
 8013dd8:	f7ec f9de 	bl	8000198 <__aeabi_dsub>
 8013ddc:	4642      	mov	r2, r8
 8013dde:	464b      	mov	r3, r9
 8013de0:	f7ec fb92 	bl	8000508 <__aeabi_dmul>
 8013de4:	4602      	mov	r2, r0
 8013de6:	460b      	mov	r3, r1
 8013de8:	4630      	mov	r0, r6
 8013dea:	4639      	mov	r1, r7
 8013dec:	f7ec f9d4 	bl	8000198 <__aeabi_dsub>
 8013df0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013df4:	f7ec fb88 	bl	8000508 <__aeabi_dmul>
 8013df8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013dfc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e00:	4610      	mov	r0, r2
 8013e02:	4619      	mov	r1, r3
 8013e04:	f7ec fb80 	bl	8000508 <__aeabi_dmul>
 8013e08:	a37b      	add	r3, pc, #492	@ (adr r3, 8013ff8 <__ieee754_pow+0x718>)
 8013e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0e:	4604      	mov	r4, r0
 8013e10:	460d      	mov	r5, r1
 8013e12:	f7ec fb79 	bl	8000508 <__aeabi_dmul>
 8013e16:	a37a      	add	r3, pc, #488	@ (adr r3, 8014000 <__ieee754_pow+0x720>)
 8013e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e1c:	f7ec f9be 	bl	800019c <__adddf3>
 8013e20:	4622      	mov	r2, r4
 8013e22:	462b      	mov	r3, r5
 8013e24:	f7ec fb70 	bl	8000508 <__aeabi_dmul>
 8013e28:	a377      	add	r3, pc, #476	@ (adr r3, 8014008 <__ieee754_pow+0x728>)
 8013e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2e:	f7ec f9b5 	bl	800019c <__adddf3>
 8013e32:	4622      	mov	r2, r4
 8013e34:	462b      	mov	r3, r5
 8013e36:	f7ec fb67 	bl	8000508 <__aeabi_dmul>
 8013e3a:	a375      	add	r3, pc, #468	@ (adr r3, 8014010 <__ieee754_pow+0x730>)
 8013e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e40:	f7ec f9ac 	bl	800019c <__adddf3>
 8013e44:	4622      	mov	r2, r4
 8013e46:	462b      	mov	r3, r5
 8013e48:	f7ec fb5e 	bl	8000508 <__aeabi_dmul>
 8013e4c:	a372      	add	r3, pc, #456	@ (adr r3, 8014018 <__ieee754_pow+0x738>)
 8013e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e52:	f7ec f9a3 	bl	800019c <__adddf3>
 8013e56:	4622      	mov	r2, r4
 8013e58:	462b      	mov	r3, r5
 8013e5a:	f7ec fb55 	bl	8000508 <__aeabi_dmul>
 8013e5e:	a370      	add	r3, pc, #448	@ (adr r3, 8014020 <__ieee754_pow+0x740>)
 8013e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e64:	f7ec f99a 	bl	800019c <__adddf3>
 8013e68:	4622      	mov	r2, r4
 8013e6a:	4606      	mov	r6, r0
 8013e6c:	460f      	mov	r7, r1
 8013e6e:	462b      	mov	r3, r5
 8013e70:	4620      	mov	r0, r4
 8013e72:	4629      	mov	r1, r5
 8013e74:	f7ec fb48 	bl	8000508 <__aeabi_dmul>
 8013e78:	4602      	mov	r2, r0
 8013e7a:	460b      	mov	r3, r1
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	4639      	mov	r1, r7
 8013e80:	f7ec fb42 	bl	8000508 <__aeabi_dmul>
 8013e84:	4604      	mov	r4, r0
 8013e86:	460d      	mov	r5, r1
 8013e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e8c:	4642      	mov	r2, r8
 8013e8e:	464b      	mov	r3, r9
 8013e90:	f7ec f984 	bl	800019c <__adddf3>
 8013e94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e98:	f7ec fb36 	bl	8000508 <__aeabi_dmul>
 8013e9c:	4622      	mov	r2, r4
 8013e9e:	462b      	mov	r3, r5
 8013ea0:	f7ec f97c 	bl	800019c <__adddf3>
 8013ea4:	4642      	mov	r2, r8
 8013ea6:	4682      	mov	sl, r0
 8013ea8:	468b      	mov	fp, r1
 8013eaa:	464b      	mov	r3, r9
 8013eac:	4640      	mov	r0, r8
 8013eae:	4649      	mov	r1, r9
 8013eb0:	f7ec fb2a 	bl	8000508 <__aeabi_dmul>
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	4b68      	ldr	r3, [pc, #416]	@ (8014058 <__ieee754_pow+0x778>)
 8013eb8:	4606      	mov	r6, r0
 8013eba:	460f      	mov	r7, r1
 8013ebc:	f7ec f96e 	bl	800019c <__adddf3>
 8013ec0:	4652      	mov	r2, sl
 8013ec2:	465b      	mov	r3, fp
 8013ec4:	f7ec f96a 	bl	800019c <__adddf3>
 8013ec8:	2400      	movs	r4, #0
 8013eca:	460d      	mov	r5, r1
 8013ecc:	4622      	mov	r2, r4
 8013ece:	460b      	mov	r3, r1
 8013ed0:	4640      	mov	r0, r8
 8013ed2:	4649      	mov	r1, r9
 8013ed4:	f7ec fb18 	bl	8000508 <__aeabi_dmul>
 8013ed8:	2200      	movs	r2, #0
 8013eda:	4680      	mov	r8, r0
 8013edc:	4689      	mov	r9, r1
 8013ede:	4620      	mov	r0, r4
 8013ee0:	4629      	mov	r1, r5
 8013ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8014058 <__ieee754_pow+0x778>)
 8013ee4:	f7ec f958 	bl	8000198 <__aeabi_dsub>
 8013ee8:	4632      	mov	r2, r6
 8013eea:	463b      	mov	r3, r7
 8013eec:	f7ec f954 	bl	8000198 <__aeabi_dsub>
 8013ef0:	4602      	mov	r2, r0
 8013ef2:	460b      	mov	r3, r1
 8013ef4:	4650      	mov	r0, sl
 8013ef6:	4659      	mov	r1, fp
 8013ef8:	f7ec f94e 	bl	8000198 <__aeabi_dsub>
 8013efc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f00:	f7ec fb02 	bl	8000508 <__aeabi_dmul>
 8013f04:	4622      	mov	r2, r4
 8013f06:	4606      	mov	r6, r0
 8013f08:	460f      	mov	r7, r1
 8013f0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013f0e:	462b      	mov	r3, r5
 8013f10:	f7ec fafa 	bl	8000508 <__aeabi_dmul>
 8013f14:	4602      	mov	r2, r0
 8013f16:	460b      	mov	r3, r1
 8013f18:	4630      	mov	r0, r6
 8013f1a:	4639      	mov	r1, r7
 8013f1c:	f7ec f93e 	bl	800019c <__adddf3>
 8013f20:	2400      	movs	r4, #0
 8013f22:	4606      	mov	r6, r0
 8013f24:	460f      	mov	r7, r1
 8013f26:	4602      	mov	r2, r0
 8013f28:	460b      	mov	r3, r1
 8013f2a:	4640      	mov	r0, r8
 8013f2c:	4649      	mov	r1, r9
 8013f2e:	f7ec f935 	bl	800019c <__adddf3>
 8013f32:	a33d      	add	r3, pc, #244	@ (adr r3, 8014028 <__ieee754_pow+0x748>)
 8013f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f38:	4620      	mov	r0, r4
 8013f3a:	460d      	mov	r5, r1
 8013f3c:	f7ec fae4 	bl	8000508 <__aeabi_dmul>
 8013f40:	4642      	mov	r2, r8
 8013f42:	464b      	mov	r3, r9
 8013f44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013f48:	4620      	mov	r0, r4
 8013f4a:	4629      	mov	r1, r5
 8013f4c:	f7ec f924 	bl	8000198 <__aeabi_dsub>
 8013f50:	4602      	mov	r2, r0
 8013f52:	460b      	mov	r3, r1
 8013f54:	4630      	mov	r0, r6
 8013f56:	4639      	mov	r1, r7
 8013f58:	f7ec f91e 	bl	8000198 <__aeabi_dsub>
 8013f5c:	a334      	add	r3, pc, #208	@ (adr r3, 8014030 <__ieee754_pow+0x750>)
 8013f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f62:	f7ec fad1 	bl	8000508 <__aeabi_dmul>
 8013f66:	a334      	add	r3, pc, #208	@ (adr r3, 8014038 <__ieee754_pow+0x758>)
 8013f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6c:	4606      	mov	r6, r0
 8013f6e:	460f      	mov	r7, r1
 8013f70:	4620      	mov	r0, r4
 8013f72:	4629      	mov	r1, r5
 8013f74:	f7ec fac8 	bl	8000508 <__aeabi_dmul>
 8013f78:	4602      	mov	r2, r0
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	4630      	mov	r0, r6
 8013f7e:	4639      	mov	r1, r7
 8013f80:	f7ec f90c 	bl	800019c <__adddf3>
 8013f84:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f86:	4b35      	ldr	r3, [pc, #212]	@ (801405c <__ieee754_pow+0x77c>)
 8013f88:	2400      	movs	r4, #0
 8013f8a:	4413      	add	r3, r2
 8013f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f90:	f7ec f904 	bl	800019c <__adddf3>
 8013f94:	4682      	mov	sl, r0
 8013f96:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013f98:	468b      	mov	fp, r1
 8013f9a:	f7ec fa4b 	bl	8000434 <__aeabi_i2d>
 8013f9e:	4606      	mov	r6, r0
 8013fa0:	460f      	mov	r7, r1
 8013fa2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8014060 <__ieee754_pow+0x780>)
 8013fa6:	4413      	add	r3, r2
 8013fa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013fac:	4652      	mov	r2, sl
 8013fae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fb2:	465b      	mov	r3, fp
 8013fb4:	f7ec f8f2 	bl	800019c <__adddf3>
 8013fb8:	4642      	mov	r2, r8
 8013fba:	464b      	mov	r3, r9
 8013fbc:	f7ec f8ee 	bl	800019c <__adddf3>
 8013fc0:	4632      	mov	r2, r6
 8013fc2:	463b      	mov	r3, r7
 8013fc4:	f7ec f8ea 	bl	800019c <__adddf3>
 8013fc8:	4632      	mov	r2, r6
 8013fca:	463b      	mov	r3, r7
 8013fcc:	4620      	mov	r0, r4
 8013fce:	460d      	mov	r5, r1
 8013fd0:	f7ec f8e2 	bl	8000198 <__aeabi_dsub>
 8013fd4:	4642      	mov	r2, r8
 8013fd6:	464b      	mov	r3, r9
 8013fd8:	f7ec f8de 	bl	8000198 <__aeabi_dsub>
 8013fdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fe0:	f7ec f8da 	bl	8000198 <__aeabi_dsub>
 8013fe4:	4602      	mov	r2, r0
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	4650      	mov	r0, sl
 8013fea:	4659      	mov	r1, fp
 8013fec:	e618      	b.n	8013c20 <__ieee754_pow+0x340>
 8013fee:	2400      	movs	r4, #0
 8013ff0:	e68a      	b.n	8013d08 <__ieee754_pow+0x428>
 8013ff2:	2601      	movs	r6, #1
 8013ff4:	e6a0      	b.n	8013d38 <__ieee754_pow+0x458>
 8013ff6:	bf00      	nop
 8013ff8:	4a454eef 	.word	0x4a454eef
 8013ffc:	3fca7e28 	.word	0x3fca7e28
 8014000:	93c9db65 	.word	0x93c9db65
 8014004:	3fcd864a 	.word	0x3fcd864a
 8014008:	a91d4101 	.word	0xa91d4101
 801400c:	3fd17460 	.word	0x3fd17460
 8014010:	518f264d 	.word	0x518f264d
 8014014:	3fd55555 	.word	0x3fd55555
 8014018:	db6fabff 	.word	0xdb6fabff
 801401c:	3fdb6db6 	.word	0x3fdb6db6
 8014020:	33333303 	.word	0x33333303
 8014024:	3fe33333 	.word	0x3fe33333
 8014028:	e0000000 	.word	0xe0000000
 801402c:	3feec709 	.word	0x3feec709
 8014030:	dc3a03fd 	.word	0xdc3a03fd
 8014034:	3feec709 	.word	0x3feec709
 8014038:	145b01f5 	.word	0x145b01f5
 801403c:	be3e2fe0 	.word	0xbe3e2fe0
 8014040:	7ff00000 	.word	0x7ff00000
 8014044:	43400000 	.word	0x43400000
 8014048:	0003988e 	.word	0x0003988e
 801404c:	000bb679 	.word	0x000bb679
 8014050:	08014b18 	.word	0x08014b18
 8014054:	3ff00000 	.word	0x3ff00000
 8014058:	40080000 	.word	0x40080000
 801405c:	08014af8 	.word	0x08014af8
 8014060:	08014b08 	.word	0x08014b08
 8014064:	a39a      	add	r3, pc, #616	@ (adr r3, 80142d0 <__ieee754_pow+0x9f0>)
 8014066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801406a:	4630      	mov	r0, r6
 801406c:	4639      	mov	r1, r7
 801406e:	f7ec f895 	bl	800019c <__adddf3>
 8014072:	4642      	mov	r2, r8
 8014074:	e9cd 0100 	strd	r0, r1, [sp]
 8014078:	464b      	mov	r3, r9
 801407a:	4620      	mov	r0, r4
 801407c:	4629      	mov	r1, r5
 801407e:	f7ec f88b 	bl	8000198 <__aeabi_dsub>
 8014082:	4602      	mov	r2, r0
 8014084:	460b      	mov	r3, r1
 8014086:	e9dd 0100 	ldrd	r0, r1, [sp]
 801408a:	f7ec fccd 	bl	8000a28 <__aeabi_dcmpgt>
 801408e:	2800      	cmp	r0, #0
 8014090:	f47f ae09 	bne.w	8013ca6 <__ieee754_pow+0x3c6>
 8014094:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014098:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801409c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80140a0:	fa43 fa0a 	asr.w	sl, r3, sl
 80140a4:	44da      	add	sl, fp
 80140a6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80140aa:	489b      	ldr	r0, [pc, #620]	@ (8014318 <__ieee754_pow+0xa38>)
 80140ac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80140b0:	4108      	asrs	r0, r1
 80140b2:	ea00 030a 	and.w	r3, r0, sl
 80140b6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80140ba:	f1c1 0114 	rsb	r1, r1, #20
 80140be:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80140c2:	4640      	mov	r0, r8
 80140c4:	fa4a fa01 	asr.w	sl, sl, r1
 80140c8:	f1bb 0f00 	cmp.w	fp, #0
 80140cc:	4649      	mov	r1, r9
 80140ce:	f04f 0200 	mov.w	r2, #0
 80140d2:	bfb8      	it	lt
 80140d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80140d8:	f7ec f85e 	bl	8000198 <__aeabi_dsub>
 80140dc:	4680      	mov	r8, r0
 80140de:	4689      	mov	r9, r1
 80140e0:	2400      	movs	r4, #0
 80140e2:	4632      	mov	r2, r6
 80140e4:	463b      	mov	r3, r7
 80140e6:	4640      	mov	r0, r8
 80140e8:	4649      	mov	r1, r9
 80140ea:	f7ec f857 	bl	800019c <__adddf3>
 80140ee:	a37a      	add	r3, pc, #488	@ (adr r3, 80142d8 <__ieee754_pow+0x9f8>)
 80140f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f4:	4620      	mov	r0, r4
 80140f6:	460d      	mov	r5, r1
 80140f8:	f7ec fa06 	bl	8000508 <__aeabi_dmul>
 80140fc:	4642      	mov	r2, r8
 80140fe:	464b      	mov	r3, r9
 8014100:	e9cd 0100 	strd	r0, r1, [sp]
 8014104:	4620      	mov	r0, r4
 8014106:	4629      	mov	r1, r5
 8014108:	f7ec f846 	bl	8000198 <__aeabi_dsub>
 801410c:	4602      	mov	r2, r0
 801410e:	460b      	mov	r3, r1
 8014110:	4630      	mov	r0, r6
 8014112:	4639      	mov	r1, r7
 8014114:	f7ec f840 	bl	8000198 <__aeabi_dsub>
 8014118:	a371      	add	r3, pc, #452	@ (adr r3, 80142e0 <__ieee754_pow+0xa00>)
 801411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801411e:	f7ec f9f3 	bl	8000508 <__aeabi_dmul>
 8014122:	a371      	add	r3, pc, #452	@ (adr r3, 80142e8 <__ieee754_pow+0xa08>)
 8014124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014128:	4680      	mov	r8, r0
 801412a:	4689      	mov	r9, r1
 801412c:	4620      	mov	r0, r4
 801412e:	4629      	mov	r1, r5
 8014130:	f7ec f9ea 	bl	8000508 <__aeabi_dmul>
 8014134:	4602      	mov	r2, r0
 8014136:	460b      	mov	r3, r1
 8014138:	4640      	mov	r0, r8
 801413a:	4649      	mov	r1, r9
 801413c:	f7ec f82e 	bl	800019c <__adddf3>
 8014140:	4604      	mov	r4, r0
 8014142:	460d      	mov	r5, r1
 8014144:	4602      	mov	r2, r0
 8014146:	460b      	mov	r3, r1
 8014148:	e9dd 0100 	ldrd	r0, r1, [sp]
 801414c:	f7ec f826 	bl	800019c <__adddf3>
 8014150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014154:	4680      	mov	r8, r0
 8014156:	4689      	mov	r9, r1
 8014158:	f7ec f81e 	bl	8000198 <__aeabi_dsub>
 801415c:	4602      	mov	r2, r0
 801415e:	460b      	mov	r3, r1
 8014160:	4620      	mov	r0, r4
 8014162:	4629      	mov	r1, r5
 8014164:	f7ec f818 	bl	8000198 <__aeabi_dsub>
 8014168:	4642      	mov	r2, r8
 801416a:	4606      	mov	r6, r0
 801416c:	460f      	mov	r7, r1
 801416e:	464b      	mov	r3, r9
 8014170:	4640      	mov	r0, r8
 8014172:	4649      	mov	r1, r9
 8014174:	f7ec f9c8 	bl	8000508 <__aeabi_dmul>
 8014178:	a35d      	add	r3, pc, #372	@ (adr r3, 80142f0 <__ieee754_pow+0xa10>)
 801417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417e:	4604      	mov	r4, r0
 8014180:	460d      	mov	r5, r1
 8014182:	f7ec f9c1 	bl	8000508 <__aeabi_dmul>
 8014186:	a35c      	add	r3, pc, #368	@ (adr r3, 80142f8 <__ieee754_pow+0xa18>)
 8014188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418c:	f7ec f804 	bl	8000198 <__aeabi_dsub>
 8014190:	4622      	mov	r2, r4
 8014192:	462b      	mov	r3, r5
 8014194:	f7ec f9b8 	bl	8000508 <__aeabi_dmul>
 8014198:	a359      	add	r3, pc, #356	@ (adr r3, 8014300 <__ieee754_pow+0xa20>)
 801419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419e:	f7eb fffd 	bl	800019c <__adddf3>
 80141a2:	4622      	mov	r2, r4
 80141a4:	462b      	mov	r3, r5
 80141a6:	f7ec f9af 	bl	8000508 <__aeabi_dmul>
 80141aa:	a357      	add	r3, pc, #348	@ (adr r3, 8014308 <__ieee754_pow+0xa28>)
 80141ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b0:	f7eb fff2 	bl	8000198 <__aeabi_dsub>
 80141b4:	4622      	mov	r2, r4
 80141b6:	462b      	mov	r3, r5
 80141b8:	f7ec f9a6 	bl	8000508 <__aeabi_dmul>
 80141bc:	a354      	add	r3, pc, #336	@ (adr r3, 8014310 <__ieee754_pow+0xa30>)
 80141be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c2:	f7eb ffeb 	bl	800019c <__adddf3>
 80141c6:	4622      	mov	r2, r4
 80141c8:	462b      	mov	r3, r5
 80141ca:	f7ec f99d 	bl	8000508 <__aeabi_dmul>
 80141ce:	4602      	mov	r2, r0
 80141d0:	460b      	mov	r3, r1
 80141d2:	4640      	mov	r0, r8
 80141d4:	4649      	mov	r1, r9
 80141d6:	f7eb ffdf 	bl	8000198 <__aeabi_dsub>
 80141da:	4604      	mov	r4, r0
 80141dc:	460d      	mov	r5, r1
 80141de:	4602      	mov	r2, r0
 80141e0:	460b      	mov	r3, r1
 80141e2:	4640      	mov	r0, r8
 80141e4:	4649      	mov	r1, r9
 80141e6:	f7ec f98f 	bl	8000508 <__aeabi_dmul>
 80141ea:	2200      	movs	r2, #0
 80141ec:	e9cd 0100 	strd	r0, r1, [sp]
 80141f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80141f4:	4620      	mov	r0, r4
 80141f6:	4629      	mov	r1, r5
 80141f8:	f7eb ffce 	bl	8000198 <__aeabi_dsub>
 80141fc:	4602      	mov	r2, r0
 80141fe:	460b      	mov	r3, r1
 8014200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014204:	f7ec faaa 	bl	800075c <__aeabi_ddiv>
 8014208:	4632      	mov	r2, r6
 801420a:	4604      	mov	r4, r0
 801420c:	460d      	mov	r5, r1
 801420e:	463b      	mov	r3, r7
 8014210:	4640      	mov	r0, r8
 8014212:	4649      	mov	r1, r9
 8014214:	f7ec f978 	bl	8000508 <__aeabi_dmul>
 8014218:	4632      	mov	r2, r6
 801421a:	463b      	mov	r3, r7
 801421c:	f7eb ffbe 	bl	800019c <__adddf3>
 8014220:	4602      	mov	r2, r0
 8014222:	460b      	mov	r3, r1
 8014224:	4620      	mov	r0, r4
 8014226:	4629      	mov	r1, r5
 8014228:	f7eb ffb6 	bl	8000198 <__aeabi_dsub>
 801422c:	4642      	mov	r2, r8
 801422e:	464b      	mov	r3, r9
 8014230:	f7eb ffb2 	bl	8000198 <__aeabi_dsub>
 8014234:	4602      	mov	r2, r0
 8014236:	460b      	mov	r3, r1
 8014238:	2000      	movs	r0, #0
 801423a:	4938      	ldr	r1, [pc, #224]	@ (801431c <__ieee754_pow+0xa3c>)
 801423c:	f7eb ffac 	bl	8000198 <__aeabi_dsub>
 8014240:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014244:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8014248:	da2e      	bge.n	80142a8 <__ieee754_pow+0x9c8>
 801424a:	4652      	mov	r2, sl
 801424c:	f000 f870 	bl	8014330 <scalbn>
 8014250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014254:	f7ff bbed 	b.w	8013a32 <__ieee754_pow+0x152>
 8014258:	4c31      	ldr	r4, [pc, #196]	@ (8014320 <__ieee754_pow+0xa40>)
 801425a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801425e:	42a3      	cmp	r3, r4
 8014260:	d91a      	bls.n	8014298 <__ieee754_pow+0x9b8>
 8014262:	4b30      	ldr	r3, [pc, #192]	@ (8014324 <__ieee754_pow+0xa44>)
 8014264:	440b      	add	r3, r1
 8014266:	4303      	orrs	r3, r0
 8014268:	d009      	beq.n	801427e <__ieee754_pow+0x99e>
 801426a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801426e:	2200      	movs	r2, #0
 8014270:	2300      	movs	r3, #0
 8014272:	f7ec fbbb 	bl	80009ec <__aeabi_dcmplt>
 8014276:	3800      	subs	r0, #0
 8014278:	bf18      	it	ne
 801427a:	2001      	movne	r0, #1
 801427c:	e444      	b.n	8013b08 <__ieee754_pow+0x228>
 801427e:	4642      	mov	r2, r8
 8014280:	464b      	mov	r3, r9
 8014282:	f7eb ff89 	bl	8000198 <__aeabi_dsub>
 8014286:	4632      	mov	r2, r6
 8014288:	463b      	mov	r3, r7
 801428a:	f7ec fbc3 	bl	8000a14 <__aeabi_dcmpge>
 801428e:	2800      	cmp	r0, #0
 8014290:	d1eb      	bne.n	801426a <__ieee754_pow+0x98a>
 8014292:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8014328 <__ieee754_pow+0xa48>
 8014296:	e6fd      	b.n	8014094 <__ieee754_pow+0x7b4>
 8014298:	469a      	mov	sl, r3
 801429a:	4b24      	ldr	r3, [pc, #144]	@ (801432c <__ieee754_pow+0xa4c>)
 801429c:	459a      	cmp	sl, r3
 801429e:	f63f aef9 	bhi.w	8014094 <__ieee754_pow+0x7b4>
 80142a2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80142a6:	e71b      	b.n	80140e0 <__ieee754_pow+0x800>
 80142a8:	4621      	mov	r1, r4
 80142aa:	e7d1      	b.n	8014250 <__ieee754_pow+0x970>
 80142ac:	2000      	movs	r0, #0
 80142ae:	491b      	ldr	r1, [pc, #108]	@ (801431c <__ieee754_pow+0xa3c>)
 80142b0:	f7ff bb34 	b.w	801391c <__ieee754_pow+0x3c>
 80142b4:	2000      	movs	r0, #0
 80142b6:	2100      	movs	r1, #0
 80142b8:	f7ff bb30 	b.w	801391c <__ieee754_pow+0x3c>
 80142bc:	4650      	mov	r0, sl
 80142be:	4659      	mov	r1, fp
 80142c0:	f7ff bb2c 	b.w	801391c <__ieee754_pow+0x3c>
 80142c4:	460c      	mov	r4, r1
 80142c6:	f7ff bb79 	b.w	80139bc <__ieee754_pow+0xdc>
 80142ca:	2400      	movs	r4, #0
 80142cc:	f7ff bb64 	b.w	8013998 <__ieee754_pow+0xb8>
 80142d0:	652b82fe 	.word	0x652b82fe
 80142d4:	3c971547 	.word	0x3c971547
 80142d8:	00000000 	.word	0x00000000
 80142dc:	3fe62e43 	.word	0x3fe62e43
 80142e0:	fefa39ef 	.word	0xfefa39ef
 80142e4:	3fe62e42 	.word	0x3fe62e42
 80142e8:	0ca86c39 	.word	0x0ca86c39
 80142ec:	be205c61 	.word	0xbe205c61
 80142f0:	72bea4d0 	.word	0x72bea4d0
 80142f4:	3e663769 	.word	0x3e663769
 80142f8:	c5d26bf1 	.word	0xc5d26bf1
 80142fc:	3ebbbd41 	.word	0x3ebbbd41
 8014300:	af25de2c 	.word	0xaf25de2c
 8014304:	3f11566a 	.word	0x3f11566a
 8014308:	16bebd93 	.word	0x16bebd93
 801430c:	3f66c16c 	.word	0x3f66c16c
 8014310:	5555553e 	.word	0x5555553e
 8014314:	3fc55555 	.word	0x3fc55555
 8014318:	fff00000 	.word	0xfff00000
 801431c:	3ff00000 	.word	0x3ff00000
 8014320:	4090cbff 	.word	0x4090cbff
 8014324:	3f6f3400 	.word	0x3f6f3400
 8014328:	4090cc00 	.word	0x4090cc00
 801432c:	3fe00000 	.word	0x3fe00000

08014330 <scalbn>:
 8014330:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8014334:	4616      	mov	r6, r2
 8014336:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801433a:	4683      	mov	fp, r0
 801433c:	468c      	mov	ip, r1
 801433e:	460b      	mov	r3, r1
 8014340:	b982      	cbnz	r2, 8014364 <scalbn+0x34>
 8014342:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014346:	4303      	orrs	r3, r0
 8014348:	d039      	beq.n	80143be <scalbn+0x8e>
 801434a:	4b2f      	ldr	r3, [pc, #188]	@ (8014408 <scalbn+0xd8>)
 801434c:	2200      	movs	r2, #0
 801434e:	f7ec f8db 	bl	8000508 <__aeabi_dmul>
 8014352:	4b2e      	ldr	r3, [pc, #184]	@ (801440c <scalbn+0xdc>)
 8014354:	4683      	mov	fp, r0
 8014356:	429e      	cmp	r6, r3
 8014358:	468c      	mov	ip, r1
 801435a:	da0d      	bge.n	8014378 <scalbn+0x48>
 801435c:	a326      	add	r3, pc, #152	@ (adr r3, 80143f8 <scalbn+0xc8>)
 801435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014362:	e01b      	b.n	801439c <scalbn+0x6c>
 8014364:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8014368:	42ba      	cmp	r2, r7
 801436a:	d109      	bne.n	8014380 <scalbn+0x50>
 801436c:	4602      	mov	r2, r0
 801436e:	f7eb ff15 	bl	800019c <__adddf3>
 8014372:	4683      	mov	fp, r0
 8014374:	468c      	mov	ip, r1
 8014376:	e022      	b.n	80143be <scalbn+0x8e>
 8014378:	460b      	mov	r3, r1
 801437a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801437e:	3a36      	subs	r2, #54	@ 0x36
 8014380:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8014384:	428e      	cmp	r6, r1
 8014386:	dd0c      	ble.n	80143a2 <scalbn+0x72>
 8014388:	a31d      	add	r3, pc, #116	@ (adr r3, 8014400 <scalbn+0xd0>)
 801438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801438e:	461c      	mov	r4, r3
 8014390:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8014394:	f361 74df 	bfi	r4, r1, #31, #1
 8014398:	4621      	mov	r1, r4
 801439a:	481d      	ldr	r0, [pc, #116]	@ (8014410 <scalbn+0xe0>)
 801439c:	f7ec f8b4 	bl	8000508 <__aeabi_dmul>
 80143a0:	e7e7      	b.n	8014372 <scalbn+0x42>
 80143a2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80143a6:	4432      	add	r2, r6
 80143a8:	428a      	cmp	r2, r1
 80143aa:	dced      	bgt.n	8014388 <scalbn+0x58>
 80143ac:	2a00      	cmp	r2, #0
 80143ae:	dd0a      	ble.n	80143c6 <scalbn+0x96>
 80143b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80143b4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80143b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80143bc:	46ac      	mov	ip, r5
 80143be:	4658      	mov	r0, fp
 80143c0:	4661      	mov	r1, ip
 80143c2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80143c6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80143ca:	da09      	bge.n	80143e0 <scalbn+0xb0>
 80143cc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80143d0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80143d4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80143d8:	480e      	ldr	r0, [pc, #56]	@ (8014414 <scalbn+0xe4>)
 80143da:	f041 011f 	orr.w	r1, r1, #31
 80143de:	e7bd      	b.n	801435c <scalbn+0x2c>
 80143e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80143e4:	3236      	adds	r2, #54	@ 0x36
 80143e6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80143ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80143ee:	4658      	mov	r0, fp
 80143f0:	4629      	mov	r1, r5
 80143f2:	2200      	movs	r2, #0
 80143f4:	4b08      	ldr	r3, [pc, #32]	@ (8014418 <scalbn+0xe8>)
 80143f6:	e7d1      	b.n	801439c <scalbn+0x6c>
 80143f8:	c2f8f359 	.word	0xc2f8f359
 80143fc:	01a56e1f 	.word	0x01a56e1f
 8014400:	8800759c 	.word	0x8800759c
 8014404:	7e37e43c 	.word	0x7e37e43c
 8014408:	43500000 	.word	0x43500000
 801440c:	ffff3cb0 	.word	0xffff3cb0
 8014410:	8800759c 	.word	0x8800759c
 8014414:	c2f8f359 	.word	0xc2f8f359
 8014418:	3c900000 	.word	0x3c900000

0801441c <with_errno>:
 801441c:	b570      	push	{r4, r5, r6, lr}
 801441e:	4604      	mov	r4, r0
 8014420:	460d      	mov	r5, r1
 8014422:	4616      	mov	r6, r2
 8014424:	f7fb fc7c 	bl	800fd20 <__errno>
 8014428:	4629      	mov	r1, r5
 801442a:	6006      	str	r6, [r0, #0]
 801442c:	4620      	mov	r0, r4
 801442e:	bd70      	pop	{r4, r5, r6, pc}

08014430 <xflow>:
 8014430:	b513      	push	{r0, r1, r4, lr}
 8014432:	4604      	mov	r4, r0
 8014434:	4619      	mov	r1, r3
 8014436:	4610      	mov	r0, r2
 8014438:	b10c      	cbz	r4, 801443e <xflow+0xe>
 801443a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801443e:	e9cd 2300 	strd	r2, r3, [sp]
 8014442:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014446:	f7ec f85f 	bl	8000508 <__aeabi_dmul>
 801444a:	2222      	movs	r2, #34	@ 0x22
 801444c:	b002      	add	sp, #8
 801444e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014452:	f7ff bfe3 	b.w	801441c <with_errno>

08014456 <__math_uflow>:
 8014456:	2200      	movs	r2, #0
 8014458:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801445c:	f7ff bfe8 	b.w	8014430 <xflow>

08014460 <__math_oflow>:
 8014460:	2200      	movs	r2, #0
 8014462:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8014466:	f7ff bfe3 	b.w	8014430 <xflow>
	...

0801446c <_init>:
 801446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801446e:	bf00      	nop
 8014470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014472:	bc08      	pop	{r3}
 8014474:	469e      	mov	lr, r3
 8014476:	4770      	bx	lr

08014478 <_fini>:
 8014478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447a:	bf00      	nop
 801447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801447e:	bc08      	pop	{r3}
 8014480:	469e      	mov	lr, r3
 8014482:	4770      	bx	lr
